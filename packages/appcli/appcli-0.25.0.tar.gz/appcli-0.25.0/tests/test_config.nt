test_argparse_docopt_config:
  -
    id: argparse
    obj:
      > class DummyObj:
      >     __config__ = [appcli.ArgparseConfig]
      >     usage = appcli.config_attr()
      >     brief = appcli.config_attr()
      >
      >     x = appcli.param()
      >     y = appcli.param()
      >
      >     def get_argparse(self):
      >         import argparse
      >         p = argparse.ArgumentParser(description="Do something")
      >         p.add_argument('x')
      >         p.add_argument('-y', action='store_true')
      >         return p
    usage:
      > usage: app [-h] [-y] x
      >
      > Do something
      >
      > positional arguments:
      >   x
      >
      > optional arguments:
      >   -h, --help  show this help message and exit
      >   -y
      >
    brief:
      > Do something
    invocations:
      -
        argv:
          > ./app x
        expected:
          x: 'x'
          y: False
      -
        argv:
          > ./app x -y
        expected:
          x: 'x'
          y: True
  -
    id: argparse-setup
    obj:
      > class DummyObj:
      >     __config__ = [
      >         appcli.ArgparseConfig.setup(
      >             parser_getter=lambda obj: obj.get_my_argparse(),
      >             schema=lambda d: {**d, 'x': 'x*'},
      >         ),
      >     ]
      >     usage = appcli.config_attr()
      >     brief = appcli.config_attr()
      >
      >     x = appcli.param()
      >     y = appcli.param()
      >
      >     def get_my_argparse(self):
      >         import argparse
      >         p = argparse.ArgumentParser(description="Do something")
      >         p.add_argument('x')
      >         p.add_argument('-y', action='store_true')
      >         return p
    usage:
      > usage: app [-h] [-y] x
      >
      > Do something
      >
      > positional arguments:
      >   x
      >
      > optional arguments:
      >   -h, --help  show this help message and exit
      >   -y
      >
    brief:
      > Do something
    invocations:
      -
        argv:
          > ./app x
        expected:
          x: 'x*'
          y: False
      -
        argv:
          > ./app x -y
        expected:
          x: 'x*'
          y: True
  -
    id: docopt
    obj:
      > class DummyObj:
      >     """\
      >     Do something.
      >
      >     Usage:
      >         app <x> [<y>...] [-z]
      >     """
      >     __config__ = [appcli.DocoptConfig]
      >     usage = appcli.config_attr()
      >     brief = appcli.config_attr()
      >
      >     x = appcli.param('<x>')
      >     y = appcli.param('<y>', default=None)
      >     z = appcli.param('-z', default=None)
    usage:
      > Do something.
      >
      > Usage:
      >     app <x> [<y>...] [-z]
      >
    brief:
      > Do something.
    invocations:
      -
        argv:
          > ./app x
        expected:
          x: 'x'
          y: None
          z: None
      -
        argv:
          > ./app x -z
        expected:
          x: 'x'
          y: None
          z: True
      -
        argv:
          > ./app x y -z
        expected:
          x: 'x'
          y: ['y']
          z: True
  -
    id: docopt-setup
    obj:
      > class DummyObj:
      >     doc = """\
      > Usage:
      >     app <x> [<y>...] [-z]
      > """
      >     __config__ = [
      >         appcli.DocoptConfig.setup(
      >             usage_getter=lambda obj: obj.doc,
      >             options_first=True,
      >             schema=lambda d: {**d, '<x>': d['<x>'] + '*'},
      >         ),
      >     ]
      >     usage = appcli.config_attr()
      >     brief = appcli.config_attr()
      >     version = '1.0'
      >
      >     x = appcli.param('<x>')
      >     y = appcli.param('<y>', default=None)
      >     z = appcli.param('-z', default=None)
    usage:
      > Usage:
      >     app <x> [<y>...] [-z]
      >
    brief:
    invocations:
      -
        argv:
          > ./app x
        expected:
          x: 'x*'
          y: None
          z: None
      -
        argv:
          > ./app x -z
        expected:
          x: 'x*'
          y: ['-z']
          z: None
      -
        argv:
          > ./app -z x
        expected:
          x: 'x*'
          y: None
          z: True
  -
    id: docopt-class-attrs
    obj:
      > class DummyDocoptConfig(appcli.DocoptConfig):
      >     usage_getter = lambda obj: obj.doc
      >     options_first = True
      >     schema = lambda d: {**d, '<x>': d['<x>'] + '*'}
      >
      > class DummyObj:
      >     doc = """\
      > Usage:
      >     app <x> [<y>...] [-z]
      > """
      >     __config__ = [DummyDocoptConfig]
      >     usage = appcli.config_attr()
      >     brief = appcli.config_attr()
      >     version = '1.0'
      >
      >     x = appcli.param('<x>')
      >     y = appcli.param('<y>', default=None)
      >     z = appcli.param('-z', default=None)
    usage:
      > Usage:
      >     app <x> [<y>...] [-z]
      >
    brief:
    invocations:
      -
        argv:
          > ./app x
        expected:
          x: 'x*'
          y: None
          z: None
      -
        argv:
          > ./app x -z
        expected:
          x: 'x*'
          y: ['-z']
          z: None
      -
        argv:
          > ./app -z x
        expected:
          x: 'x*'
          y: None
          z: True
  -
    id: docopt-mako
    obj:
      > class DummyObj:
      >     """\
      > Usage:
      >     app <x> [-y Y]
      >
      > Options:
      >     -y Y  [default: ${app.y.upper()}]
      > """
      >     __config__ = [appcli.DocoptConfig]
      >     usage = appcli.config_attr()
      >     brief = appcli.config_attr()
      >
      >     x = appcli.param('<x>')
      >     y = appcli.param('-y', default='a')
    usage:
      > Usage:
      >     app <x> [-y Y]
      >
      > Options:
      >     -y Y  [default: A]
      >
    brief:
    invocations:
      -
        argv:
          > ./app x
        expected:
          x: 'x'
          y: 'A'
      -
        argv:
          > ./app x -y b
        expected:
          x: 'x'
          y: 'b'

test_appdirs_config:
  -
    obj:
      > class DummyAppDirsConfig(appcli.AppDirsConfig):
      >   name = 'conf.nt'
      >
      > class DummyObj:
      >     __config__ = [DummyAppDirsConfig]
      >     dirs = appcli.config_attr()
    slug: 'dummyobj'
    author: None
    version: None
    files:
      user/conf.nt:
        > x: 1
      site/conf.nt:
        > y: 2
    layers:
      -
        values: {'x': '1'}
        location: user/conf.nt
      -
        values: {'y': '2'}
        location: site/conf.nt
  -
    obj:
      > class DummyAppDirsConfig(appcli.AppDirsConfig):
      >   name = 'conf.nt'
      >   slug = 'slug'
      >   author = 'author'
      >   version = 'version'
      >
      > class DummyObj:
      >     __config__ = [DummyAppDirsConfig]
      >     dirs = appcli.config_attr()
    slug: 'slug'
    author: 'author'
    version: 'version'
    files:
      user/conf.nt:
        > x: 1
      site/conf.nt:
        > y: 2
    layers:
      -
        values: {'x': '1'}
        location: user/conf.nt
      -
        values: {'y': '2'}
        location: site/conf.nt

test_appdirs_config_get_name_and_config_cls:
  -
    id: error
    config: appcli.AppDirsConfig()
    error:
      type: appcli.ConfigError
      message:
        - must specify `AppDirsConfig.name` or `AppDirsConfig.config_cls`
  -
    id: error
    config: appcli.AppDirsConfig(name='conf.yml', format=appcli.TomlConfig)
    error:
      type: appcli.ConfigError
      message:
        - can't specify `AppDirsConfig.name` and `AppDirsConfig.format`
        - name: 'conf.yml'
        - format: <class 'appcli.*TomlConfig'>
        - use `AppDirsConfig.stem` to change the filename used by `AppDirsConfig.format`
  -
    id: error
    config: appcli.AppDirsConfig(name='conf.xyz')
    error:
      type: appcli.ConfigError
      message:
        - can't find FileConfig subclass to load 'conf.xyz'
        - found these subclasses:
        - <class 'appcli.*YamlConfig'>: .yml .yaml
        - <class 'appcli.*TomlConfig'>: .toml
        - <class 'appcli.*NtConfig'>: .nt

  -
    id: name
    config: appcli.AppDirsConfig(name='my-conf.yml')
    name: my-conf.yml
    config_cls: appcli.YamlConfig
  -
    id: name
    config: appcli.AppDirsConfig(name='my-conf.yaml')
    name: my-conf.yaml
    config_cls: appcli.YamlConfig
  -
    id: name
    config: appcli.AppDirsConfig(name='my-conf.toml')
    name: my-conf.toml
    config_cls: appcli.TomlConfig
  -
    id: name
    config: appcli.AppDirsConfig(name='my-conf.nt')
    name: my-conf.nt
    config_cls: appcli.NtConfig

  -
    id: format
    config: appcli.AppDirsConfig(format=appcli.YamlConfig)
    name: conf.yml
    config_cls: appcli.YamlConfig
  -
    id: config_cls
    config: appcli.AppDirsConfig(format=appcli.YamlConfig, stem='my-conf')
    name: my-conf.yml
    config_cls: appcli.YamlConfig
  -
    id: config_cls
    config: appcli.AppDirsConfig(format=appcli.TomlConfig)
    name: conf.toml
    config_cls: appcli.TomlConfig
  -
    id: config_cls
    config: appcli.AppDirsConfig(format=appcli.TomlConfig, stem='my-conf')
    name: my-conf.toml
    config_cls: appcli.TomlConfig
  -
    id: config_cls
    config: appcli.AppDirsConfig(format=appcli.NtConfig)
    name: conf.nt
    config_cls: appcli.NtConfig
  -
    id: config_cls
    config: appcli.AppDirsConfig(format=appcli.NtConfig, stem='my-conf')
    name: my-conf.nt
    config_cls: appcli.NtConfig

test_file_config:
  -
    id: yaml
    obj:
      > class DummyObj:
      >     __config__ = [appcli.YamlConfig]
      >     path = 'x.yml'
    files:
      x.yml:
        > x: 1
    layers:
      -
        values: {'x': 1}
        location: x.yml
  -
    id: toml
    obj:
      > class DummyObj:
      >     __config__ = [appcli.TomlConfig]
      >     path = 'x.toml'
    files:
      x.toml:
        > x = 1
    layers:
      -
        values: {'x': 1}
        location: x.toml
  -
    id: nt
    obj:
      > class DummyObj:
      >     __config__ = [appcli.NtConfig]
      >     path = 'x.nt'
    files:
      x.nt:
        > x: 1
    layers:
      -
        values: {'x': '1'}
        location: x.nt
  -
    id: path-setup
    obj:
      > class DummyObj:
      >     __config__ = [appcli.YamlConfig.setup('x.yml')]
    files:
      x.yml:
        > x: 1
    layers:
      -
        values: {'x': 1}
        location: x.yml
  -
    id: paths-setup
    obj:
      > class DummyObj:
      >     __config__ = [appcli.YamlConfig.setup(['x.yml', 'y.yml'])]
    files:
      x.yml:
        > x: 1
      y.yml:
        > y: 1
    layers:
      -
        values: {'x': 1}
        location: x.yml
      -
        values: {'y': 1}
        location: y.yml
  -
    id: path-getter-cls
    obj:
      > class DummyYamlConfig(appcli.YamlConfig):
      >     path_getter = lambda obj: obj.p
      >
      > class DummyObj:
      >     __config__ = [DummyYamlConfig]
      >     p = 'x.yml'
      >
    files:
      x.yml:
        > x: 1
    layers:
      -
        values: {'x': 1}
        location: x.yml
  -
    id: path-getter-setup
    obj:
      > class DummyObj:
      >     __config__ = [
      >         appcli.YamlConfig.setup(path_getter=lambda x: x.p),
      >     ]
      >     p = 'x.yml'
      >
    files:
      x.yml:
        > x: 1
    layers:
      -
        values: {'x': 1}
        location: x.yml
  -
    id: schema-cls
    obj:
      > class DummyYamlConfig(appcli.YamlConfig):
      >     schema = ...
      >
      > class DummyObj:
      >     __config__ = [DummyYamlConfig]
      >     path = 'x.yml'
    files:
      x.yml:
        > x: 1
    layers:
      -
        values: {'x': 1}
        location: x.yml
        schema: ...
  -
    id: schema-setup
    obj:
      > class DummyObj:
      >     __config__ = [appcli.YamlConfig.setup(schema=...)]
      >     path = 'x.yml'
    files:
      x.yml:
        > x: 1
    layers:
      -
        values: {'x': 1}
        location: x.yml
        schema: ...
  -
    id: root-key-cls
    obj:
      > class DummyYamlConfig(appcli.YamlConfig):
      >     root_key = 'x'
      >
      > class DummyObj:
      >     __config__ = [DummyYamlConfig]
      >     path = 'x.yml'
    files:
      x.yml:
        > x: 1
    layers:
      -
        values: {'x': 1}
        location: x.yml
        root_key: 'x'
  -
    id: root-key-setup
    obj:
      > class DummyObj:
      >     __config__ = [appcli.YamlConfig.setup(root_key='x')]
      >     path = 'x.nt'
    files:
      x.nt:
        > x: 1
    layers:
      -
        values: {'x': 1}
        location: x.nt
        root_key: 'x'
  -
    id: not-found
    obj:
      > class DummyObj:
      >     __config__ = [appcli.YamlConfig]
      >     path = 'not-found.yml'
    files:
    layers:
      -
        values: {}
        location: not-found.yml

test_on_load:
  -
    id: init
    prepare:
    load:
      > appcli.init(obj)
    expected:
      - default
      - DummyConfig
      - A
      - A1
      - A2

  -
    id: load
    prepare:
      > appcli.init(obj)
    load:
      > appcli.load(obj)
    expected:
      - default
      - DummyConfig
      - B
      - B1
      - B2
  -
    id: load-a
    prepare:
      > appcli.init(obj)
    load:
      > appcli.load(obj, A)
    expected:
  -
    id: load-a1
    prepare:
      > appcli.init(obj)
    load:
      > appcli.load(obj, A1)
    expected:
  -
    id: load-a2
    prepare:
      > appcli.init(obj)
    load:
      > appcli.load(obj, A2)
    expected:
  -
    id: load-b
    prepare:
      > appcli.init(obj)
    load:
      > appcli.load(obj, B)
    expected:
      - default
      - DummyConfig
      - B
      - B1
      - B2
  -
    id: load-b1
    prepare:
      > appcli.init(obj)
    load:
      > appcli.load(obj, B1)
    expected:
      - default
      - DummyConfig
      - B
      - B1
  -
    id: load-b2
    prepare:
      > appcli.init(obj)
    load:
      > appcli.load(obj, B2)
    expected:
      - default
      - DummyConfig
      - B
      - B2

  -
    id: reload
    prepare:
      > appcli.load(obj)
    load:
      > appcli.reload(obj)
    expected:
      - default
      - DummyConfig
      - A
      - A1
      - A2
      - B
      - B1
      - B2
  -
    id: reload-a
    prepare:
      > appcli.load(obj)
    load:
      > appcli.reload(obj, A)
    expected:
      - default
      - DummyConfig
      - A
      - A1
      - A2
  -
    id: reload-a1
    prepare:
      > appcli.load(obj)
    load:
      > appcli.reload(obj, A1)
    expected:
      - default
      - DummyConfig
      - A
      - A1
  -
    id: reload-a2
    prepare:
      > appcli.load(obj)
    load:
      > appcli.reload(obj, A2)
    expected:
      - default
      - DummyConfig
      - A
      - A2
  -
    id: reload-b
    prepare:
      > appcli.load(obj)
    load:
      > appcli.reload(obj, B)
    expected:
      - default
      - DummyConfig
      - B
      - B1
      - B2
  -
    id: reload-b1
    prepare:
      > appcli.load(obj)
    load:
      > appcli.reload(obj, B1)
    expected:
      - default
      - DummyConfig
      - B
      - B1
  -
    id: reload-b2
    prepare:
      > appcli.load(obj)
    load:
      > appcli.reload(obj, B2)
    expected:
      - default
      - DummyConfig
      - B
      - B2

  -
    id: direct
    prepare:
    load:
      > obj.on_default()
    expected:
      - default

test_dict_like:
  -
    f: f = lambda x: x+1
    x: 1
    expected: 2
  -
    f:
      > def f(x):
      >     raise KeyError
    error:
      type: KeyError
  -
    f:
      > def f(x):
      >     raise IndexError
    raises:
      - IndexError
    error:
      type: KeyError
  -
    f:
      > def f(x):
      >     raise IndexError
    raises:
      - AttributeError
    error:
      type: IndexError
  -
    f:
      > def f(x):
      >     raise IndexError
    raises:
      - AttributeError
      - IndexError
    error:
      type: KeyError


