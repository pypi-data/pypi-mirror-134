<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="28034"><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0143%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="0.0250%" y="245" width="0.0143%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="4"/><text x="0.2750%" y="255.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (104 samples, 0.37%)</title><rect x="0.0499%" y="245" width="0.3710%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="104"/><text x="0.2999%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (104 samples, 0.37%)</title><rect x="0.0499%" y="229" width="0.3710%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="104"/><text x="0.2999%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (104 samples, 0.37%)</title><rect x="0.0499%" y="213" width="0.3710%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="104"/><text x="0.2999%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (104 samples, 0.37%)</title><rect x="0.0499%" y="197" width="0.3710%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="104"/><text x="0.2999%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (104 samples, 0.37%)</title><rect x="0.0499%" y="181" width="0.3710%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="104"/><text x="0.2999%" y="191.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (193 samples, 0.69%)</title><rect x="0.4245%" y="229" width="0.6884%" height="15" fill="rgb(228,23,34)" fg:x="119" fg:w="193"/><text x="0.6745%" y="239.50"></text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,PLast),D&gt;::collect_with_partial (192 samples, 0.68%)</title><rect x="0.4281%" y="213" width="0.6849%" height="15" fill="rgb(218,30,26)" fg:x="120" fg:w="192"/><text x="0.6781%" y="223.50"></text></g><g><title>multiple_broadened_spectra`ndarray::numeric::impl_numeric::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::sum (188 samples, 0.67%)</title><rect x="0.4423%" y="197" width="0.6706%" height="15" fill="rgb(220,122,19)" fg:x="124" fg:w="188"/><text x="0.6923%" y="207.50"></text></g><g><title>multiple_broadened_spectra`ndarray::numeric::impl_numeric::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mean_axis (203 samples, 0.72%)</title><rect x="0.4245%" y="245" width="0.7241%" height="15" fill="rgb(250,228,42)" fg:x="119" fg:w="203"/><text x="0.6745%" y="255.50"></text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (10 samples, 0.04%)</title><rect x="1.1129%" y="229" width="0.0357%" height="15" fill="rgb(240,193,28)" fg:x="312" fg:w="10"/><text x="1.3629%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="1.1486%" y="229" width="0.0107%" height="15" fill="rgb(216,20,37)" fg:x="322" fg:w="3"/><text x="1.3986%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_size (8 samples, 0.03%)</title><rect x="1.2521%" y="197" width="0.0285%" height="15" fill="rgb(206,188,39)" fg:x="351" fg:w="8"/><text x="1.5021%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (32 samples, 0.11%)</title><rect x="1.2021%" y="213" width="0.1141%" height="15" fill="rgb(217,207,13)" fg:x="337" fg:w="32"/><text x="1.4521%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.04%)</title><rect x="1.2806%" y="197" width="0.0357%" height="15" fill="rgb(231,73,38)" fg:x="359" fg:w="10"/><text x="1.5306%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.03%)</title><rect x="1.2842%" y="181" width="0.0321%" height="15" fill="rgb(225,20,46)" fg:x="360" fg:w="9"/><text x="1.5342%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (6 samples, 0.02%)</title><rect x="1.3519%" y="197" width="0.0214%" height="15" fill="rgb(210,31,41)" fg:x="379" fg:w="6"/><text x="1.6019%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (21 samples, 0.07%)</title><rect x="1.3163%" y="213" width="0.0749%" height="15" fill="rgb(221,200,47)" fg:x="369" fg:w="21"/><text x="1.5663%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (5 samples, 0.02%)</title><rect x="1.3733%" y="197" width="0.0178%" height="15" fill="rgb(226,26,5)" fg:x="385" fg:w="5"/><text x="1.6233%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="1.4090%" y="181" width="0.0107%" height="15" fill="rgb(249,33,26)" fg:x="395" fg:w="3"/><text x="1.6590%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.04%)</title><rect x="1.3912%" y="213" width="0.0428%" height="15" fill="rgb(235,183,28)" fg:x="390" fg:w="12"/><text x="1.6412%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.04%)</title><rect x="1.3983%" y="197" width="0.0357%" height="15" fill="rgb(221,5,38)" fg:x="392" fg:w="10"/><text x="1.6483%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.01%)</title><rect x="1.4197%" y="181" width="0.0143%" height="15" fill="rgb(247,18,42)" fg:x="398" fg:w="4"/><text x="1.6697%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (7 samples, 0.02%)</title><rect x="1.4447%" y="213" width="0.0250%" height="15" fill="rgb(241,131,45)" fg:x="405" fg:w="7"/><text x="1.6947%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.04%)</title><rect x="1.4768%" y="197" width="0.0428%" height="15" fill="rgb(249,31,29)" fg:x="414" fg:w="12"/><text x="1.7268%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.04%)</title><rect x="1.4839%" y="181" width="0.0357%" height="15" fill="rgb(225,111,53)" fg:x="416" fg:w="10"/><text x="1.7339%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.04%)</title><rect x="1.4839%" y="165" width="0.0357%" height="15" fill="rgb(238,160,17)" fg:x="416" fg:w="10"/><text x="1.7339%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (6 samples, 0.02%)</title><rect x="1.6195%" y="165" width="0.0214%" height="15" fill="rgb(214,148,48)" fg:x="454" fg:w="6"/><text x="1.8695%" y="175.50"></text></g><g><title>multiple_broadened_spectra`core::ptr::drop_in_place&lt;ham2spec::StickSpectrum&gt; (52 samples, 0.19%)</title><rect x="1.4696%" y="213" width="0.1855%" height="15" fill="rgb(232,36,49)" fg:x="412" fg:w="52"/><text x="1.7196%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (38 samples, 0.14%)</title><rect x="1.5196%" y="197" width="0.1355%" height="15" fill="rgb(209,103,24)" fg:x="426" fg:w="38"/><text x="1.7696%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.08%)</title><rect x="1.5731%" y="181" width="0.0820%" height="15" fill="rgb(229,88,8)" fg:x="441" fg:w="23"/><text x="1.8231%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.01%)</title><rect x="1.6409%" y="165" width="0.0143%" height="15" fill="rgb(213,181,19)" fg:x="460" fg:w="4"/><text x="1.8909%" y="175.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,ndarray::dimension::dim::Dim&lt;[usize (119 samples, 0.42%)</title><rect x="1.6658%" y="197" width="0.4245%" height="15" fill="rgb(254,191,54)" fg:x="467" fg:w="119"/><text x="1.9158%" y="207.50"></text></g><g><title> 1]&gt;&gt;&gt;::range (119 samples, 0.42%)</title><rect x="1.6658%" y="181" width="0.4245%" height="15" fill="rgb(241,83,37)" fg:x="467" fg:w="119"/><text x="1.9158%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="2.0725%" y="165" width="0.0178%" height="15" fill="rgb(233,36,39)" fg:x="581" fg:w="5"/><text x="2.3225%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="2.0725%" y="149" width="0.0178%" height="15" fill="rgb(226,3,54)" fg:x="581" fg:w="5"/><text x="2.3225%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.01%)</title><rect x="2.0761%" y="133" width="0.0143%" height="15" fill="rgb(245,192,40)" fg:x="582" fg:w="4"/><text x="2.3261%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (28 samples, 0.10%)</title><rect x="10.0164%" y="165" width="0.0999%" height="15" fill="rgb(238,167,29)" fg:x="2808" fg:w="28"/><text x="10.2664%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.09%)</title><rect x="10.0235%" y="149" width="0.0927%" height="15" fill="rgb(232,182,51)" fg:x="2810" fg:w="26"/><text x="10.2735%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (25 samples, 0.09%)</title><rect x="10.0271%" y="133" width="0.0892%" height="15" fill="rgb(231,60,39)" fg:x="2811" fg:w="25"/><text x="10.2771%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (12 samples, 0.04%)</title><rect x="10.0735%" y="117" width="0.0428%" height="15" fill="rgb(208,69,12)" fg:x="2824" fg:w="12"/><text x="10.3235%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.02%)</title><rect x="10.0949%" y="101" width="0.0214%" height="15" fill="rgb(235,93,37)" fg:x="2830" fg:w="6"/><text x="10.3449%" y="111.50"></text></g><g><title>multiple_broadened_spectra`ndarray::iterators::to_vec_mapped (22,935 samples, 81.81%)</title><rect x="2.1153%" y="181" width="81.8114%" height="15" fill="rgb(213,116,39)" fg:x="593" fg:w="22935"/><text x="2.3653%" y="191.50">multiple_broadened_spectra`ndarray::iterators::to_vec_mapped</text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2),D&gt;::fold (20,689 samples, 73.80%)</title><rect x="10.1270%" y="165" width="73.7997%" height="15" fill="rgb(222,207,29)" fg:x="2839" fg:w="20689"/><text x="10.3770%" y="175.50">multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2),D&gt;::fold</text></g><g><title>multiple_broadened_spectra`ham2spec::compute_broadened_spectrum_from_stick (23,137 samples, 82.53%)</title><rect x="1.6551%" y="213" width="82.5319%" height="15" fill="rgb(206,96,30)" fg:x="464" fg:w="23137"/><text x="1.9051%" y="223.50">multiple_broadened_spectra`ham2spec::compute_broadened_spectrum_from_stick</text></g><g><title>multiple_broadened_spectra`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv (23,015 samples, 82.10%)</title><rect x="2.0903%" y="197" width="82.0967%" height="15" fill="rgb(218,138,4)" fg:x="586" fg:w="23015"/><text x="2.3403%" y="207.50">multiple_broadened_spectra`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::mapv</text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2),D&gt;::fold (73 samples, 0.26%)</title><rect x="83.9267%" y="181" width="0.2604%" height="15" fill="rgb(250,191,14)" fg:x="23528" fg:w="73"/><text x="84.1767%" y="191.50"></text></g><g><title>libLAPACK.dylib`DGEEV (3 samples, 0.01%)</title><rect x="84.2227%" y="197" width="0.0107%" height="15" fill="rgb(239,60,40)" fg:x="23611" fg:w="3"/><text x="84.4727%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (3 samples, 0.01%)</title><rect x="84.2370%" y="197" width="0.0107%" height="15" fill="rgb(206,27,48)" fg:x="23615" fg:w="3"/><text x="84.4870%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.01%)</title><rect x="84.2477%" y="197" width="0.0143%" height="15" fill="rgb(225,35,8)" fg:x="23618" fg:w="4"/><text x="84.4977%" y="207.50"></text></g><g><title>libBLAS.dylib`lsame_ (3 samples, 0.01%)</title><rect x="84.3333%" y="181" width="0.0107%" height="15" fill="rgb(250,213,24)" fg:x="23642" fg:w="3"/><text x="84.5833%" y="191.50"></text></g><g><title>libBLAS.dylib`0x00007fff20e2ab36 (21 samples, 0.07%)</title><rect x="84.4261%" y="165" width="0.0749%" height="15" fill="rgb(247,123,22)" fg:x="23668" fg:w="21"/><text x="84.6761%" y="175.50"></text></g><g><title>libBLAS.dylib`DAXPY (3 samples, 0.01%)</title><rect x="84.5010%" y="165" width="0.0107%" height="15" fill="rgb(231,138,38)" fg:x="23689" fg:w="3"/><text x="84.7510%" y="175.50"></text></g><g><title>libBLAS.dylib`DSCAL (6 samples, 0.02%)</title><rect x="84.5117%" y="165" width="0.0214%" height="15" fill="rgb(231,145,46)" fg:x="23692" fg:w="6"/><text x="84.7617%" y="175.50"></text></g><g><title>libBLAS.dylib`0x00007fff20e2a26d (4 samples, 0.01%)</title><rect x="84.5188%" y="149" width="0.0143%" height="15" fill="rgb(251,118,11)" fg:x="23694" fg:w="4"/><text x="84.7688%" y="159.50"></text></g><g><title>libBLAS.dylib`lsame_ (6 samples, 0.02%)</title><rect x="84.5402%" y="165" width="0.0214%" height="15" fill="rgb(217,147,25)" fg:x="23700" fg:w="6"/><text x="84.7902%" y="175.50"></text></g><g><title>libLAPACK.dylib`DGEBAK (12 samples, 0.04%)</title><rect x="84.5652%" y="165" width="0.0428%" height="15" fill="rgb(247,81,37)" fg:x="23707" fg:w="12"/><text x="84.8152%" y="175.50"></text></g><g><title>libBLAS.dylib`IDAMAX (21 samples, 0.07%)</title><rect x="84.7471%" y="149" width="0.0749%" height="15" fill="rgb(209,12,38)" fg:x="23758" fg:w="21"/><text x="84.9971%" y="159.50"></text></g><g><title>libBLAS.dylib`cblas_idamax (21 samples, 0.07%)</title><rect x="84.7471%" y="133" width="0.0749%" height="15" fill="rgb(227,1,9)" fg:x="23758" fg:w="21"/><text x="84.9971%" y="143.50"></text></g><g><title>libLAPACK.dylib`DGEBAL (66 samples, 0.24%)</title><rect x="84.6080%" y="165" width="0.2354%" height="15" fill="rgb(248,47,43)" fg:x="23719" fg:w="66"/><text x="84.8580%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Haswell (4 samples, 0.01%)</title><rect x="84.8291%" y="149" width="0.0143%" height="15" fill="rgb(221,10,30)" fg:x="23781" fg:w="4"/><text x="85.0791%" y="159.50"></text></g><g><title>libBLAS.dylib`0x00007fff20c61ef0 (4 samples, 0.01%)</title><rect x="85.1038%" y="69" width="0.0143%" height="15" fill="rgb(210,229,1)" fg:x="23858" fg:w="4"/><text x="85.3538%" y="79.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8f5ce (12 samples, 0.04%)</title><rect x="85.1858%" y="53" width="0.0428%" height="15" fill="rgb(222,148,37)" fg:x="23881" fg:w="12"/><text x="85.4358%" y="63.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d3c42b (34 samples, 0.12%)</title><rect x="85.1252%" y="69" width="0.1213%" height="15" fill="rgb(234,67,33)" fg:x="23864" fg:w="34"/><text x="85.3752%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.01%)</title><rect x="85.2322%" y="53" width="0.0143%" height="15" fill="rgb(247,98,35)" fg:x="23894" fg:w="4"/><text x="85.4822%" y="63.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8d23b (25 samples, 0.09%)</title><rect x="85.2465%" y="69" width="0.0892%" height="15" fill="rgb(247,138,52)" fg:x="23898" fg:w="25"/><text x="85.4965%" y="79.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$__bzero (5 samples, 0.02%)</title><rect x="85.3392%" y="69" width="0.0178%" height="15" fill="rgb(213,79,30)" fg:x="23924" fg:w="5"/><text x="85.5892%" y="79.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d3c644 (81 samples, 0.29%)</title><rect x="85.0753%" y="85" width="0.2889%" height="15" fill="rgb(246,177,23)" fg:x="23850" fg:w="81"/><text x="85.3253%" y="95.50"></text></g><g><title>libBLAS.dylib`DGEMV (106 samples, 0.38%)</title><rect x="84.9968%" y="117" width="0.3781%" height="15" fill="rgb(230,62,27)" fg:x="23828" fg:w="106"/><text x="85.2468%" y="127.50"></text></g><g><title>libBLAS.dylib`cblas_dgemv (95 samples, 0.34%)</title><rect x="85.0360%" y="101" width="0.3389%" height="15" fill="rgb(216,154,8)" fg:x="23839" fg:w="95"/><text x="85.2860%" y="111.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8d23b (3 samples, 0.01%)</title><rect x="85.3642%" y="85" width="0.0107%" height="15" fill="rgb(244,35,45)" fg:x="23931" fg:w="3"/><text x="85.6142%" y="95.50"></text></g><g><title>libBLAS.dylib`0x00007fff20c61310 (14 samples, 0.05%)</title><rect x="85.4106%" y="85" width="0.0499%" height="15" fill="rgb(251,115,12)" fg:x="23944" fg:w="14"/><text x="85.6606%" y="95.50"></text></g><g><title>libBLAS.dylib`0x00007fff20c61515 (3 samples, 0.01%)</title><rect x="85.4498%" y="69" width="0.0107%" height="15" fill="rgb(240,54,50)" fg:x="23955" fg:w="3"/><text x="85.6998%" y="79.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8c7d0 (11 samples, 0.04%)</title><rect x="85.5212%" y="69" width="0.0392%" height="15" fill="rgb(233,84,52)" fg:x="23975" fg:w="11"/><text x="85.7712%" y="79.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8c818 (10 samples, 0.04%)</title><rect x="85.5247%" y="53" width="0.0357%" height="15" fill="rgb(207,117,47)" fg:x="23976" fg:w="10"/><text x="85.7747%" y="63.50"></text></g><g><title>libBLAS.dylib`0x00007fff20c6166d (30 samples, 0.11%)</title><rect x="85.4605%" y="85" width="0.1070%" height="15" fill="rgb(249,43,39)" fg:x="23958" fg:w="30"/><text x="85.7105%" y="95.50"></text></g><g><title>libBLAS.dylib`DGER (59 samples, 0.21%)</title><rect x="85.3749%" y="117" width="0.2105%" height="15" fill="rgb(209,38,44)" fg:x="23934" fg:w="59"/><text x="85.6249%" y="127.50"></text></g><g><title>libBLAS.dylib`cblas_dger (55 samples, 0.20%)</title><rect x="85.3892%" y="101" width="0.1962%" height="15" fill="rgb(236,212,23)" fg:x="23938" fg:w="55"/><text x="85.6392%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`___chkstk_darwin (4 samples, 0.01%)</title><rect x="85.5711%" y="85" width="0.0143%" height="15" fill="rgb(242,79,21)" fg:x="23989" fg:w="4"/><text x="85.8211%" y="95.50"></text></g><g><title>libBLAS.dylib`cblas_dgemv (3 samples, 0.01%)</title><rect x="85.5854%" y="117" width="0.0107%" height="15" fill="rgb(211,96,35)" fg:x="23993" fg:w="3"/><text x="85.8354%" y="127.50"></text></g><g><title>libLAPACK.dylib`DLARF (187 samples, 0.67%)</title><rect x="84.9504%" y="133" width="0.6670%" height="15" fill="rgb(253,215,40)" fg:x="23815" fg:w="187"/><text x="85.2004%" y="143.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d88a97 (6 samples, 0.02%)</title><rect x="85.6496%" y="117" width="0.0214%" height="15" fill="rgb(211,81,21)" fg:x="24011" fg:w="6"/><text x="85.8996%" y="127.50"></text></g><g><title>libBLAS.dylib`getHardwareInfo (4 samples, 0.01%)</title><rect x="85.6567%" y="101" width="0.0143%" height="15" fill="rgb(208,190,38)" fg:x="24013" fg:w="4"/><text x="85.9067%" y="111.50"></text></g><g><title>libBLAS.dylib`0x00007fff20e2ab36 (12 samples, 0.04%)</title><rect x="85.6817%" y="117" width="0.0428%" height="15" fill="rgb(235,213,38)" fg:x="24020" fg:w="12"/><text x="85.9317%" y="127.50"></text></g><g><title>libBLAS.dylib`0x00007fff20e2a26d (8 samples, 0.03%)</title><rect x="85.7316%" y="101" width="0.0285%" height="15" fill="rgb(237,122,38)" fg:x="24034" fg:w="8"/><text x="85.9816%" y="111.50"></text></g><g><title>libBLAS.dylib`DSCAL (11 samples, 0.04%)</title><rect x="85.7245%" y="117" width="0.0392%" height="15" fill="rgb(244,218,35)" fg:x="24032" fg:w="11"/><text x="85.9745%" y="127.50"></text></g><g><title>libLAPACK.dylib`DLARFG (56 samples, 0.20%)</title><rect x="85.6175%" y="133" width="0.1998%" height="15" fill="rgb(240,68,47)" fg:x="24002" fg:w="56"/><text x="85.8675%" y="143.50"></text></g><g><title>libLAPACK.dylib`DLAPY2 (14 samples, 0.05%)</title><rect x="85.7673%" y="117" width="0.0499%" height="15" fill="rgb(210,16,53)" fg:x="24044" fg:w="14"/><text x="86.0173%" y="127.50"></text></g><g><title>libLAPACK.dylib`DGEHD2 (264 samples, 0.94%)</title><rect x="84.8791%" y="149" width="0.9417%" height="15" fill="rgb(235,124,12)" fg:x="23795" fg:w="264"/><text x="85.1291%" y="159.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b6b94 (9 samples, 0.03%)</title><rect x="85.8458%" y="117" width="0.0321%" height="15" fill="rgb(224,169,11)" fg:x="24066" fg:w="9"/><text x="86.0958%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (6 samples, 0.02%)</title><rect x="85.8565%" y="101" width="0.0214%" height="15" fill="rgb(250,166,2)" fg:x="24069" fg:w="6"/><text x="86.1065%" y="111.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b6be0 (12 samples, 0.04%)</title><rect x="85.8779%" y="117" width="0.0428%" height="15" fill="rgb(242,216,29)" fg:x="24075" fg:w="12"/><text x="86.1279%" y="127.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b5d07 (26 samples, 0.09%)</title><rect x="85.8422%" y="133" width="0.0927%" height="15" fill="rgb(230,116,27)" fg:x="24065" fg:w="26"/><text x="86.0922%" y="143.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b6be0 (4 samples, 0.01%)</title><rect x="85.9421%" y="133" width="0.0143%" height="15" fill="rgb(228,99,48)" fg:x="24093" fg:w="4"/><text x="86.1921%" y="143.50"></text></g><g><title>libLAPACK.dylib`DGEHRD (313 samples, 1.12%)</title><rect x="84.8434%" y="165" width="1.1165%" height="15" fill="rgb(253,11,6)" fg:x="23785" fg:w="313"/><text x="85.0934%" y="175.50"></text></g><g><title>libLAPACK.dylib`ILAENV (36 samples, 0.13%)</title><rect x="85.8315%" y="149" width="0.1284%" height="15" fill="rgb(247,143,39)" fg:x="24062" fg:w="36"/><text x="86.0815%" y="159.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2ac4d35a (3 samples, 0.01%)</title><rect x="85.9884%" y="149" width="0.0107%" height="15" fill="rgb(236,97,10)" fg:x="24106" fg:w="3"/><text x="86.2384%" y="159.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d88a50 (3 samples, 0.01%)</title><rect x="87.3974%" y="133" width="0.0107%" height="15" fill="rgb(233,208,19)" fg:x="24501" fg:w="3"/><text x="87.6474%" y="143.50"></text></g><g><title>libBLAS.dylib`DCOPY (11 samples, 0.04%)</title><rect x="87.4188%" y="133" width="0.0392%" height="15" fill="rgb(216,164,2)" fg:x="24507" fg:w="11"/><text x="87.6688%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.03%)</title><rect x="87.4260%" y="117" width="0.0321%" height="15" fill="rgb(220,129,5)" fg:x="24509" fg:w="9"/><text x="87.6760%" y="127.50"></text></g><g><title>libBLAS.dylib`DROT (4 samples, 0.01%)</title><rect x="87.4617%" y="133" width="0.0143%" height="15" fill="rgb(242,17,10)" fg:x="24519" fg:w="4"/><text x="87.7117%" y="143.50"></text></g><g><title>libLAPACK.dylib`DLAMCH (3 samples, 0.01%)</title><rect x="87.4902%" y="133" width="0.0107%" height="15" fill="rgb(242,107,0)" fg:x="24527" fg:w="3"/><text x="87.7402%" y="143.50"></text></g><g><title>libLAPACK.dylib`DLANV2 (10 samples, 0.04%)</title><rect x="87.5009%" y="133" width="0.0357%" height="15" fill="rgb(251,28,31)" fg:x="24530" fg:w="10"/><text x="87.7509%" y="143.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2ac4d055 (3 samples, 0.01%)</title><rect x="87.5259%" y="117" width="0.0107%" height="15" fill="rgb(233,223,10)" fg:x="24537" fg:w="3"/><text x="87.7759%" y="127.50"></text></g><g><title>libLAPACK.dylib`DLAPY2 (6 samples, 0.02%)</title><rect x="87.5366%" y="133" width="0.0214%" height="15" fill="rgb(215,21,27)" fg:x="24540" fg:w="6"/><text x="87.7866%" y="143.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d88a97 (9 samples, 0.03%)</title><rect x="87.7898%" y="117" width="0.0321%" height="15" fill="rgb(232,23,21)" fg:x="24611" fg:w="9"/><text x="88.0398%" y="127.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d88aef (5 samples, 0.02%)</title><rect x="87.8255%" y="117" width="0.0178%" height="15" fill="rgb(244,5,23)" fg:x="24621" fg:w="5"/><text x="88.0755%" y="127.50"></text></g><g><title>libBLAS.dylib`0x00007fff20e2a26d (5 samples, 0.02%)</title><rect x="87.8433%" y="117" width="0.0178%" height="15" fill="rgb(226,81,46)" fg:x="24626" fg:w="5"/><text x="88.0933%" y="127.50"></text></g><g><title>libBLAS.dylib`0x00007fff20e2ab36 (61 samples, 0.22%)</title><rect x="87.8612%" y="117" width="0.2176%" height="15" fill="rgb(247,70,30)" fg:x="24631" fg:w="61"/><text x="88.1112%" y="127.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8898d (12 samples, 0.04%)</title><rect x="88.0859%" y="101" width="0.0428%" height="15" fill="rgb(212,68,19)" fg:x="24694" fg:w="12"/><text x="88.3359%" y="111.50"></text></g><g><title>libBLAS.dylib`0x00007fff20e2a26d (7 samples, 0.02%)</title><rect x="88.1358%" y="101" width="0.0250%" height="15" fill="rgb(240,187,13)" fg:x="24708" fg:w="7"/><text x="88.3858%" y="111.50"></text></g><g><title>libBLAS.dylib`DSCAL (23 samples, 0.08%)</title><rect x="88.0859%" y="117" width="0.0820%" height="15" fill="rgb(223,113,26)" fg:x="24694" fg:w="23"/><text x="88.3359%" y="127.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2ac4d055 (6 samples, 0.02%)</title><rect x="88.1786%" y="117" width="0.0214%" height="15" fill="rgb(206,192,2)" fg:x="24720" fg:w="6"/><text x="88.4286%" y="127.50"></text></g><g><title>libLAPACK.dylib`DLAMCH (6 samples, 0.02%)</title><rect x="88.2000%" y="117" width="0.0214%" height="15" fill="rgb(241,108,4)" fg:x="24726" fg:w="6"/><text x="88.4500%" y="127.50"></text></g><g><title>libLAPACK.dylib`DLARFG (260 samples, 0.93%)</title><rect x="87.5580%" y="133" width="0.9274%" height="15" fill="rgb(247,173,49)" fg:x="24546" fg:w="260"/><text x="87.8080%" y="143.50"></text></g><g><title>libLAPACK.dylib`DLAPY2 (74 samples, 0.26%)</title><rect x="88.2214%" y="117" width="0.2640%" height="15" fill="rgb(224,114,35)" fg:x="24732" fg:w="74"/><text x="88.4714%" y="127.50"></text></g><g><title>libLAPACK.dylib`DLAHQR (703 samples, 2.51%)</title><rect x="86.0027%" y="149" width="2.5077%" height="15" fill="rgb(245,159,27)" fg:x="24110" fg:w="703"/><text x="86.2527%" y="159.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="88.4997%" y="133" width="0.0107%" height="15" fill="rgb(245,172,44)" fg:x="24810" fg:w="3"/><text x="88.7497%" y="143.50"></text></g><g><title>libLAPACK.dylib`DLASET (9 samples, 0.03%)</title><rect x="88.5282%" y="149" width="0.0321%" height="15" fill="rgb(236,23,11)" fg:x="24818" fg:w="9"/><text x="88.7782%" y="159.50"></text></g><g><title>libLAPACK.dylib`DHSEQR (735 samples, 2.62%)</title><rect x="85.9599%" y="165" width="2.6218%" height="15" fill="rgb(205,117,38)" fg:x="24098" fg:w="735"/><text x="86.2099%" y="175.50">li..</text></g><g><title>libLAPACK.dylib`ILAENV (5 samples, 0.02%)</title><rect x="88.5639%" y="149" width="0.0178%" height="15" fill="rgb(237,72,25)" fg:x="24828" fg:w="5"/><text x="88.8139%" y="159.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b5d07 (5 samples, 0.02%)</title><rect x="88.5639%" y="133" width="0.0178%" height="15" fill="rgb(244,70,9)" fg:x="24828" fg:w="5"/><text x="88.8139%" y="143.50"></text></g><g><title>libLAPACK.dylib`IPARMQ (4 samples, 0.01%)</title><rect x="88.5675%" y="117" width="0.0143%" height="15" fill="rgb(217,125,39)" fg:x="24829" fg:w="4"/><text x="88.8175%" y="127.50"></text></g><g><title>libLAPACK.dylib`DLACPY (4 samples, 0.01%)</title><rect x="88.5817%" y="165" width="0.0143%" height="15" fill="rgb(235,36,10)" fg:x="24833" fg:w="4"/><text x="88.8317%" y="175.50"></text></g><g><title>libLAPACK.dylib`DLANGE (14 samples, 0.05%)</title><rect x="88.6067%" y="165" width="0.0499%" height="15" fill="rgb(251,123,47)" fg:x="24840" fg:w="14"/><text x="88.8567%" y="175.50"></text></g><g><title>libBLAS.dylib`DSCAL (4 samples, 0.01%)</title><rect x="88.7636%" y="117" width="0.0143%" height="15" fill="rgb(221,13,13)" fg:x="24884" fg:w="4"/><text x="89.0136%" y="127.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8f5ce (12 samples, 0.04%)</title><rect x="88.8742%" y="37" width="0.0428%" height="15" fill="rgb(238,131,9)" fg:x="24915" fg:w="12"/><text x="89.1242%" y="47.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d3c42b (22 samples, 0.08%)</title><rect x="88.8421%" y="53" width="0.0785%" height="15" fill="rgb(211,50,8)" fg:x="24906" fg:w="22"/><text x="89.0921%" y="63.50"></text></g><g><title>libBLAS.dylib`DGEMV (38 samples, 0.14%)</title><rect x="88.8100%" y="101" width="0.1355%" height="15" fill="rgb(245,182,24)" fg:x="24897" fg:w="38"/><text x="89.0600%" y="111.50"></text></g><g><title>libBLAS.dylib`cblas_dgemv (35 samples, 0.12%)</title><rect x="88.8207%" y="85" width="0.1248%" height="15" fill="rgb(242,14,37)" fg:x="24900" fg:w="35"/><text x="89.0707%" y="95.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d3c644 (33 samples, 0.12%)</title><rect x="88.8279%" y="69" width="0.1177%" height="15" fill="rgb(246,228,12)" fg:x="24902" fg:w="33"/><text x="89.0779%" y="79.50"></text></g><g><title>libBLAS.dylib`0x00007fff20c61310 (5 samples, 0.02%)</title><rect x="88.9634%" y="69" width="0.0178%" height="15" fill="rgb(213,55,15)" fg:x="24940" fg:w="5"/><text x="89.2134%" y="79.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8c7d0 (4 samples, 0.01%)</title><rect x="89.0062%" y="53" width="0.0143%" height="15" fill="rgb(209,9,3)" fg:x="24952" fg:w="4"/><text x="89.2562%" y="63.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8c818 (4 samples, 0.01%)</title><rect x="89.0062%" y="37" width="0.0143%" height="15" fill="rgb(230,59,30)" fg:x="24952" fg:w="4"/><text x="89.2562%" y="47.50"></text></g><g><title>libBLAS.dylib`0x00007fff20c6166d (13 samples, 0.05%)</title><rect x="88.9812%" y="69" width="0.0464%" height="15" fill="rgb(209,121,21)" fg:x="24945" fg:w="13"/><text x="89.2312%" y="79.50"></text></g><g><title>libBLAS.dylib`DGER (24 samples, 0.09%)</title><rect x="88.9456%" y="101" width="0.0856%" height="15" fill="rgb(220,109,13)" fg:x="24935" fg:w="24"/><text x="89.1956%" y="111.50"></text></g><g><title>libBLAS.dylib`cblas_dger (21 samples, 0.07%)</title><rect x="88.9563%" y="85" width="0.0749%" height="15" fill="rgb(232,18,1)" fg:x="24938" fg:w="21"/><text x="89.2063%" y="95.50"></text></g><g><title>libLAPACK.dylib`DLARF (73 samples, 0.26%)</title><rect x="88.7779%" y="117" width="0.2604%" height="15" fill="rgb(215,41,42)" fg:x="24888" fg:w="73"/><text x="89.0279%" y="127.50"></text></g><g><title>libLAPACK.dylib`DORG2R (93 samples, 0.33%)</title><rect x="88.7137%" y="133" width="0.3317%" height="15" fill="rgb(224,123,36)" fg:x="24870" fg:w="93"/><text x="88.9637%" y="143.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b5d07 (4 samples, 0.01%)</title><rect x="89.0526%" y="117" width="0.0143%" height="15" fill="rgb(240,125,3)" fg:x="24965" fg:w="4"/><text x="89.3026%" y="127.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b6b94 (3 samples, 0.01%)</title><rect x="89.0561%" y="101" width="0.0107%" height="15" fill="rgb(205,98,50)" fg:x="24966" fg:w="3"/><text x="89.3061%" y="111.50"></text></g><g><title>libLAPACK.dylib`DORGQR (103 samples, 0.37%)</title><rect x="88.7030%" y="149" width="0.3674%" height="15" fill="rgb(205,185,37)" fg:x="24867" fg:w="103"/><text x="88.9530%" y="159.50"></text></g><g><title>libLAPACK.dylib`ILAENV (7 samples, 0.02%)</title><rect x="89.0454%" y="133" width="0.0250%" height="15" fill="rgb(238,207,15)" fg:x="24963" fg:w="7"/><text x="89.2954%" y="143.50"></text></g><g><title>libLAPACK.dylib`ILAENV (3 samples, 0.01%)</title><rect x="89.0704%" y="149" width="0.0107%" height="15" fill="rgb(213,199,42)" fg:x="24970" fg:w="3"/><text x="89.3204%" y="159.50"></text></g><g><title>libLAPACK.dylib`DORGHR (121 samples, 0.43%)</title><rect x="88.6602%" y="165" width="0.4316%" height="15" fill="rgb(235,201,11)" fg:x="24855" fg:w="121"/><text x="88.9102%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="89.0811%" y="149" width="0.0107%" height="15" fill="rgb(207,46,11)" fg:x="24973" fg:w="3"/><text x="89.3311%" y="159.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8898d (3 samples, 0.01%)</title><rect x="89.3201%" y="149" width="0.0107%" height="15" fill="rgb(241,35,35)" fg:x="25040" fg:w="3"/><text x="89.5701%" y="159.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8898d (12 samples, 0.04%)</title><rect x="89.3379%" y="133" width="0.0428%" height="15" fill="rgb(243,32,47)" fg:x="25045" fg:w="12"/><text x="89.5879%" y="143.50"></text></g><g><title>libBLAS.dylib`getHardwareInfo (4 samples, 0.01%)</title><rect x="89.3665%" y="117" width="0.0143%" height="15" fill="rgb(247,202,23)" fg:x="25053" fg:w="4"/><text x="89.6165%" y="127.50"></text></g><g><title>libBLAS.dylib`0x00007fff20e2a26d (6 samples, 0.02%)</title><rect x="89.3808%" y="133" width="0.0214%" height="15" fill="rgb(219,102,11)" fg:x="25057" fg:w="6"/><text x="89.6308%" y="143.50"></text></g><g><title>libBLAS.dylib`cblas_daxpy (3 samples, 0.01%)</title><rect x="89.4022%" y="133" width="0.0107%" height="15" fill="rgb(243,110,44)" fg:x="25063" fg:w="3"/><text x="89.6522%" y="143.50"></text></g><g><title>libBLAS.dylib`DAXPY (23 samples, 0.08%)</title><rect x="89.3344%" y="149" width="0.0820%" height="15" fill="rgb(222,74,54)" fg:x="25044" fg:w="23"/><text x="89.5844%" y="159.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8d23b (18 samples, 0.06%)</title><rect x="89.4878%" y="101" width="0.0642%" height="15" fill="rgb(216,99,12)" fg:x="25087" fg:w="18"/><text x="89.7378%" y="111.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d3c644 (27 samples, 0.10%)</title><rect x="89.4664%" y="117" width="0.0963%" height="15" fill="rgb(226,22,26)" fg:x="25081" fg:w="27"/><text x="89.7164%" y="127.50"></text></g><g><title>libBLAS.dylib`DGEMV (42 samples, 0.15%)</title><rect x="89.4164%" y="149" width="0.1498%" height="15" fill="rgb(217,163,10)" fg:x="25067" fg:w="42"/><text x="89.6664%" y="159.50"></text></g><g><title>libBLAS.dylib`cblas_dgemv (36 samples, 0.13%)</title><rect x="89.4378%" y="133" width="0.1284%" height="15" fill="rgb(213,25,53)" fg:x="25073" fg:w="36"/><text x="89.6878%" y="143.50"></text></g><g><title>libBLAS.dylib`0x00007fff20d8898d (4 samples, 0.01%)</title><rect x="89.5662%" y="133" width="0.0143%" height="15" fill="rgb(252,105,26)" fg:x="25109" fg:w="4"/><text x="89.8162%" y="143.50"></text></g><g><title>libBLAS.dylib`DSCAL (10 samples, 0.04%)</title><rect x="89.5662%" y="149" width="0.0357%" height="15" fill="rgb(220,39,43)" fg:x="25109" fg:w="10"/><text x="89.8162%" y="159.50"></text></g><g><title>libBLAS.dylib`0x00007fff20e2a26d (6 samples, 0.02%)</title><rect x="89.5805%" y="133" width="0.0214%" height="15" fill="rgb(229,68,48)" fg:x="25113" fg:w="6"/><text x="89.8305%" y="143.50"></text></g><g><title>libBLAS.dylib`IDAMAX (11 samples, 0.04%)</title><rect x="89.6019%" y="149" width="0.0392%" height="15" fill="rgb(252,8,32)" fg:x="25119" fg:w="11"/><text x="89.8519%" y="159.50"></text></g><g><title>libBLAS.dylib`cblas_idamax (8 samples, 0.03%)</title><rect x="89.6126%" y="133" width="0.0285%" height="15" fill="rgb(223,20,43)" fg:x="25122" fg:w="8"/><text x="89.8626%" y="143.50"></text></g><g><title>libLAPACK.dylib`DLALN2 (39 samples, 0.14%)</title><rect x="89.6483%" y="149" width="0.1391%" height="15" fill="rgb(229,81,49)" fg:x="25132" fg:w="39"/><text x="89.8983%" y="159.50"></text></g><g><title>libLAPACK.dylib`DTREVC (197 samples, 0.70%)</title><rect x="89.0954%" y="165" width="0.7027%" height="15" fill="rgb(236,28,36)" fg:x="24977" fg:w="197"/><text x="89.3454%" y="175.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b6b94 (12 samples, 0.04%)</title><rect x="89.8445%" y="133" width="0.0428%" height="15" fill="rgb(249,185,26)" fg:x="25187" fg:w="12"/><text x="90.0945%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.04%)</title><rect x="89.8516%" y="117" width="0.0357%" height="15" fill="rgb(249,174,33)" fg:x="25189" fg:w="10"/><text x="90.1016%" y="127.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b6be0 (4 samples, 0.01%)</title><rect x="89.8873%" y="133" width="0.0143%" height="15" fill="rgb(233,201,37)" fg:x="25199" fg:w="4"/><text x="90.1373%" y="143.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b5d07 (27 samples, 0.10%)</title><rect x="89.8159%" y="149" width="0.0963%" height="15" fill="rgb(221,78,26)" fg:x="25179" fg:w="27"/><text x="90.0659%" y="159.50"></text></g><g><title>libLAPACK.dylib`ILAENV (36 samples, 0.13%)</title><rect x="89.8052%" y="165" width="0.1284%" height="15" fill="rgb(250,127,30)" fg:x="25176" fg:w="36"/><text x="90.0552%" y="175.50"></text></g><g><title>libLAPACK.dylib`0x00007fff2a8b6be0 (6 samples, 0.02%)</title><rect x="89.9122%" y="149" width="0.0214%" height="15" fill="rgb(230,49,44)" fg:x="25206" fg:w="6"/><text x="90.1622%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a572730 (3 samples, 0.01%)</title><rect x="89.9337%" y="165" width="0.0107%" height="15" fill="rgb(229,67,23)" fg:x="25212" fg:w="3"/><text x="90.1837%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (4 samples, 0.01%)</title><rect x="89.9444%" y="165" width="0.0143%" height="15" fill="rgb(249,83,47)" fg:x="25215" fg:w="4"/><text x="90.1944%" y="175.50"></text></g><g><title>libLAPACK.dylib`DGEEV (1,580 samples, 5.64%)</title><rect x="84.3476%" y="181" width="5.6360%" height="15" fill="rgb(215,43,3)" fg:x="23646" fg:w="1580"/><text x="84.5976%" y="191.50">libLAPA..</text></g><g><title>libsystem_pthread.dylib`___chkstk_darwin (6 samples, 0.02%)</title><rect x="89.9622%" y="165" width="0.0214%" height="15" fill="rgb(238,154,13)" fg:x="25220" fg:w="6"/><text x="90.2122%" y="175.50"></text></g><g><title>libLAPACK.dylib`DTREVC (4 samples, 0.01%)</title><rect x="89.9943%" y="181" width="0.0143%" height="15" fill="rgb(219,56,2)" fg:x="25229" fg:w="4"/><text x="90.2443%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.01%)</title><rect x="90.1013%" y="133" width="0.0143%" height="15" fill="rgb(233,0,4)" fg:x="25259" fg:w="4"/><text x="90.3513%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (44 samples, 0.16%)</title><rect x="90.0157%" y="181" width="0.1570%" height="15" fill="rgb(235,30,7)" fg:x="25235" fg:w="44"/><text x="90.2657%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 0.14%)</title><rect x="90.0371%" y="165" width="0.1355%" height="15" fill="rgb(250,79,13)" fg:x="25241" fg:w="38"/><text x="90.2871%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (35 samples, 0.12%)</title><rect x="90.0478%" y="149" width="0.1248%" height="15" fill="rgb(211,146,34)" fg:x="25244" fg:w="35"/><text x="90.2978%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (16 samples, 0.06%)</title><rect x="90.1156%" y="133" width="0.0571%" height="15" fill="rgb(228,22,38)" fg:x="25263" fg:w="16"/><text x="90.3656%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.02%)</title><rect x="90.1548%" y="117" width="0.0178%" height="15" fill="rgb(235,168,5)" fg:x="25274" fg:w="5"/><text x="90.4048%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="90.1726%" y="181" width="0.0107%" height="15" fill="rgb(221,155,16)" fg:x="25279" fg:w="3"/><text x="90.4226%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.05%)</title><rect x="90.1833%" y="181" width="0.0535%" height="15" fill="rgb(215,215,53)" fg:x="25282" fg:w="15"/><text x="90.4333%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (10 samples, 0.04%)</title><rect x="90.2012%" y="165" width="0.0357%" height="15" fill="rgb(223,4,10)" fg:x="25287" fg:w="10"/><text x="90.4512%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (8 samples, 0.03%)</title><rect x="90.2083%" y="149" width="0.0285%" height="15" fill="rgb(234,103,6)" fg:x="25289" fg:w="8"/><text x="90.4583%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.02%)</title><rect x="90.3510%" y="149" width="0.0250%" height="15" fill="rgb(227,97,0)" fg:x="25329" fg:w="7"/><text x="90.6010%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (45 samples, 0.16%)</title><rect x="90.2369%" y="181" width="0.1605%" height="15" fill="rgb(234,150,53)" fg:x="25297" fg:w="45"/><text x="90.4869%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (32 samples, 0.11%)</title><rect x="90.2832%" y="165" width="0.1141%" height="15" fill="rgb(228,201,54)" fg:x="25310" fg:w="32"/><text x="90.5332%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.02%)</title><rect x="90.3760%" y="149" width="0.0214%" height="15" fill="rgb(222,22,37)" fg:x="25336" fg:w="6"/><text x="90.6260%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="90.3974%" y="181" width="0.0107%" height="15" fill="rgb(237,53,32)" fg:x="25342" fg:w="3"/><text x="90.6474%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (5 samples, 0.02%)</title><rect x="90.4081%" y="181" width="0.0178%" height="15" fill="rgb(233,25,53)" fg:x="25345" fg:w="5"/><text x="90.6581%" y="191.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_vec (3 samples, 0.01%)</title><rect x="90.4402%" y="181" width="0.0107%" height="15" fill="rgb(210,40,34)" fg:x="25354" fg:w="3"/><text x="90.6902%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.03%)</title><rect x="90.5436%" y="133" width="0.0285%" height="15" fill="rgb(241,220,44)" fg:x="25383" fg:w="8"/><text x="90.7936%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.03%)</title><rect x="90.5436%" y="117" width="0.0285%" height="15" fill="rgb(235,28,35)" fg:x="25383" fg:w="8"/><text x="90.7936%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="90.5615%" y="101" width="0.0107%" height="15" fill="rgb(210,56,17)" fg:x="25388" fg:w="3"/><text x="90.8115%" y="111.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::as_standard_layout (36 samples, 0.13%)</title><rect x="90.4509%" y="181" width="0.1284%" height="15" fill="rgb(224,130,29)" fg:x="25357" fg:w="36"/><text x="90.7009%" y="191.50"></text></g><g><title>multiple_broadened_spectra`ndarray::iterators::to_vec_mapped (34 samples, 0.12%)</title><rect x="90.4580%" y="165" width="0.1213%" height="15" fill="rgb(235,212,8)" fg:x="25359" fg:w="34"/><text x="90.7080%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.05%)</title><rect x="90.5258%" y="149" width="0.0535%" height="15" fill="rgb(223,33,50)" fg:x="25378" fg:w="15"/><text x="90.7758%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.01%)</title><rect x="90.6542%" y="117" width="0.0107%" height="15" fill="rgb(219,149,13)" fg:x="25414" fg:w="3"/><text x="90.9042%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18 samples, 0.06%)</title><rect x="90.6185%" y="165" width="0.0642%" height="15" fill="rgb(250,156,29)" fg:x="25404" fg:w="18"/><text x="90.8685%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.06%)</title><rect x="90.6221%" y="149" width="0.0606%" height="15" fill="rgb(216,193,19)" fg:x="25405" fg:w="17"/><text x="90.8721%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.05%)</title><rect x="90.6292%" y="133" width="0.0535%" height="15" fill="rgb(216,135,14)" fg:x="25407" fg:w="15"/><text x="90.8792%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.02%)</title><rect x="90.6649%" y="117" width="0.0178%" height="15" fill="rgb(241,47,5)" fg:x="25417" fg:w="5"/><text x="90.9149%" y="127.50"></text></g><g><title>multiple_broadened_spectra`ham2spec::diagonalize (1,806 samples, 6.44%)</title><rect x="84.2941%" y="197" width="6.4422%" height="15" fill="rgb(233,42,35)" fg:x="23631" fg:w="1806"/><text x="84.5441%" y="207.50">multiple..</text></g><g><title>multiple_broadened_spectra`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::to_owned (44 samples, 0.16%)</title><rect x="90.5793%" y="181" width="0.1570%" height="15" fill="rgb(231,13,6)" fg:x="25393" fg:w="44"/><text x="90.8293%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (14 samples, 0.05%)</title><rect x="90.6863%" y="165" width="0.0499%" height="15" fill="rgb(207,181,40)" fg:x="25423" fg:w="14"/><text x="90.9363%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`calloc (3 samples, 0.01%)</title><rect x="90.7684%" y="181" width="0.0107%" height="15" fill="rgb(254,173,49)" fg:x="25446" fg:w="3"/><text x="91.0184%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.05%)</title><rect x="90.7791%" y="181" width="0.0499%" height="15" fill="rgb(221,1,38)" fg:x="25449" fg:w="14"/><text x="91.0291%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.02%)</title><rect x="90.8076%" y="165" width="0.0214%" height="15" fill="rgb(206,124,46)" fg:x="25457" fg:w="6"/><text x="91.0576%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.02%)</title><rect x="90.8076%" y="149" width="0.0214%" height="15" fill="rgb(249,21,11)" fg:x="25457" fg:w="6"/><text x="91.0576%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.03%)</title><rect x="90.9039%" y="149" width="0.0321%" height="15" fill="rgb(222,201,40)" fg:x="25484" fg:w="9"/><text x="91.1539%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (36 samples, 0.13%)</title><rect x="90.8290%" y="181" width="0.1284%" height="15" fill="rgb(235,61,29)" fg:x="25463" fg:w="36"/><text x="91.0790%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (26 samples, 0.09%)</title><rect x="90.8647%" y="165" width="0.0927%" height="15" fill="rgb(219,207,3)" fg:x="25473" fg:w="26"/><text x="91.1147%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.02%)</title><rect x="90.9360%" y="149" width="0.0214%" height="15" fill="rgb(222,56,46)" fg:x="25493" fg:w="6"/><text x="91.1860%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (6 samples, 0.02%)</title><rect x="90.9824%" y="149" width="0.0214%" height="15" fill="rgb(239,76,54)" fg:x="25506" fg:w="6"/><text x="91.2324%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.01%)</title><rect x="91.0858%" y="117" width="0.0143%" height="15" fill="rgb(231,124,27)" fg:x="25535" fg:w="4"/><text x="91.3358%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (27 samples, 0.10%)</title><rect x="91.0073%" y="133" width="0.0963%" height="15" fill="rgb(249,195,6)" fg:x="25513" fg:w="27"/><text x="91.2573%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (37 samples, 0.13%)</title><rect x="90.9752%" y="165" width="0.1320%" height="15" fill="rgb(237,174,47)" fg:x="25504" fg:w="37"/><text x="91.2252%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (29 samples, 0.10%)</title><rect x="91.0038%" y="149" width="0.1034%" height="15" fill="rgb(206,201,31)" fg:x="25512" fg:w="29"/><text x="91.2538%" y="159.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (45 samples, 0.16%)</title><rect x="90.9610%" y="181" width="0.1605%" height="15" fill="rgb(231,57,52)" fg:x="25500" fg:w="45"/><text x="91.2110%" y="191.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign (10 samples, 0.04%)</title><rect x="91.1215%" y="181" width="0.0357%" height="15" fill="rgb(248,177,22)" fg:x="25545" fg:w="10"/><text x="91.3715%" y="191.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Add&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (3 samples, 0.01%)</title><rect x="91.1572%" y="181" width="0.0107%" height="15" fill="rgb(215,211,37)" fg:x="25555" fg:w="3"/><text x="91.4072%" y="191.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;B&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (4 samples, 0.01%)</title><rect x="91.1679%" y="181" width="0.0143%" height="15" fill="rgb(241,128,51)" fg:x="25558" fg:w="4"/><text x="91.4179%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="91.3034%" y="165" width="0.0178%" height="15" fill="rgb(227,165,31)" fg:x="25596" fg:w="5"/><text x="91.5534%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.01%)</title><rect x="91.3213%" y="165" width="0.0143%" height="15" fill="rgb(228,167,24)" fg:x="25601" fg:w="4"/><text x="91.5713%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (11 samples, 0.04%)</title><rect x="91.3427%" y="165" width="0.0392%" height="15" fill="rgb(228,143,12)" fg:x="25607" fg:w="11"/><text x="91.5927%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (7 samples, 0.02%)</title><rect x="91.3819%" y="165" width="0.0250%" height="15" fill="rgb(249,149,8)" fg:x="25618" fg:w="7"/><text x="91.6319%" y="175.50"></text></g><g><title>multiple_broadened_spectra`__rdl_dealloc (3 samples, 0.01%)</title><rect x="91.4211%" y="165" width="0.0107%" height="15" fill="rgb(243,35,44)" fg:x="25629" fg:w="3"/><text x="91.6711%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (40 samples, 0.14%)</title><rect x="91.8206%" y="133" width="0.1427%" height="15" fill="rgb(246,89,9)" fg:x="25741" fg:w="40"/><text x="92.0706%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (35 samples, 0.12%)</title><rect x="91.8385%" y="117" width="0.1248%" height="15" fill="rgb(233,213,13)" fg:x="25746" fg:w="35"/><text x="92.0885%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (76 samples, 0.27%)</title><rect x="91.6994%" y="149" width="0.2711%" height="15" fill="rgb(233,141,41)" fg:x="25707" fg:w="76"/><text x="91.9494%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (97 samples, 0.35%)</title><rect x="91.9705%" y="149" width="0.3460%" height="15" fill="rgb(239,167,4)" fg:x="25783" fg:w="97"/><text x="92.2205%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.02%)</title><rect x="92.2951%" y="133" width="0.0214%" height="15" fill="rgb(209,217,16)" fg:x="25874" fg:w="6"/><text x="92.5451%" y="143.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Add&lt;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add (247 samples, 0.88%)</title><rect x="91.4425%" y="165" width="0.8811%" height="15" fill="rgb(219,88,35)" fg:x="25635" fg:w="247"/><text x="91.6925%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.01%)</title><rect x="93.3688%" y="101" width="0.0143%" height="15" fill="rgb(220,193,23)" fg:x="26175" fg:w="4"/><text x="93.6188%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (232 samples, 0.83%)</title><rect x="92.6339%" y="133" width="0.8276%" height="15" fill="rgb(230,90,52)" fg:x="25969" fg:w="232"/><text x="92.8839%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (208 samples, 0.74%)</title><rect x="92.7196%" y="117" width="0.7420%" height="15" fill="rgb(252,106,19)" fg:x="25993" fg:w="208"/><text x="92.9696%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.08%)</title><rect x="93.3830%" y="101" width="0.0785%" height="15" fill="rgb(206,74,20)" fg:x="26179" fg:w="22"/><text x="93.6330%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (14 samples, 0.05%)</title><rect x="93.4116%" y="85" width="0.0499%" height="15" fill="rgb(230,138,44)" fg:x="26187" fg:w="14"/><text x="93.6616%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (265 samples, 0.95%)</title><rect x="92.5234%" y="149" width="0.9453%" height="15" fill="rgb(235,182,43)" fg:x="25938" fg:w="265"/><text x="92.7734%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (6 samples, 0.02%)</title><rect x="93.4686%" y="149" width="0.0214%" height="15" fill="rgb(242,16,51)" fg:x="26203" fg:w="6"/><text x="93.7186%" y="159.50"></text></g><g><title>multiple_broadened_spectra`ham2spec::exciton_dipole_moments (775 samples, 2.76%)</title><rect x="90.7362%" y="197" width="2.7645%" height="15" fill="rgb(248,9,4)" fg:x="25437" fg:w="775"/><text x="90.9862%" y="207.50">mu..</text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2),D&gt;::fold (650 samples, 2.32%)</title><rect x="91.1821%" y="181" width="2.3186%" height="15" fill="rgb(210,31,22)" fg:x="25562" fg:w="650"/><text x="91.4321%" y="191.50">m..</text></g><g><title>multiple_broadened_spectra`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Mul&lt;B&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::mul (330 samples, 1.18%)</title><rect x="92.3236%" y="165" width="1.1771%" height="15" fill="rgb(239,54,39)" fg:x="25882" fg:w="330"/><text x="92.5736%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="93.4900%" y="149" width="0.0107%" height="15" fill="rgb(230,99,41)" fg:x="26209" fg:w="3"/><text x="93.7400%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (4 samples, 0.01%)</title><rect x="93.6969%" y="181" width="0.0143%" height="15" fill="rgb(253,106,12)" fg:x="26267" fg:w="4"/><text x="93.9469%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="93.7790%" y="149" width="0.0107%" height="15" fill="rgb(213,46,41)" fg:x="26290" fg:w="3"/><text x="94.0290%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.07%)</title><rect x="93.7183%" y="181" width="0.0749%" height="15" fill="rgb(215,133,35)" fg:x="26273" fg:w="21"/><text x="93.9683%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.03%)</title><rect x="93.7647%" y="165" width="0.0285%" height="15" fill="rgb(213,28,5)" fg:x="26286" fg:w="8"/><text x="94.0147%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (6 samples, 0.02%)</title><rect x="93.7933%" y="181" width="0.0214%" height="15" fill="rgb(215,77,49)" fg:x="26294" fg:w="6"/><text x="94.0433%" y="191.50"></text></g><g><title>multiple_broadened_spectra`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 0.05%)</title><rect x="93.8147%" y="181" width="0.0499%" height="15" fill="rgb(248,100,22)" fg:x="26300" fg:w="14"/><text x="94.0647%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="93.8468%" y="165" width="0.0178%" height="15" fill="rgb(208,67,9)" fg:x="26309" fg:w="5"/><text x="94.0968%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="93.8468%" y="149" width="0.0178%" height="15" fill="rgb(219,133,21)" fg:x="26309" fg:w="5"/><text x="94.0968%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="93.8468%" y="133" width="0.0178%" height="15" fill="rgb(246,46,29)" fg:x="26309" fg:w="5"/><text x="94.0968%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="93.8539%" y="117" width="0.0107%" height="15" fill="rgb(246,185,52)" fg:x="26311" fg:w="3"/><text x="94.1039%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (53 samples, 0.19%)</title><rect x="94.1500%" y="149" width="0.1891%" height="15" fill="rgb(252,136,11)" fg:x="26394" fg:w="53"/><text x="94.4000%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (47 samples, 0.17%)</title><rect x="94.1714%" y="133" width="0.1677%" height="15" fill="rgb(219,138,53)" fg:x="26400" fg:w="47"/><text x="94.4214%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (87 samples, 0.31%)</title><rect x="94.0358%" y="165" width="0.3103%" height="15" fill="rgb(211,51,23)" fg:x="26362" fg:w="87"/><text x="94.2858%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.10%)</title><rect x="94.8527%" y="133" width="0.0963%" height="15" fill="rgb(247,221,28)" fg:x="26591" fg:w="27"/><text x="95.1027%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (190 samples, 0.68%)</title><rect x="94.3462%" y="165" width="0.6777%" height="15" fill="rgb(251,222,45)" fg:x="26449" fg:w="190"/><text x="94.5962%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (96 samples, 0.34%)</title><rect x="94.6815%" y="149" width="0.3424%" height="15" fill="rgb(217,162,53)" fg:x="26543" fg:w="96"/><text x="94.9315%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (21 samples, 0.07%)</title><rect x="94.9490%" y="133" width="0.0749%" height="15" fill="rgb(229,93,14)" fg:x="26618" fg:w="21"/><text x="95.1990%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3 samples, 0.01%)</title><rect x="95.0275%" y="165" width="0.0107%" height="15" fill="rgb(209,67,49)" fg:x="26640" fg:w="3"/><text x="95.2775%" y="175.50"></text></g><g><title>multiple_broadened_spectra`__rdl_alloc (3 samples, 0.01%)</title><rect x="95.0524%" y="165" width="0.0107%" height="15" fill="rgb(213,87,29)" fg:x="26647" fg:w="3"/><text x="95.3024%" y="175.50"></text></g><g><title>multiple_broadened_spectra`core::iter::adapters::zip::Zip&lt;A,B&gt;::new (3 samples, 0.01%)</title><rect x="95.0631%" y="165" width="0.0107%" height="15" fill="rgb(205,151,52)" fg:x="26650" fg:w="3"/><text x="95.3131%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (19 samples, 0.07%)</title><rect x="95.4769%" y="101" width="0.0678%" height="15" fill="rgb(253,215,39)" fg:x="26766" fg:w="19"/><text x="95.7269%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (152 samples, 0.54%)</title><rect x="95.1737%" y="149" width="0.5422%" height="15" fill="rgb(221,220,41)" fg:x="26681" fg:w="152"/><text x="95.4237%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (142 samples, 0.51%)</title><rect x="95.2094%" y="133" width="0.5065%" height="15" fill="rgb(218,133,21)" fg:x="26691" fg:w="142"/><text x="95.4594%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (137 samples, 0.49%)</title><rect x="95.2272%" y="117" width="0.4887%" height="15" fill="rgb(221,193,43)" fg:x="26696" fg:w="137"/><text x="95.4772%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (46 samples, 0.16%)</title><rect x="95.5518%" y="101" width="0.1641%" height="15" fill="rgb(240,128,52)" fg:x="26787" fg:w="46"/><text x="95.8018%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (21 samples, 0.07%)</title><rect x="95.6410%" y="85" width="0.0749%" height="15" fill="rgb(253,114,12)" fg:x="26812" fg:w="21"/><text x="95.8910%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (4 samples, 0.01%)</title><rect x="95.7159%" y="149" width="0.0143%" height="15" fill="rgb(215,223,47)" fg:x="26833" fg:w="4"/><text x="95.9659%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (3 samples, 0.01%)</title><rect x="95.7302%" y="149" width="0.0107%" height="15" fill="rgb(248,225,23)" fg:x="26837" fg:w="3"/><text x="95.9802%" y="159.50"></text></g><g><title>multiple_broadened_spectra`ndarray::free_functions::arr1 (189 samples, 0.67%)</title><rect x="95.0738%" y="165" width="0.6742%" height="15" fill="rgb(250,108,0)" fg:x="26653" fg:w="189"/><text x="95.3238%" y="175.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (5 samples, 0.02%)</title><rect x="95.7480%" y="165" width="0.0178%" height="15" fill="rgb(228,208,7)" fg:x="26842" fg:w="5"/><text x="95.9980%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.02%)</title><rect x="95.7480%" y="149" width="0.0178%" height="15" fill="rgb(244,45,10)" fg:x="26842" fg:w="5"/><text x="95.9980%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="95.7480%" y="133" width="0.0178%" height="15" fill="rgb(207,125,25)" fg:x="26842" fg:w="5"/><text x="95.9980%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="95.7480%" y="117" width="0.0178%" height="15" fill="rgb(210,195,18)" fg:x="26842" fg:w="5"/><text x="95.9980%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (75 samples, 0.27%)</title><rect x="95.9692%" y="117" width="0.2675%" height="15" fill="rgb(249,80,12)" fg:x="26904" fg:w="75"/><text x="96.2192%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (67 samples, 0.24%)</title><rect x="95.9977%" y="101" width="0.2390%" height="15" fill="rgb(221,65,9)" fg:x="26912" fg:w="67"/><text x="96.2477%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (83 samples, 0.30%)</title><rect x="95.9442%" y="133" width="0.2961%" height="15" fill="rgb(235,49,36)" fg:x="26897" fg:w="83"/><text x="96.1942%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (3 samples, 0.01%)</title><rect x="96.2403%" y="133" width="0.0107%" height="15" fill="rgb(225,32,20)" fg:x="26980" fg:w="3"/><text x="96.4903%" y="143.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::build_uninit (140 samples, 0.50%)</title><rect x="95.8479%" y="149" width="0.4994%" height="15" fill="rgb(215,141,46)" fg:x="26870" fg:w="140"/><text x="96.0979%" y="159.50"></text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2,PLast),D&gt;::collect_with_partial (26 samples, 0.09%)</title><rect x="96.2545%" y="133" width="0.0927%" height="15" fill="rgb(250,160,47)" fg:x="26984" fg:w="26"/><text x="96.5045%" y="143.50"></text></g><g><title>multiple_broadened_spectra`ham2spec::populate_r_mu_cross_cache (694 samples, 2.48%)</title><rect x="93.8753%" y="181" width="2.4756%" height="15" fill="rgb(216,222,40)" fg:x="26317" fg:w="694"/><text x="94.1253%" y="191.50">mu..</text></g><g><title>multiple_broadened_spectra`ndarray::impl_ops::arithmetic_ops::_&lt;impl core::ops::arith::Sub&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for &amp;ndarray::ArrayBase&lt;S,D&gt;&gt;::sub (164 samples, 0.59%)</title><rect x="95.7659%" y="165" width="0.5850%" height="15" fill="rgb(234,217,39)" fg:x="26847" fg:w="164"/><text x="96.0159%" y="175.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (8 samples, 0.03%)</title><rect x="96.3509%" y="181" width="0.0285%" height="15" fill="rgb(207,178,40)" fg:x="27011" fg:w="8"/><text x="96.6009%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (8 samples, 0.03%)</title><rect x="96.3509%" y="165" width="0.0285%" height="15" fill="rgb(221,136,13)" fg:x="27011" fg:w="8"/><text x="96.6009%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.02%)</title><rect x="96.3544%" y="149" width="0.0250%" height="15" fill="rgb(249,199,10)" fg:x="27012" fg:w="7"/><text x="96.6044%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.02%)</title><rect x="96.3544%" y="133" width="0.0250%" height="15" fill="rgb(249,222,13)" fg:x="27012" fg:w="7"/><text x="96.6044%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.02%)</title><rect x="96.3580%" y="117" width="0.0214%" height="15" fill="rgb(244,185,38)" fg:x="27013" fg:w="6"/><text x="96.6080%" y="127.50"></text></g><g><title>multiple_broadened_spectra`ham2spec::stick_cd_single (808 samples, 2.88%)</title><rect x="93.5007%" y="197" width="2.8822%" height="15" fill="rgb(236,202,9)" fg:x="26212" fg:w="808"/><text x="93.7507%" y="207.50">mu..</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.01%)</title><rect x="96.4008%" y="133" width="0.0107%" height="15" fill="rgb(250,229,37)" fg:x="27025" fg:w="3"/><text x="96.6508%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (9 samples, 0.03%)</title><rect x="96.3865%" y="181" width="0.0321%" height="15" fill="rgb(206,174,23)" fg:x="27021" fg:w="9"/><text x="96.6365%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.03%)</title><rect x="96.3865%" y="165" width="0.0321%" height="15" fill="rgb(211,33,43)" fg:x="27021" fg:w="9"/><text x="96.6365%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.03%)</title><rect x="96.3901%" y="149" width="0.0285%" height="15" fill="rgb(245,58,50)" fg:x="27022" fg:w="8"/><text x="96.6401%" y="159.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (11 samples, 0.04%)</title><rect x="96.3830%" y="197" width="0.0392%" height="15" fill="rgb(244,68,36)" fg:x="27020" fg:w="11"/><text x="96.6330%" y="207.50"></text></g><g><title>multiple_broadened_spectra`ham2spec::compute_stick_spectrum (3,437 samples, 12.26%)</title><rect x="84.1871%" y="213" width="12.2601%" height="15" fill="rgb(232,229,15)" fg:x="23601" fg:w="3437"/><text x="84.4371%" y="223.50">multiple_broadened..</text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (4 samples, 0.01%)</title><rect x="96.4329%" y="197" width="0.0143%" height="15" fill="rgb(254,30,23)" fg:x="27034" fg:w="4"/><text x="96.6829%" y="207.50"></text></g><g><title>multiple_broadened_spectra`ndarray::numeric_util::unrolled_dot (3 samples, 0.01%)</title><rect x="96.4365%" y="181" width="0.0107%" height="15" fill="rgb(235,160,14)" fg:x="27035" fg:w="3"/><text x="96.6865%" y="191.50"></text></g><g><title>multiple_broadened_spectra`ndarray::impl_methods::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::assign (993 samples, 3.54%)</title><rect x="96.4543%" y="213" width="3.5421%" height="15" fill="rgb(212,155,44)" fg:x="27040" fg:w="993"/><text x="96.7043%" y="223.50">mult..</text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (991 samples, 3.53%)</title><rect x="96.4614%" y="197" width="3.5350%" height="15" fill="rgb(226,2,50)" fg:x="27042" fg:w="991"/><text x="96.7114%" y="207.50">mul..</text></g><g><title>all (28,034 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="28034"/><text x="0.2500%" y="399.50"></text></g><g><title>0x1 (28,034 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="28034"/><text x="0.2500%" y="383.50">0x1</text></g><g><title>libdyld.dylib`start (28,034 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="28034"/><text x="0.2500%" y="367.50">libdyld.dylib`start</text></g><g><title>multiple_broadened_spectra`main (28,030 samples, 99.99%)</title><rect x="0.0143%" y="341" width="99.9857%" height="15" fill="rgb(239,221,27)" fg:x="4" fg:w="28030"/><text x="0.2643%" y="351.50">multiple_broadened_spectra`main</text></g><g><title>multiple_broadened_spectra`std::rt::lang_start_internal (28,030 samples, 99.99%)</title><rect x="0.0143%" y="325" width="99.9857%" height="15" fill="rgb(222,198,25)" fg:x="4" fg:w="28030"/><text x="0.2643%" y="335.50">multiple_broadened_spectra`std::rt::lang_start_internal</text></g><g><title>multiple_broadened_spectra`std::rt::lang_start::_{{closure}} (28,030 samples, 99.99%)</title><rect x="0.0143%" y="309" width="99.9857%" height="15" fill="rgb(211,99,13)" fg:x="4" fg:w="28030"/><text x="0.2643%" y="319.50">multiple_broadened_spectra`std::rt::lang_start::_{{closure}}</text></g><g><title>multiple_broadened_spectra`std::sys_common::backtrace::__rust_begin_short_backtrace (28,030 samples, 99.99%)</title><rect x="0.0143%" y="293" width="99.9857%" height="15" fill="rgb(232,111,31)" fg:x="4" fg:w="28030"/><text x="0.2643%" y="303.50">multiple_broadened_spectra`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>multiple_broadened_spectra`multiple_broadened_spectra::main (28,030 samples, 99.99%)</title><rect x="0.0143%" y="277" width="99.9857%" height="15" fill="rgb(245,82,37)" fg:x="4" fg:w="28030"/><text x="0.2643%" y="287.50">multiple_broadened_spectra`multiple_broadened_spectra::main</text></g><g><title>multiple_broadened_spectra`ham2spec::compute_broadened_spectra (28,027 samples, 99.98%)</title><rect x="0.0250%" y="261" width="99.9750%" height="15" fill="rgb(227,149,46)" fg:x="7" fg:w="28027"/><text x="0.2750%" y="271.50">multiple_broadened_spectra`ham2spec::compute_broadened_spectra</text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2,P3,P4,P5),D&gt;::for_each (27,712 samples, 98.85%)</title><rect x="1.1486%" y="245" width="98.8514%" height="15" fill="rgb(218,36,50)" fg:x="322" fg:w="27712"/><text x="1.3986%" y="255.50">multiple_broadened_spectra`ndarray::zip::Zip&lt;(P1,P2,P3,P4,P5),D&gt;::for_each</text></g><g><title>multiple_broadened_spectra`ndarray::zip::Zip&lt;P,D&gt;::inner (27,706 samples, 98.83%)</title><rect x="1.1700%" y="229" width="98.8300%" height="15" fill="rgb(226,80,48)" fg:x="328" fg:w="27706"/><text x="1.4200%" y="239.50">multiple_broadened_spectra`ndarray::zip::Zip&lt;P,D&gt;::inner</text></g></svg></svg>