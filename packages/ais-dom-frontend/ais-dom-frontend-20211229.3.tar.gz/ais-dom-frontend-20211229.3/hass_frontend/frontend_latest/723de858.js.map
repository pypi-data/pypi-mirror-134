{"version":3,"file":"723de858.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAoEA;;AApEA;ACYA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiFA;;;;;ACnDA;AACA;;;;AAIA;;AAIA;;AAEA;AACA;;;;;;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AA/CA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/media-browser/ha-panel-media-browser.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { LocalStorage } from \"../../common/decorators/local-storage\";\nimport { HASSDomEvent } from \"../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/media-player/ha-media-player-browse\";\nimport {\n  BROWSER_PLAYER,\n  MediaPickedEvent,\n  SUPPORT_BROWSE_MEDIA,\n} from \"../../data/media-player\";\nimport \"../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { showWebBrowserPlayMediaDialog } from \"./show-media-player-dialog\";\nimport { showSelectMediaPlayerDialog } from \"./show-select-media-source-dialog\";\n\n@customElement(\"ha-panel-media-browser\")\nclass PanelMediaBrowser extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  // @ts-ignore\n  @LocalStorage(\"mediaBrowseEntityId\", true)\n  private _entityId = BROWSER_PLAYER;\n\n  protected render(): TemplateResult {\n    const stateObj = this._entityId\n      ? this.hass.states[this._entityId]\n      : undefined;\n\n    const title =\n      this._entityId === BROWSER_PLAYER\n        ? `${this.hass.localize(\"ui.components.media-browser.web-browser\")}`\n        : stateObj?.attributes.friendly_name\n        ? `${stateObj?.attributes.friendly_name}`\n        : undefined;\n\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title class=\"heading\">\n              <div>\n                ${this.hass.localize(\n                  \"ui.components.media-browser.media-player-browser\"\n                )}\n              </div>\n              <div class=\"secondary-text\">${title || \"\"}</div>\n            </div>\n            <mwc-button @click=${this._showSelectMediaPlayerDialog}>\n              ${this.hass.localize(\"ui.components.media-browser.choose_player\")}\n            </mwc-button>\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <ha-media-player-browse\n            .hass=${this.hass}\n            .entityId=${this._entityId}\n            @media-picked=${this._mediaPicked}\n          ></ha-media-player-browse>\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  private _showSelectMediaPlayerDialog(): void {\n    showSelectMediaPlayerDialog(this, {\n      mediaSources: this._mediaPlayerEntities,\n      sourceSelectedCallback: (entityId) => {\n        this._entityId = entityId;\n      },\n    });\n  }\n\n  private async _mediaPicked(\n    ev: HASSDomEvent<MediaPickedEvent>\n  ): Promise<void> {\n    const item = ev.detail.item;\n    if (this._entityId === BROWSER_PLAYER) {\n      const resolvedUrl: any = await this.hass.callWS({\n        type: \"media_source/resolve_media\",\n        media_content_id: item.media_content_id,\n      });\n\n      showWebBrowserPlayMediaDialog(this, {\n        sourceUrl: resolvedUrl.url,\n        sourceType: resolvedUrl.mime_type,\n        title: item.title,\n      });\n      return;\n    }\n\n    this.hass!.callService(\"media_player\", \"play_media\", {\n      entity_id: this._entityId,\n      media_content_id: item.media_content_id,\n      media_content_type: item.media_content_type,\n    });\n  }\n\n  private get _mediaPlayerEntities() {\n    return Object.values(this.hass!.states).filter((entity) => {\n      if (\n        computeStateDomain(entity) === \"media_player\" &&\n        supportsFeature(entity, SUPPORT_BROWSE_MEDIA)\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          --mdc-theme-primary: var(--app-header-text-color);\n        }\n        ha-media-player-browse {\n          height: calc(100vh - var(--header-height));\n        }\n        :host([narrow]) app-toolbar mwc-button {\n          width: 65px;\n        }\n        .heading {\n          overflow: hidden;\n          white-space: nowrap;\n          margin-top: 4px;\n        }\n        .heading .secondary-text {\n          font-size: 14px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-media-browser\": PanelMediaBrowser;\n  }\n}\n"],"names":[],"sourceRoot":""}