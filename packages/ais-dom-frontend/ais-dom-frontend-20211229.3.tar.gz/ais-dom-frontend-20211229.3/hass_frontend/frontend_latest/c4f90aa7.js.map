{"version":3,"file":"c4f90aa7.js","mappings":";;;;;;;;;;;;AA0GA;;;;;;;;;;;;;;ACrBA;ACvDA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;;;AAzBA;;;;;;;;;;;;;;;;;;;;;;ACqEA;AAKA;AACA;AACA;;;;AAIA;AAKA;;AAEA;AACA;;;;;;AAMA;;AAEA;;;;;AAKA;;AAEA;;;;;AAKA;;AAEA;;;;;AAKA;;AAEA;;;;;;;;AAQA;;;AAGA;;;;;AAKA;;;AAGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAnFA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-listbox/paper-listbox.js","webpack://home-assistant-frontend/./src/components/entity/ha-statistics-picker.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-statistics-graph-card-editor.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/**\nMaterial design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>\n\n@group Paper Elements\n@element paper-item\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: 'paper-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/default-theme.js';\n\nimport {IronMenuBehavior} from '@polymer/iron-menu-behavior/iron-menu-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Menus](https://www.google.com/design/spec/components/menus.html)\n\n`<paper-listbox>` implements an accessible listbox control with Material Design\nstyling. The focused item is highlighted, and the selected item has bolded text.\n\n    <paper-listbox>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nAn initial selection can be specified with the `selected` attribute.\n\n    <paper-listbox selected=\"0\">\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nMake a multi-select listbox with the `multi` attribute. Items in a multi-select\nlistbox can be deselected, and multiple item can be selected.\n\n    <paper-listbox multi>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-listbox-background-color`   | Menu background color |\n`--primary-background-color`\n`--paper-listbox-color`              | Menu foreground color |\n`--primary-text-color`\n`--paper-listbox`                    | Mixin applied to the listbox | `{}`\n\n### Accessibility\n\n`<paper-listbox>` has `role=\"listbox\"` by default. A multi-select listbox will\nalso have `aria-multiselectable` set. It implements key bindings to navigate\nthrough the listbox with the up and down arrow keys, esc to exit the listbox,\nand enter to activate a listbox item. Typing the first letter of a listbox item\nwill also focus it.\n\n@group Paper Elements\n@element paper-listbox\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n\n        background: var(--paper-listbox-background-color, var(--primary-background-color));\n        color: var(--paper-listbox-color, var(--primary-text-color));\n\n        @apply --paper-listbox;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-listbox',\n  behaviors: [IronMenuBehavior],\n\n  /** @private */\n  hostAttributes: {role: 'listbox'}\n});\n","import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"./ha-statistic-picker\";\n\n@customElement(\"ha-statistics-picker\")\nclass HaStatisticsPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Array }) public statisticIds?: string[];\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ attribute: \"picked-statistic-label\" })\n  public pickedStatisticLabel?: string;\n\n  @property({ attribute: \"pick-statistic-label\" })\n  public pickStatisticLabel?: string;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${this._currentStatistics.map(\n        (statisticId) => html`\n          <div>\n            <ha-statistic-picker\n              .curValue=${statisticId}\n              .hass=${this.hass}\n              .value=${statisticId}\n              .statisticTypes=${this.statisticTypes}\n              .statisticIds=${this.statisticIds}\n              .label=${this.pickedStatisticLabel}\n              @value-changed=${this._statisticChanged}\n            ></ha-statistic-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .statisticTypes=${this.statisticTypes}\n          .statisticIds=${this.statisticIds}\n          .label=${this.pickStatisticLabel}\n          @value-changed=${this._addStatistic}\n        ></ha-statistic-picker>\n      </div>\n    `;\n  }\n\n  private get _currentStatistics() {\n    return this.value || [];\n  }\n\n  private async _updateStatistics(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _statisticChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const oldValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === oldValue) {\n      return;\n    }\n    const currentStatistics = this._currentStatistics;\n    if (!newValue || currentStatistics.includes(newValue)) {\n      this._updateStatistics(\n        currentStatistics.filter((ent) => ent !== oldValue)\n      );\n      return;\n    }\n    this._updateStatistics(\n      currentStatistics.map((ent) => (ent === oldValue ? newValue : ent))\n    );\n  }\n\n  private async _addStatistic(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentStatistics;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateStatistics([...currentEntities, toAdd]);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistics-picker\": HaStatisticsPicker;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  array,\n  assert,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n  assign,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { StatisticsGraphCardConfig } from \"../../cards/types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { EditorTarget } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport \"../../../../components/entity/ha-statistics-picker\";\nimport { processConfigEntities } from \"../../common/process-config-entities\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-checkbox\";\nimport { StatisticType } from \"../../../../data/history\";\nimport \"../../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst statTypeStruct = union([\n  literal(\"sum\"),\n  literal(\"min\"),\n  literal(\"max\"),\n  literal(\"mean\"),\n]);\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entities: array(entitiesConfigStruct),\n    title: optional(string()),\n    days_to_show: optional(number()),\n    chart_type: optional(union([literal(\"bar\"), literal(\"line\")])),\n    stat_types: optional(union([array(statTypeStruct), statTypeStruct])),\n  })\n);\n\n@customElement(\"hui-statistics-graph-card-editor\")\nexport class HuiStatisticsGraphCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StatisticsGraphCardConfig;\n\n  @state() private _configEntities?: string[];\n\n  public setConfig(config: StatisticsGraphCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = config.entities\n      ? processConfigEntities(config.entities, false).map((cfg) => cfg.entity)\n      : [];\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _days_to_show(): number {\n    return this._config!.days_to_show || 30;\n  }\n\n  get _chart_type(): StatisticsGraphCardConfig[\"chart_type\"] {\n    return this._config!.chart_type || \"line\";\n  }\n\n  get _stat_types(): StatisticType[] {\n    return this._config!.stat_types\n      ? Array.isArray(this._config!.stat_types)\n        ? this._config!.stat_types\n        : [this._config!.stat_types]\n      : [\"mean\", \"min\", \"max\", \"sum\"];\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <paper-input\n          type=\"number\"\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.days_to_show\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._days_to_show}\n          min=\"1\"\n          .configValue=${\"days_to_show\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <p>Show stat types:</p>\n        <div class=\"side-by-side\">\n          <ha-formfield label=\"Sum\">\n            <ha-checkbox\n              .checked=${this._stat_types.includes(\"sum\")}\n              name=\"sum\"\n              @change=${this._statTypesChanged}\n            ></ha-checkbox>\n          </ha-formfield>\n          <ha-formfield label=\"Mean\">\n            <ha-checkbox\n              .checked=${this._stat_types.includes(\"mean\")}\n              name=\"mean\"\n              @change=${this._statTypesChanged}\n            ></ha-checkbox>\n          </ha-formfield>\n          <ha-formfield label=\"Min\">\n            <ha-checkbox\n              .checked=${this._stat_types.includes(\"min\")}\n              name=\"min\"\n              @change=${this._statTypesChanged}\n            ></ha-checkbox>\n          </ha-formfield>\n          <ha-formfield label=\"Max\">\n            <ha-checkbox\n              .checked=${this._stat_types.includes(\"max\")}\n              name=\"max\"\n              @change=${this._statTypesChanged}\n            ></ha-checkbox>\n          </ha-formfield>\n        </div>\n        <div class=\"side-by-side\">\n          <p>Chart type:</p>\n          <ha-formfield label=\"Line\">\n            <ha-radio\n              .checked=${this._chart_type === \"line\"}\n              value=\"line\"\n              name=\"chart_type\"\n              @change=${this._chartTypeChanged}\n            ></ha-radio>\n          </ha-formfield>\n          <ha-formfield label=\"Bar\">\n            <ha-radio\n              .checked=${this._chart_type === \"bar\"}\n              value=\"bar\"\n              name=\"chart_type\"\n              @change=${this._chartTypeChanged}\n            ></ha-radio>\n          </ha-formfield>\n        </div>\n        <ha-statistics-picker\n          .hass=${this.hass}\n          .pickStatisticLabel=${`Add a statistic`}\n          .pickedStatisticLabel=${`Statistic`}\n          .value=${this._configEntities}\n          .configValue=${\"entities\"}\n          @value-changed=${this._valueChanged}\n        ></ha-statistics-picker>\n      </div>\n    `;\n  }\n\n  private _chartTypeChanged(ev: CustomEvent) {\n    const input = ev.currentTarget as HaRadio;\n    fireEvent(this, \"config-changed\", {\n      config: { ...this._config!, chart_type: input.value },\n    });\n  }\n\n  private _statTypesChanged(ev) {\n    const name = ev.currentTarget.name;\n    const checked = ev.currentTarget.checked;\n    if (checked) {\n      fireEvent(this, \"config-changed\", {\n        config: { ...this._config!, stat_types: [...this._stat_types, name] },\n      });\n      return;\n    }\n    const statTypes = [...this._stat_types];\n    fireEvent(this, \"config-changed\", {\n      config: {\n        ...this._config!,\n        stat_types: statTypes.filter((stat) => stat !== name),\n      },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    const newValue = ev.detail?.value || target.value;\n\n    if (this[`_${target.configValue}`] === newValue) {\n      return;\n    }\n\n    if (newValue === \"\") {\n      this._config = { ...this._config };\n      delete this._config[target.configValue!];\n    } else {\n      let value: any = newValue;\n      if (target.type === \"number\") {\n        value = Number(value);\n      }\n      this._config = {\n        ...this._config,\n        [target.configValue!]: value,\n      };\n    }\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistics-graph-card-editor\": HuiStatisticsGraphCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}