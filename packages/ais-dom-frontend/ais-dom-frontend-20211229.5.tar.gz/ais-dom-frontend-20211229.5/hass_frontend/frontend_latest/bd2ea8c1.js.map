{"version":3,"file":"bd2ea8c1.js","mappings":";;AAyGA;;AAKA;AAIA;;;AAMA;AAGA;;AAEA;AAEA;;AAUA;AACA;AAGA;;AAEA;AAEA;;;AAKA;AAGA;;AAEA;AAIA;;AAIA;AACA;AACA;;;AAIA;;AAKA;AACA;AACA;;AAEA;AAKA;;AAKA;AACA;AACA;;AAEA;;;AAIA;;;AAMA;;AAGA;AAGA;AAOA;;AAEA;AAEA;;AAIA;AACA;;AAEA;;;;AAIA;;;AAMA;AAGA;;;;AAIA;AAGA;;AAEA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;AAvMA;ACDA;;AAEA;AACA;;;AAGA;;;AAdA;;AAEA;;;;;;;;;;ACKA;AACA;AAEA;AAQA;AAEA;AAEA;AACA;;AAGA;AAEA;;AA7BA;;AAEA;;;;;;;ACiBA;;;AAGA;AACA;;AAKA;;AAKA;AACA;AACA;;;;;;AAxBA;;AAEA;;;;;;AA1BA;ACoBA;AACA;;AATA;;AAEA;;;;;;;;;AA1BA;;ACoBA;;AAKA;;AAOA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;;AAGA;;;;AAnDA;;ACwCA;;AAKA;AAOA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AAMA;;;;;;AA1DA;ACmCA;;;AAGA;;AAEA;AACA;AAIA;;;AAlDA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACsLA;AAEA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-media-player-entity-row.ts","webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-scene-entity-row.ts","webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-script-entity-row.ts","webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-sensor-entity-row.ts","webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-text-entity-row.ts","webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-toggle-entity-row.ts","webpack://home-assistant-frontend/./src/panels/lovelace/special-rows/hui-attribute-row.ts","webpack://home-assistant-frontend/./src/panels/lovelace/special-rows/hui-button-row.ts","webpack://home-assistant-frontend/./src/util/hass-attributes-util.ts"],"sourcesContent":["import {\n  mdiPause,\n  mdiPlay,\n  mdiPlayPause,\n  mdiPower,\n  mdiSkipNext,\n  mdiSkipPrevious,\n  mdiStop,\n  mdiVolumeHigh,\n  mdiVolumeMinus,\n  mdiVolumeOff,\n  mdiVolumePlus,\n} from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-slider\";\nimport { UNAVAILABLE, UNAVAILABLE_STATES, UNKNOWN } from \"../../../data/entity\";\nimport {\n  computeMediaDescription,\n  ControlButton,\n  MediaPlayerEntity,\n  SUPPORT_NEXT_TRACK,\n  SUPPORT_PAUSE,\n  SUPPORT_PLAY,\n  SUPPORT_PREVIOUS_TRACK,\n  SUPPORT_STOP,\n  SUPPORT_TURN_OFF,\n  SUPPORT_TURN_ON,\n  SUPPORT_VOLUME_BUTTONS,\n  SUPPORT_VOLUME_MUTE,\n  SUPPORT_VOLUME_SET,\n} from \"../../../data/media-player\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { installResizeObserver } from \"../common/install-resize-observer\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport type { EntityConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-media-player-entity-row\")\nclass HuiMediaPlayerEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  @state() private _narrow?: boolean = false;\n\n  @state() private _veryNarrow?: boolean = false;\n\n  private _resizeObserver?: ResizeObserver;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config || !config.entity) {\n      throw new Error(\"Entity must be specified\");\n    }\n\n    this._config = config;\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._attachObserver();\n  }\n\n  public disconnectedCallback(): void {\n    this._resizeObserver?.unobserve(this);\n  }\n\n  public willUpdate(): void {\n    if (!this.hasUpdated) {\n      this._measureCard();\n    }\n  }\n\n  protected firstUpdated(): void {\n    this._attachObserver();\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as MediaPlayerEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const entityState = stateObj.state;\n    const controlButton = this._computeControlButton(stateObj);\n\n    const buttons = html`\n      ${!this._narrow &&\n      entityState === \"playing\" &&\n      supportsFeature(stateObj, SUPPORT_PREVIOUS_TRACK)\n        ? html`\n            <ha-icon-button\n              .path=${mdiSkipPrevious}\n              .label=${this.hass.localize(\n                \"ui.card.media_player.media_previous_track\"\n              )}\n              @click=${this._previousTrack}\n            ></ha-icon-button>\n          `\n        : \"\"}\n      ${(entityState === \"playing\" &&\n        (supportsFeature(stateObj, SUPPORT_PAUSE) ||\n          supportsFeature(stateObj, SUPPORT_STOP))) ||\n      ((entityState === \"paused\" || entityState === \"idle\") &&\n        supportsFeature(stateObj, SUPPORT_PLAY)) ||\n      (entityState === \"on\" &&\n        (supportsFeature(stateObj, SUPPORT_PLAY) ||\n          supportsFeature(stateObj, SUPPORT_PAUSE)))\n        ? html`\n            <ha-icon-button\n              .path=${controlButton.icon}\n              .label=${this.hass.localize(\n                `ui.card.media_player.${controlButton.action}`\n              )}\n              @click=${this._playPauseStop}\n            ></ha-icon-button>\n          `\n        : \"\"}\n      ${entityState === \"playing\" &&\n      supportsFeature(stateObj, SUPPORT_NEXT_TRACK)\n        ? html`\n            <ha-icon-button\n              .path=${mdiSkipNext}\n              .label=${this.hass.localize(\n                \"ui.card.media_player.media_next_track\"\n              )}\n              @click=${this._nextTrack}\n            ></ha-icon-button>\n          `\n        : \"\"}\n    `;\n\n    const mediaDescription = computeMediaDescription(stateObj);\n\n    return html`\n      <hui-generic-entity-row\n        .hass=${this.hass}\n        .config=${this._config}\n        .secondaryText=${mediaDescription ||\n        computeStateDisplay(this.hass.localize, stateObj, this.hass.locale)}\n      >\n        <div class=\"controls\">\n          ${supportsFeature(stateObj, SUPPORT_TURN_ON) &&\n          entityState === \"off\" &&\n          !UNAVAILABLE_STATES.includes(entityState)\n            ? html`\n                <ha-icon-button\n                  .path=${mdiPower}\n                  .label=${this.hass.localize(\"ui.card.media_player.turn_on\")}\n                  @click=${this._togglePower}\n                ></ha-icon-button>\n              `\n            : !supportsFeature(stateObj, SUPPORT_VOLUME_SET) &&\n              !supportsFeature(stateObj, SUPPORT_VOLUME_BUTTONS)\n            ? buttons\n            : \"\"}\n          ${supportsFeature(stateObj, SUPPORT_TURN_OFF) &&\n          entityState !== \"off\" &&\n          !UNAVAILABLE_STATES.includes(entityState)\n            ? html`\n                <ha-icon-button\n                  .path=${mdiPower}\n                  .label=${this.hass.localize(\"ui.card.media_player.turn_off\")}\n                  @click=${this._togglePower}\n                ></ha-icon-button>\n              `\n            : \"\"}\n        </div>\n      </hui-generic-entity-row>\n      ${(supportsFeature(stateObj, SUPPORT_VOLUME_SET) ||\n        supportsFeature(stateObj, SUPPORT_VOLUME_BUTTONS)) &&\n      ![UNAVAILABLE, UNKNOWN, \"off\"].includes(entityState)\n        ? html`\n            <div class=\"flex\">\n              <div class=\"volume\">\n                ${supportsFeature(stateObj, SUPPORT_VOLUME_MUTE)\n                  ? html`\n                      <ha-icon-button\n                        .path=${stateObj.attributes.is_volume_muted\n                          ? mdiVolumeOff\n                          : mdiVolumeHigh}\n                        .label=${this.hass.localize(\n                          `ui.card.media_player.${\n                            stateObj.attributes.is_volume_muted\n                              ? \"media_volume_mute\"\n                              : \"media_volume_unmute\"\n                          }`\n                        )}\n                        @click=${this._toggleMute}\n                      ></ha-icon-button>\n                    `\n                  : \"\"}\n                ${!this._veryNarrow &&\n                supportsFeature(stateObj, SUPPORT_VOLUME_SET)\n                  ? html`\n                      <ha-slider\n                        .dir=${computeRTLDirection(this.hass!)}\n                        .value=${Number(stateObj.attributes.volume_level) * 100}\n                        pin\n                        @change=${this._selectedValueChanged}\n                        ignore-bar-touch\n                        id=\"input\"\n                      ></ha-slider>\n                    `\n                  : !this._veryNarrow &&\n                    supportsFeature(stateObj, SUPPORT_VOLUME_BUTTONS)\n                  ? html`\n                      <ha-icon-button\n                        .path=${mdiVolumeMinus}\n                        .label=${this.hass.localize(\n                          \"ui.card.media_player.media_volume_down\"\n                        )}\n                        @click=${this._volumeDown}\n                      ></ha-icon-button>\n                      <ha-icon-button\n                        .path=${mdiVolumePlus}\n                        .label=${this.hass.localize(\n                          \"ui.card.media_player.media_volume_up\"\n                        )}\n                        @click=${this._volumeUp}\n                      ></ha-icon-button>\n                    `\n                  : \"\"}\n              </div>\n\n              <div class=\"controls\">${buttons}</div>\n            </div>\n          `\n        : \"\"}\n    `;\n  }\n\n  private async _attachObserver(): Promise<void> {\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(\n        debounce(() => this._measureCard(), 250, false)\n      );\n    }\n    this._resizeObserver.observe(this);\n  }\n\n  private _measureCard() {\n    if (!this.isConnected) {\n      return;\n    }\n    this._narrow = (this.clientWidth || 0) < 300;\n    this._veryNarrow = (this.clientWidth || 0) < 225;\n  }\n\n  private _computeControlButton(stateObj: HassEntity): ControlButton {\n    return stateObj.state === \"on\"\n      ? { icon: mdiPlayPause, action: \"media_play_pause\" }\n      : stateObj.state !== \"playing\"\n      ? { icon: mdiPlay, action: \"media_play\" }\n      : supportsFeature(stateObj, SUPPORT_PAUSE)\n      ? { icon: mdiPause, action: \"media_pause\" }\n      : { icon: mdiStop, action: \"media_stop\" };\n  }\n\n  private _togglePower(): void {\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    this.hass!.callService(\n      \"media_player\",\n      stateObj.state === \"off\" ? \"turn_on\" : \"turn_off\",\n      {\n        entity_id: this._config!.entity,\n      }\n    );\n  }\n\n  private _playPauseStop(): void {\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    const service =\n      stateObj.state !== \"playing\"\n        ? \"media_play\"\n        : supportsFeature(stateObj, SUPPORT_PAUSE)\n        ? \"media_pause\"\n        : \"media_stop\";\n\n    this.hass!.callService(\"media_player\", service, {\n      entity_id: this._config!.entity,\n    });\n  }\n\n  private _previousTrack(): void {\n    this.hass!.callService(\"media_player\", \"media_previous_track\", {\n      entity_id: this._config!.entity,\n    });\n  }\n\n  private _nextTrack(): void {\n    this.hass!.callService(\"media_player\", \"media_next_track\", {\n      entity_id: this._config!.entity,\n    });\n  }\n\n  private _toggleMute() {\n    this.hass!.callService(\"media_player\", \"volume_mute\", {\n      entity_id: this._config!.entity,\n      is_volume_muted:\n        !this.hass!.states[this._config!.entity].attributes.is_volume_muted,\n    });\n  }\n\n  private _volumeDown() {\n    this.hass!.callService(\"media_player\", \"volume_down\", {\n      entity_id: this._config!.entity,\n    });\n  }\n\n  private _volumeUp() {\n    this.hass!.callService(\"media_player\", \"volume_up\", {\n      entity_id: this._config!.entity,\n    });\n  }\n\n  private _selectedValueChanged(ev): void {\n    this.hass!.callService(\"media_player\", \"volume_set\", {\n      entity_id: this._config!.entity,\n      volume_level: ev.target.value / 100,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      .flex {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n      .volume {\n        display: flex;\n        flex-grow: 2;\n        flex-shrink: 2;\n      }\n      .controls {\n        white-space: nowrap;\n      }\n      ha-slider {\n        flex-grow: 2;\n        flex-shrink: 2;\n        width: 100%;\n        margin: 0 -8px 0 1px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-media-player-entity-row\": HuiMediaPlayerEntityRow;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/entity/ha-entity-toggle\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { activateScene } from \"../../../data/scene\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { ActionRowConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-scene-entity-row\")\nclass HuiSceneEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: ActionRowConfig;\n\n  public setConfig(config: ActionRowConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        <mwc-button\n          @click=${this._callService}\n          .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n          class=\"text-content\"\n        >\n          ${this._config.action_name ||\n          this.hass!.localize(\"ui.card.scene.activate\")}\n        </mwc-button>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      mwc-button {\n        margin-right: -0.57em;\n      }\n      :host {\n        cursor: pointer;\n      }\n    `;\n  }\n\n  private _callService(ev: Event): void {\n    ev.stopPropagation();\n    activateScene(this.hass, this._config!.entity);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-scene-entity-row\": HuiSceneEntityRow;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { canRun, ScriptEntity } from \"../../../data/script\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { ActionRowConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-script-entity-row\")\nclass HuiScriptEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ActionRowConfig;\n\n  public setConfig(config: ActionRowConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as ScriptEntity;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        ${stateObj.state === \"on\"\n          ? html`<mwc-button @click=${this._cancelScript}>\n              ${stateObj.attributes.mode !== \"single\" &&\n              (stateObj.attributes.current || 0) > 0\n                ? this.hass.localize(\n                    \"ui.card.script.cancel_multiple\",\n                    \"number\",\n                    stateObj.attributes.current\n                  )\n                : this.hass.localize(\"ui.card.script.cancel\")}\n            </mwc-button>`\n          : \"\"}\n        ${stateObj.state === \"off\" || stateObj.attributes.max\n          ? html`<mwc-button\n              @click=${this._runScript}\n              .disabled=${UNAVAILABLE_STATES.includes(stateObj.state) ||\n              !canRun(stateObj)}\n            >\n              ${this._config.action_name ||\n              this.hass!.localize(\"ui.card.script.run\")}\n            </mwc-button>`\n          : \"\"}\n      </hui-generic-entity-row>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      mwc-button:last-child {\n        margin-right: -0.57em;\n      }\n    `;\n  }\n\n  private _cancelScript(ev): void {\n    ev.stopPropagation();\n    this._callService(\"turn_off\");\n  }\n\n  private _runScript(ev): void {\n    ev.stopPropagation();\n    this._callService(\"turn_on\");\n  }\n\n  private _callService(service: string): void {\n    this.hass!.callService(\"script\", service, {\n      entity_id: this._config!.entity,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-script-entity-row\": HuiScriptEntityRow;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { SENSOR_DEVICE_CLASS_TIMESTAMP } from \"../../../data/sensor\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport \"../components/hui-timestamp-display\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { TimestampRenderingFormat } from \"../components/types\";\nimport { LovelaceRow } from \"./types\";\n\ninterface SensorEntityConfig extends EntitiesCardEntityConfig {\n  format?: TimestampRenderingFormat;\n}\n\n@customElement(\"hui-sensor-entity-row\")\nclass HuiSensorEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: SensorEntityConfig;\n\n  public setConfig(config: SensorEntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        <div\n          class=\"text-content\"\n          @action=${this._handleAction}\n          .actionHandler=${actionHandler({\n            hasHold: hasAction(this._config.hold_action),\n            hasDoubleClick: hasAction(this._config.double_tap_action),\n          })}\n        >\n          ${stateObj.attributes.device_class ===\n            SENSOR_DEVICE_CLASS_TIMESTAMP &&\n          !UNAVAILABLE_STATES.includes(stateObj.state)\n            ? html`\n                <hui-timestamp-display\n                  .hass=${this.hass}\n                  .ts=${new Date(stateObj.state)}\n                  .format=${this._config.format}\n                  capitalize\n                ></hui-timestamp-display>\n              `\n            : computeStateDisplay(\n                this.hass!.localize,\n                stateObj,\n                this.hass.locale\n              )}\n        </div>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      div {\n        text-align: right;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-sensor-entity-row\": HuiSensorEntityRow;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { LovelaceRow } from \"./types\";\n\n@customElement(\"hui-text-entity-row\")\nclass HuiTextEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntitiesCardEntityConfig;\n\n  public setConfig(config: EntitiesCardEntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        ${computeStateDisplay(this.hass!.localize, stateObj, this.hass.locale)}\n      </hui-generic-entity-row>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      div {\n        text-align: right;\n      }\n      .pointer {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-text-entity-row\": HuiTextEntityRow;\n  }\n}\n","import { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport \"../../../components/entity/ha-entity-toggle\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { EntityConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-toggle-entity-row\")\nclass HuiToggleEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const showToggle =\n      stateObj.state === \"on\" ||\n      stateObj.state === \"off\" ||\n      UNAVAILABLE_STATES.includes(stateObj.state);\n\n    return html`\n      <hui-generic-entity-row\n        .hass=${this.hass}\n        .config=${this._config}\n        .catchInteraction=${!showToggle}\n      >\n        ${showToggle\n          ? html`\n              <ha-entity-toggle\n                .hass=${this.hass}\n                .stateObj=${stateObj}\n              ></ha-entity-toggle>\n            `\n          : html`\n              <div class=\"text-content\">\n                ${computeStateDisplay(\n                  this.hass!.localize,\n                  stateObj,\n                  this.hass!.locale\n                )}\n              </div>\n            `}\n      </hui-generic-entity-row>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-toggle-entity-row\": HuiToggleEntityRow;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport checkValidDate from \"../../../common/datetime/check_valid_date\";\nimport { formatNumber } from \"../../../common/number/format_number\";\nimport { HomeAssistant } from \"../../../types\";\nimport { formatAttributeValue } from \"../../../util/hass-attributes-util\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport \"../components/hui-timestamp-display\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { AttributeRowConfig, LovelaceRow } from \"../entity-rows/types\";\n\n@customElement(\"hui-attribute-row\")\nclass HuiAttributeRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: AttributeRowConfig;\n\n  public setConfig(config: AttributeRowConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    if (!config.entity) {\n      throw new Error(\"Entity not specified\");\n    }\n    if (!config.attribute) {\n      throw new Error(\"Attribute not specified\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const attribute = stateObj.attributes[this._config.attribute];\n    let date: Date | undefined;\n    if (this._config.format) {\n      date = new Date(attribute);\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        ${this._config.prefix}\n        ${this._config.format && checkValidDate(date)\n          ? html` <hui-timestamp-display\n              .hass=${this.hass}\n              .ts=${date}\n              .format=${this._config.format}\n              capitalize\n            ></hui-timestamp-display>`\n          : typeof attribute === \"number\"\n          ? formatNumber(attribute, this.hass.locale)\n          : attribute !== undefined\n          ? formatAttributeValue(this.hass, attribute)\n          : \"-\"}\n        ${this._config.suffix}\n      </hui-generic-entity-row>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      div {\n        text-align: right;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-attribute-row\": HuiAttributeRow;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { DOMAINS_TOGGLE } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { ButtonRowConfig, LovelaceRow } from \"../entity-rows/types\";\nimport \"../../../components/ha-state-icon\";\n\n@customElement(\"hui-button-row\")\nexport class HuiButtonRow extends LitElement implements LovelaceRow {\n  public hass?: HomeAssistant;\n\n  @state() private _config?: ButtonRowConfig;\n\n  public setConfig(config: ButtonRowConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n\n    if (!config.name && !config.entity) {\n      throw new Error(\"No name and no entity specified\");\n    }\n\n    this._config = {\n      tap_action: {\n        action:\n          config.entity && DOMAINS_TOGGLE.has(computeDomain(config.entity))\n            ? \"toggle\"\n            : \"more-info\",\n      },\n      hold_action: { action: \"more-info\" },\n      ...config,\n    };\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config) {\n      return html``;\n    }\n\n    const stateObj =\n      this._config.entity && this.hass\n        ? this.hass.states[this._config.entity]\n        : undefined;\n\n    const name =\n      this._config.name ?? (stateObj ? computeStateName(stateObj) : \"\");\n\n    return html`\n      <ha-state-icon .icon=${this._config.icon} .state=${stateObj}>\n      </ha-state-icon>\n      <div class=\"flex\">\n        <div .title=${name}>${name}</div>\n        <mwc-button\n          @action=${this._handleAction}\n          .actionHandler=${actionHandler({\n            hasHold: hasAction(this._config!.hold_action),\n            hasDoubleClick: hasAction(this._config!.double_tap_action),\n          })}\n          >${this._config.action_name\n            ? this._config.action_name\n            : this.hass!.localize(\"ui.card.service.run\")}</mwc-button\n        >\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      ha-state-icon {\n        padding: 8px;\n        color: var(--paper-item-icon-color);\n      }\n      .flex {\n        flex: 1;\n        overflow: hidden;\n        margin-left: 16px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .flex div {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      mwc-button {\n        margin-right: -0.57em;\n      }\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-button-row\": HuiButtonRow;\n  }\n}\n","import { html, TemplateResult } from \"lit\";\nimport { until } from \"lit/directives/until\";\nimport checkValidDate from \"../common/datetime/check_valid_date\";\nimport { formatDate } from \"../common/datetime/format_date\";\nimport { formatDateTimeWithSeconds } from \"../common/datetime/format_date_time\";\nimport { capitalizeFirstLetter } from \"../common/string/capitalize-first-letter\";\nimport { isDate } from \"../common/string/is_date\";\nimport { isTimestamp } from \"../common/string/is_timestamp\";\nimport { HomeAssistant } from \"../types\";\n\nlet jsYamlPromise: Promise<typeof import(\"../resources/js-yaml-dump\")>;\n\nconst hassAttributeUtil = {\n  DOMAIN_DEVICE_CLASS: {\n    binary_sensor: [\n      \"battery\",\n      \"cold\",\n      \"connectivity\",\n      \"door\",\n      \"garage_door\",\n      \"gas\",\n      \"heat\",\n      \"light\",\n      \"lock\",\n      \"moisture\",\n      \"motion\",\n      \"moving\",\n      \"occupancy\",\n      \"opening\",\n      \"plug\",\n      \"power\",\n      \"presence\",\n      \"problem\",\n      \"running\",\n      \"safety\",\n      \"smoke\",\n      \"sound\",\n      \"tamper\",\n      \"vibration\",\n      \"window\",\n    ],\n    button: [\"restart\", \"update\"],\n    cover: [\n      \"awning\",\n      \"blind\",\n      \"curtain\",\n      \"damper\",\n      \"door\",\n      \"garage\",\n      \"gate\",\n      \"shade\",\n      \"shutter\",\n      \"window\",\n    ],\n    humidifier: [\"dehumidifier\", \"humidifier\"],\n    sensor: [\n      \"aqi\",\n      \"battery\",\n      \"carbon_dioxide\",\n      \"carbon_monoxide\",\n      \"current\",\n      \"date\",\n      \"energy\",\n      \"gas\",\n      \"humidity\",\n      \"illuminance\",\n      \"monetary\",\n      \"nitrogen_dioxide\",\n      \"nitrogen_monoxide\",\n      \"nitrous_oxide\",\n      \"ozone\",\n      \"pm1\",\n      \"pm10\",\n      \"pm25\",\n      \"power\",\n      \"power_factor\",\n      \"pressure\",\n      \"signal_strength\",\n      \"sulphur_dioxide\",\n      \"temperature\",\n      \"timestamp\",\n      \"volatile_organic_compounds\",\n      \"voltage\",\n    ],\n    switch: [\"switch\", \"outlet\"],\n  },\n  UNKNOWN_TYPE: \"json\",\n  ADD_TYPE: \"key-value\",\n  TYPE_TO_TAG: {\n    string: \"ha-customize-string\",\n    json: \"ha-customize-string\",\n    icon: \"ha-customize-icon\",\n    boolean: \"ha-customize-boolean\",\n    array: \"ha-customize-array\",\n    \"key-value\": \"ha-customize-key-value\",\n  },\n  LOGIC_STATE_ATTRIBUTES: {},\n};\n\n// Attributes here serve dual purpose:\n// 1) Any key of this object won't be shown in more-info window.\n// 2) Any key which has value other than undefined will appear in customization\n//    config according to its value.\nhassAttributeUtil.LOGIC_STATE_ATTRIBUTES = {\n  entity_picture: undefined,\n  friendly_name: { type: \"string\", description: \"Name\" },\n  icon: { type: \"icon\" },\n  emulated_hue: {\n    type: \"boolean\",\n    domains: [\"emulated_hue\"],\n  },\n  emulated_hue_name: {\n    type: \"string\",\n    domains: [\"emulated_hue\"],\n  },\n  haaska_hidden: undefined,\n  haaska_name: undefined,\n  supported_features: undefined,\n  attribution: undefined,\n  restored: undefined,\n  editable: undefined,\n  custom_ui_more_info: { type: \"string\" },\n  custom_ui_state_card: { type: \"string\" },\n  device_class: {\n    type: \"array\",\n    options: hassAttributeUtil.DOMAIN_DEVICE_CLASS,\n    description: \"Device class\",\n    domains: [\"binary_sensor\", \"cover\", \"humidifier\", \"sensor\", \"switch\"],\n  },\n  state_class: {\n    type: \"array\",\n    options: { sensor: [\"measurement\", \"total\", \"total_increasing\"] },\n    description: \"State class\",\n    domains: [\"sensor\"],\n  },\n  last_reset: undefined,\n  assumed_state: {\n    type: \"boolean\",\n    domains: [\n      \"switch\",\n      \"light\",\n      \"cover\",\n      \"climate\",\n      \"fan\",\n      \"humidifier\",\n      \"group\",\n      \"water_heater\",\n    ],\n  },\n  initial_state: {\n    type: \"string\",\n    domains: [\"automation\"],\n  },\n  unit_of_measurement: { type: \"string\" },\n};\n\nexport default hassAttributeUtil;\n\n// Convert from internal snake_case format to user-friendly format\nexport function formatAttributeName(value: string): string {\n  value = value\n    .replace(/_/g, \" \")\n    .replace(/\\bid\\b/g, \"ID\")\n    .replace(/\\bip\\b/g, \"IP\")\n    .replace(/\\bmac\\b/g, \"MAC\")\n    .replace(/\\bgps\\b/g, \"GPS\");\n  return capitalizeFirstLetter(value);\n}\n\nexport function formatAttributeValue(\n  hass: HomeAssistant,\n  value: any\n): string | TemplateResult {\n  if (value === null) {\n    return \"-\";\n  }\n\n  // YAML handling\n  if (\n    (Array.isArray(value) && value.some((val) => val instanceof Object)) ||\n    (!Array.isArray(value) && value instanceof Object)\n  ) {\n    if (!jsYamlPromise) {\n      jsYamlPromise = import(\"../resources/js-yaml-dump\");\n    }\n    const yaml = jsYamlPromise.then((jsYaml) => jsYaml.dump(value));\n    return html`<pre>${until(yaml, \"\")}</pre>`;\n  }\n\n  if (typeof value === \"string\") {\n    // URL handling\n    if (value.startsWith(\"http\")) {\n      try {\n        // If invalid URL, exception will be raised\n        const url = new URL(value);\n        if (url.protocol === \"http:\" || url.protocol === \"https:\")\n          return html`<a target=\"_blank\" rel=\"noreferrer\" href=${value}\n            >${value}</a\n          >`;\n      } catch (_) {\n        // Nothing to do here\n      }\n    }\n\n    // Date handling\n    if (isDate(value, true)) {\n      // Timestamp handling\n      if (isTimestamp(value)) {\n        const date = new Date(value);\n        if (checkValidDate(date)) {\n          return formatDateTimeWithSeconds(date, hass.locale);\n        }\n      }\n\n      // Value was not a timestamp, so only do date formatting\n      const date = new Date(value);\n      if (checkValidDate(date)) {\n        return formatDate(date, hass.locale);\n      }\n    }\n  }\n\n  return Array.isArray(value) ? value.join(\", \") : value;\n}\n"],"names":[],"sourceRoot":""}