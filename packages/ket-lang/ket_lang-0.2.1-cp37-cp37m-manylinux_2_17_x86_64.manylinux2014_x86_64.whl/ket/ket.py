# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ket
else:
    import _ket

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ket.delete_SwigPyIterator

    def value(self):
        return _ket.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ket.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ket.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ket.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ket.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ket.SwigPyIterator_copy(self)

    def next(self):
        return _ket.SwigPyIterator_next(self)

    def __next__(self):
        return _ket.SwigPyIterator___next__(self)

    def previous(self):
        return _ket.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ket.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ket.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ket.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ket.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ket.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ket.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ket.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ket:
_ket.SwigPyIterator_swigregister(SwigPyIterator)

class vec_float(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ket.vec_float_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ket.vec_float___nonzero__(self)

    def __bool__(self):
        return _ket.vec_float___bool__(self)

    def __len__(self):
        return _ket.vec_float___len__(self)

    def __getslice__(self, i, j):
        return _ket.vec_float___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ket.vec_float___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ket.vec_float___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ket.vec_float___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ket.vec_float___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ket.vec_float___setitem__(self, *args)

    def pop(self):
        return _ket.vec_float_pop(self)

    def append(self, x):
        return _ket.vec_float_append(self, x)

    def empty(self):
        return _ket.vec_float_empty(self)

    def size(self):
        return _ket.vec_float_size(self)

    def swap(self, v):
        return _ket.vec_float_swap(self, v)

    def begin(self):
        return _ket.vec_float_begin(self)

    def end(self):
        return _ket.vec_float_end(self)

    def rbegin(self):
        return _ket.vec_float_rbegin(self)

    def rend(self):
        return _ket.vec_float_rend(self)

    def clear(self):
        return _ket.vec_float_clear(self)

    def get_allocator(self):
        return _ket.vec_float_get_allocator(self)

    def pop_back(self):
        return _ket.vec_float_pop_back(self)

    def erase(self, *args):
        return _ket.vec_float_erase(self, *args)

    def __init__(self, *args):
        _ket.vec_float_swiginit(self, _ket.new_vec_float(*args))

    def push_back(self, x):
        return _ket.vec_float_push_back(self, x)

    def front(self):
        return _ket.vec_float_front(self)

    def back(self):
        return _ket.vec_float_back(self)

    def assign(self, n, x):
        return _ket.vec_float_assign(self, n, x)

    def resize(self, *args):
        return _ket.vec_float_resize(self, *args)

    def insert(self, *args):
        return _ket.vec_float_insert(self, *args)

    def reserve(self, n):
        return _ket.vec_float_reserve(self, n)

    def capacity(self):
        return _ket.vec_float_capacity(self)
    __swig_destroy__ = _ket.delete_vec_float

# Register vec_float in _ket:
_ket.vec_float_swigregister(vec_float)

class vec_uint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ket.vec_uint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ket.vec_uint___nonzero__(self)

    def __bool__(self):
        return _ket.vec_uint___bool__(self)

    def __len__(self):
        return _ket.vec_uint___len__(self)

    def __getslice__(self, i, j):
        return _ket.vec_uint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ket.vec_uint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ket.vec_uint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ket.vec_uint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ket.vec_uint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ket.vec_uint___setitem__(self, *args)

    def pop(self):
        return _ket.vec_uint_pop(self)

    def append(self, x):
        return _ket.vec_uint_append(self, x)

    def empty(self):
        return _ket.vec_uint_empty(self)

    def size(self):
        return _ket.vec_uint_size(self)

    def swap(self, v):
        return _ket.vec_uint_swap(self, v)

    def begin(self):
        return _ket.vec_uint_begin(self)

    def end(self):
        return _ket.vec_uint_end(self)

    def rbegin(self):
        return _ket.vec_uint_rbegin(self)

    def rend(self):
        return _ket.vec_uint_rend(self)

    def clear(self):
        return _ket.vec_uint_clear(self)

    def get_allocator(self):
        return _ket.vec_uint_get_allocator(self)

    def pop_back(self):
        return _ket.vec_uint_pop_back(self)

    def erase(self, *args):
        return _ket.vec_uint_erase(self, *args)

    def __init__(self, *args):
        _ket.vec_uint_swiginit(self, _ket.new_vec_uint(*args))

    def push_back(self, x):
        return _ket.vec_uint_push_back(self, x)

    def front(self):
        return _ket.vec_uint_front(self)

    def back(self):
        return _ket.vec_uint_back(self)

    def assign(self, n, x):
        return _ket.vec_uint_assign(self, n, x)

    def resize(self, *args):
        return _ket.vec_uint_resize(self, *args)

    def insert(self, *args):
        return _ket.vec_uint_insert(self, *args)

    def reserve(self, n):
        return _ket.vec_uint_reserve(self, n)

    def capacity(self):
        return _ket.vec_uint_capacity(self)
    __swig_destroy__ = _ket.delete_vec_uint

# Register vec_uint in _ket:
_ket.vec_uint_swigregister(vec_uint)

class vec_vec_uint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ket.vec_vec_uint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ket.vec_vec_uint___nonzero__(self)

    def __bool__(self):
        return _ket.vec_vec_uint___bool__(self)

    def __len__(self):
        return _ket.vec_vec_uint___len__(self)

    def __getslice__(self, i, j):
        return _ket.vec_vec_uint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ket.vec_vec_uint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ket.vec_vec_uint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ket.vec_vec_uint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ket.vec_vec_uint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ket.vec_vec_uint___setitem__(self, *args)

    def pop(self):
        return _ket.vec_vec_uint_pop(self)

    def append(self, x):
        return _ket.vec_vec_uint_append(self, x)

    def empty(self):
        return _ket.vec_vec_uint_empty(self)

    def size(self):
        return _ket.vec_vec_uint_size(self)

    def swap(self, v):
        return _ket.vec_vec_uint_swap(self, v)

    def begin(self):
        return _ket.vec_vec_uint_begin(self)

    def end(self):
        return _ket.vec_vec_uint_end(self)

    def rbegin(self):
        return _ket.vec_vec_uint_rbegin(self)

    def rend(self):
        return _ket.vec_vec_uint_rend(self)

    def clear(self):
        return _ket.vec_vec_uint_clear(self)

    def get_allocator(self):
        return _ket.vec_vec_uint_get_allocator(self)

    def pop_back(self):
        return _ket.vec_vec_uint_pop_back(self)

    def erase(self, *args):
        return _ket.vec_vec_uint_erase(self, *args)

    def __init__(self, *args):
        _ket.vec_vec_uint_swiginit(self, _ket.new_vec_vec_uint(*args))

    def push_back(self, x):
        return _ket.vec_vec_uint_push_back(self, x)

    def front(self):
        return _ket.vec_vec_uint_front(self)

    def back(self):
        return _ket.vec_vec_uint_back(self)

    def assign(self, n, x):
        return _ket.vec_vec_uint_assign(self, n, x)

    def resize(self, *args):
        return _ket.vec_vec_uint_resize(self, *args)

    def insert(self, *args):
        return _ket.vec_vec_uint_insert(self, *args)

    def reserve(self, n):
        return _ket.vec_vec_uint_reserve(self, n)

    def capacity(self):
        return _ket.vec_vec_uint_capacity(self)
    __swig_destroy__ = _ket.delete_vec_vec_uint

# Register vec_vec_uint in _ket:
_ket.vec_vec_uint_swigregister(vec_vec_uint)

class vec_complex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _ket.vec_complex_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ket.vec_complex___nonzero__(self)

    def __bool__(self):
        return _ket.vec_complex___bool__(self)

    def __len__(self):
        return _ket.vec_complex___len__(self)

    def __getslice__(self, i, j):
        return _ket.vec_complex___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ket.vec_complex___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ket.vec_complex___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ket.vec_complex___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ket.vec_complex___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ket.vec_complex___setitem__(self, *args)

    def pop(self):
        return _ket.vec_complex_pop(self)

    def append(self, x):
        return _ket.vec_complex_append(self, x)

    def empty(self):
        return _ket.vec_complex_empty(self)

    def size(self):
        return _ket.vec_complex_size(self)

    def swap(self, v):
        return _ket.vec_complex_swap(self, v)

    def begin(self):
        return _ket.vec_complex_begin(self)

    def end(self):
        return _ket.vec_complex_end(self)

    def rbegin(self):
        return _ket.vec_complex_rbegin(self)

    def rend(self):
        return _ket.vec_complex_rend(self)

    def clear(self):
        return _ket.vec_complex_clear(self)

    def get_allocator(self):
        return _ket.vec_complex_get_allocator(self)

    def pop_back(self):
        return _ket.vec_complex_pop_back(self)

    def erase(self, *args):
        return _ket.vec_complex_erase(self, *args)

    def __init__(self, *args):
        _ket.vec_complex_swiginit(self, _ket.new_vec_complex(*args))

    def push_back(self, x):
        return _ket.vec_complex_push_back(self, x)

    def front(self):
        return _ket.vec_complex_front(self)

    def back(self):
        return _ket.vec_complex_back(self)

    def assign(self, n, x):
        return _ket.vec_complex_assign(self, n, x)

    def resize(self, *args):
        return _ket.vec_complex_resize(self, *args)

    def insert(self, *args):
        return _ket.vec_complex_insert(self, *args)

    def reserve(self, n):
        return _ket.vec_complex_reserve(self, n)

    def capacity(self):
        return _ket.vec_complex_capacity(self)
    __swig_destroy__ = _ket.delete_vec_complex

# Register vec_complex in _ket:
_ket.vec_complex_swigregister(vec_complex)

class metrics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ket.metrics_swiginit(self, _ket.new_metrics(*args))

    def str(self):
        return _ket.metrics_str(self)

    def __str__(self):
        return _ket.metrics___str__(self)

    def get_qubits_used(self):
        return _ket.metrics_get_qubits_used(self)

    def get_free_qubits(self):
        return _ket.metrics_get_free_qubits(self)

    def get_allocated_qubits(self):
        return _ket.metrics_get_allocated_qubits(self)

    def get_max_allocated_qubits(self):
        return _ket.metrics_get_max_allocated_qubits(self)

    def get_measurements(self):
        return _ket.metrics_get_measurements(self)

    def get_gates(self, gate):
        return _ket.metrics_get_gates(self, gate)

    def get_gates_sum(self):
        return _ket.metrics_get_gates_sum(self)

    def get_ctrl_gates(self, number):
        return _ket.metrics_get_ctrl_gates(self, number)

    def get_ctrl_gates_sum(self):
        return _ket.metrics_get_ctrl_gates_sum(self)

    def get_plugins(self, name):
        return _ket.metrics_get_plugins(self, name)

    def get_plugins_sum(self):
        return _ket.metrics_get_plugins_sum(self)
    __swig_destroy__ = _ket.delete_metrics

# Register metrics in _ket:
_ket.metrics_swigregister(metrics)


def config(param, value):
    return _ket.config(param, value)
class context(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ket.context_swiginit(self, _ket.new_context())

    def has_executed(self):
        return _ket.context_has_executed(self)

    def in_scope(self):
        return _ket.context_in_scope(self)

    def get_return(self, arg):
        return _ket.context_get_return(self, arg)

    def get_json(self):
        return _ket.context_get_json(self)
    __swig_destroy__ = _ket.delete_context

# Register context in _ket:
_ket.context_swigregister(context)

class quant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        _ket.quant_swiginit(self, _ket.new_quant(size))

    @staticmethod
    def dirty(size):
        return _ket.quant_dirty(size)

    def __or__(self, other):
        return _ket.quant___or__(self, other)

    def inverted(self):
        return _ket.quant_inverted(self)

    def len(self):
        return _ket.quant_len(self)

    def __len__(self):
        return _ket.quant___len__(self)

    def free(self, dirty=False):
        return _ket.quant_free(self, dirty)

    def is_free(self):
        return _ket.quant_is_free(self)

    def __getitem__(self, param):
        return _ket.quant___getitem__(self, param)
    __swig_destroy__ = _ket.delete_quant

# Register quant in _ket:
_ket.quant_swigregister(quant)

def quant_dirty(size):
    return _ket.quant_dirty(size)

class future(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value):
        _ket.future_swiginit(self, _ket.new_future(value))

    def __eq__(self, *args):
        return _ket.future___eq__(self, *args)

    def __ne__(self, *args):
        return _ket.future___ne__(self, *args)

    def __lt__(self, *args):
        return _ket.future___lt__(self, *args)

    def __le__(self, *args):
        return _ket.future___le__(self, *args)

    def __gt__(self, *args):
        return _ket.future___gt__(self, *args)

    def __ge__(self, *args):
        return _ket.future___ge__(self, *args)

    def __add__(self, *args):
        return _ket.future___add__(self, *args)

    def __sub__(self, *args):
        return _ket.future___sub__(self, *args)

    def __mul__(self, *args):
        return _ket.future___mul__(self, *args)

    def __truediv__(self, *args):
        return _ket.future___truediv__(self, *args)
    __div__ = __truediv__



    def __lshift__(self, *args):
        return _ket.future___lshift__(self, *args)

    def __rshift__(self, *args):
        return _ket.future___rshift__(self, *args)

    def __and__(self, *args):
        return _ket.future___and__(self, *args)

    def __xor__(self, *args):
        return _ket.future___xor__(self, *args)

    def __or__(self, *args):
        return _ket.future___or__(self, *args)

    def get(self):
        return _ket.future_get(self)

    def set(self, other):
        return _ket.future_set(self, other)
    __swig_destroy__ = _ket.delete_future

# Register future in _ket:
_ket.future_swigregister(future)

class label(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        _ket.label_swiginit(self, _ket.new_label(name))

    def begin(self):
        return _ket.label_begin(self)
    __swig_destroy__ = _ket.delete_label

# Register label in _ket:
_ket.label_swigregister(label)


def process_begin():
    return _ket.process_begin()

def process_end():
    return _ket.process_end()

def jump(label_name):
    return _ket.jump(label_name)

def branch(cond, label_true, label_false):
    return _ket.branch(cond, label_true, label_false)

def ctrl_begin(q):
    return _ket.ctrl_begin(q)

def ctrl_end():
    return _ket.ctrl_end()

def adj_begin():
    return _ket.adj_begin()

def adj_end():
    return _ket.adj_end()

def measure(q):
    return _ket.measure(q)

def X(q):
    return _ket.X(q)

def Y(q):
    return _ket.Y(q)

def Z(q):
    return _ket.Z(q)

def H(q):
    return _ket.H(q)

def S(q):
    return _ket.S(q)

def SD(q):
    return _ket.SD(q)

def T(q):
    return _ket.T(q)

def TD(q):
    return _ket.TD(q)

def phase(_lambda, q):
    return _ket.phase(_lambda, q)

def RX(theta, q):
    return _ket.RX(theta, q)

def RY(theta, q):
    return _ket.RY(theta, q)

def RZ(theta, q):
    return _ket.RZ(theta, q)
class dump(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, q):
        _ket.dump_swiginit(self, _ket.new_dump(q))

    def get_states(self):
        return _ket.dump_get_states(self)

    def amplitude(self, idx):
        return _ket.dump_amplitude(self, idx)

    def probability(self, idx):
        return _ket.dump_probability(self, idx)

    def show(self, format):
        return _ket.dump_show(self, format)

    def get(self):
        return _ket.dump_get(self)

    def __eq__(self, other):
        return _ket.dump___eq__(self, other)

    def __ne__(self, other):
        return _ket.dump___ne__(self, other)
    nbits = property(_ket.dump_nbits_get)
    __swig_destroy__ = _ket.delete_dump

# Register dump in _ket:
_ket.dump_swigregister(dump)


def exec_quantum():
    return _ket.exec_quantum()

def report():
    return _ket.report()

def plugin(name, q, args):
    return _ket.plugin(name, q, args)

def build_info():
    return _ket.build_info()

label.__repr__ = lambda self : '<Ket label; '+self.this.__repr__()+'>'



