#!/bin/bash -x

# Perform SonarQube analysis
${{SONARQUBE_PATH}}/sonar-scanner ${{SONARQUBE_SCANNER_FLAGS}} -D sonar.host.url=${{SONARQUBE_SERVER}} -D sonar.projectKey=${{SONARQUBE_PROJECT}} -D sonar.login=${{SONARQUBE_TOKEN}} -D sonar.sources=${{SOURCE_DIR}} -D sonar.working.directory=${{TOOL_ANALYSIS_DIR}}

# Wait for results to be finalized
sleep 2

# Retrieve the results from the SonarQube server
PAGE=1
MORE_RESULTS=true
while $MORE_RESULTS; do
    # Get the page
    RESULTS_FILE=${{TOOL_ANALYSIS_DIR}}/sonarqube_warnings_$PAGE.json
    curl -u ${{SONARQUBE_TOKEN}}: "${{SONARQUBE_SERVER}}/api/issues/search?ps=500&componentKeys=${{SONARQUBE_PROJECT}}&p=$PAGE&${{SONARQUBE_CURL_FLAGS}}" >> $RESULTS_FILE

    # Check to see if the file is empty
    if [ ! -f "$RESULTS_FILE" ]; then
        exit 1
    fi

    # Check the contents
    if grep -q "\"issues\":\[\]" $RESULTS_FILE; then
        rm -f $RESULTS_FILE
        MORE_RESULTS=false
    else
        PAGE=$((PAGE+1))
    fi
done

# Parse the results
python3 -m scrub.tools.parsers.get_sonarqube_warnings ${{TOOL_ANALYSIS_DIR}} ${{RAW_RESULTS_DIR}}/sonarqube_raw.scrub ${{SOURCE_DIR}}