{"version":3,"file":"chunks/app_components_errorRobot_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/demoSandboxButton.tsx","webpack:///./app/components/errorRobot.tsx","webpack:///./app/views/onboarding/createSampleEventButton.tsx"],"sourcesContent":["import Button from 'sentry/components/button';\nimport {Organization, SandboxData} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ntype Props = {\n  /**\n   * The deep link scenario\n   */\n  scenario:\n    | 'performance'\n    | 'releases'\n    | 'alerts'\n    | 'discover'\n    | 'dashboards'\n    | 'projects'\n    | 'oneDiscoverQuery'\n    | 'oneIssue'\n    | 'oneBreadcrumb'\n    | 'oneStackTrace'\n    | 'oneTransaction'\n    | 'oneWebVitals'\n    | 'oneTransactionSummary'\n    | 'oneRelease';\n  /**\n   * Which project we should link to in the sandbox\n   */\n  projectSlug?: 'react' | 'python' | 'ios' | 'android' | 'react-native';\n  /**\n   * Matching on the error type or title\n   */\n  errorType?: string;\n\n  clientData?: SandboxData;\n} & React.ComponentProps<typeof Button>;\n\n/**\n * Renders a button that will kick off the sandbox around children\n * which should include be a button. If the sandbox is hidden,\n * don't render the children\n */\nfunction DemoSandboxButton({\n  scenario,\n  projectSlug,\n  errorType,\n  clientData,\n  ...buttonProps\n}: Props) {\n  const organization: Organization = useOrganization();\n  const url = new URL('https://try.sentry-demo.com/demo/start/');\n\n  if (scenario) {\n    url.searchParams.append('scenario', scenario);\n  }\n\n  if (projectSlug) {\n    url.searchParams.append('projectSlug', projectSlug);\n  }\n\n  if (errorType) {\n    url.searchParams.append('errorType', errorType);\n  }\n  // always skip adding email when coming from in-product\n  const clientOptions: SandboxData = {\n    skipEmail: true,\n    acceptedTracking: true,\n    ...clientData,\n  };\n  url.searchParams.append('client', JSON.stringify(clientOptions));\n  return (\n    <Button\n      external\n      href={url.toString()}\n      onClick={() =>\n        trackAdvancedAnalyticsEvent('growth.clicked_enter_sandbox', {\n          scenario,\n          organization,\n        })\n      }\n      {...buttonProps}\n    />\n  );\n}\n\nexport default DemoSandboxButton;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport robotBackground from 'sentry-images/spot/sentry-robot.png';\n\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport DemoSandboxButton from 'sentry/components/demoSandboxButton';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {logExperiment} from 'sentry/utils/analytics';\nimport withApi from 'sentry/utils/withApi';\nimport CreateSampleEventButton from 'sentry/views/onboarding/createSampleEventButton';\n\ntype Props = {\n  api: Client;\n  org: Organization;\n  project?: Project;\n  gradient: boolean;\n  /**\n   * sampleIssueId can have 3 values:\n   * - empty string to indicate it doesn't exist (render \"create sample event\")\n   * - non-empty string to indicate it exists (render \"see sample event\")\n   * - undefined to indicate the project API should be consulted to find out\n   */\n  sampleIssueId?: string;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  sampleIssueId?: string;\n};\n\nclass ErrorRobot extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: false,\n    sampleIssueId: this.props.sampleIssueId,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n    logExperiment({\n      key: 'ViewSampleSandboxExperiment',\n      organization: this.props.org,\n    });\n  }\n\n  async fetchData() {\n    const {org, project} = this.props;\n    const {sampleIssueId} = this.state;\n\n    if (!project) {\n      return;\n    }\n\n    if (defined(sampleIssueId)) {\n      return;\n    }\n\n    const url = `/projects/${org.slug}/${project.slug}/issues/`;\n\n    this.setState({loading: true});\n\n    try {\n      const data = await this.props.api.requestPromise(url, {\n        method: 'GET',\n        data: {limit: 1},\n      });\n      this.setState({sampleIssueId: (data.length > 0 && data[0].id) || ''});\n    } catch (err) {\n      const error = err?.responseJSON?.detail ?? true;\n      this.setState({error});\n    }\n\n    this.setState({loading: false});\n  }\n\n  render() {\n    const {loading, error, sampleIssueId} = this.state;\n    const {org, project, gradient} = this.props;\n\n    let sampleLink;\n    if (org.experiments.ViewSampleSandboxExperiment) {\n      sampleLink = (\n        <DemoSandboxButton\n          scenario=\"oneIssue\"\n          size=\"small\"\n          priority=\"link\"\n          clientData={{\n            cta: {\n              id: 'sample_issue',\n              title: t('Finish Setup'),\n              shortTitle: t('Setup'),\n              url: window.location.href,\n            },\n          }}\n        >\n          {t('See a Sample Event')}\n        </DemoSandboxButton>\n      );\n    } else {\n      sampleLink =\n        project && (loading || error ? null : sampleIssueId) ? (\n          <p>\n            <Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>\n              {t('Or see your sample event')}\n            </Link>\n          </p>\n        ) : (\n          <p>\n            <CreateSampleEventButton\n              priority=\"link\"\n              project={project}\n              source=\"issues_list\"\n              disabled={!project}\n              title={\n                !project ? t('Select a project to create a sample event') : undefined\n              }\n            >\n              {t('Create a sample event')}\n            </CreateSampleEventButton>\n          </p>\n        );\n    }\n\n    return (\n      <ErrorRobotWrapper\n        data-test-id=\"awaiting-events\"\n        className=\"awaiting-events\"\n        gradient={gradient}\n      >\n        <Robot aria-hidden>\n          <Eye />\n        </Robot>\n        <MessageContainer>\n          <h3>{t('Waiting for events…')}</h3>\n          <p>\n            {tct(\n              'Our error robot is waiting to [strike:devour] receive your first event.',\n              {\n                strike: <Strikethrough />,\n              }\n            )}\n          </p>\n          <p>\n            {project && (\n              <Button\n                data-test-id=\"install-instructions\"\n                priority=\"primary\"\n                to={`/${org.slug}/${project.slug}/getting-started/${\n                  project.platform || ''\n                }`}\n              >\n                {t('Installation Instructions')}\n              </Button>\n            )}\n          </p>\n          {sampleLink}\n        </MessageContainer>\n      </ErrorRobotWrapper>\n    );\n  }\n}\n\nexport {ErrorRobot};\n\nexport default withApi(ErrorRobot);\n\nconst ErrorRobotWrapper = styled('div')<{gradient: boolean}>`\n  display: flex;\n  justify-content: center;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.08);\n  border-radius: 0 0 3px 3px;\n  padding: 40px ${space(3)} ${space(3)};\n  min-height: 260px;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    flex-direction: column;\n    align-items: center;\n    padding: ${space(3)};\n    text-align: center;\n  }\n`;\n\nconst Robot = styled('div')`\n  display: block;\n  position: relative;\n  width: 220px;\n  height: 260px;\n  background: url(${robotBackground});\n  background-size: cover;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: 110px;\n    height: 130px;\n  }\n`;\n\nconst Eye = styled('span')`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  position: absolute;\n  top: 70px;\n  left: 81px;\n  transform: translateZ(0);\n  animation: blink-eye 0.6s infinite;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    width: 6px;\n    height: 6px;\n    top: 35px;\n    left: 41px;\n  }\n\n  @keyframes blink-eye {\n    0% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n\n    50% {\n      background: #4a4d67;\n      box-shadow: none;\n    }\n\n    100% {\n      background: #e03e2f;\n      box-shadow: 0 0 10px #e03e2f;\n    }\n  }\n`;\n\nconst MessageContainer = styled('div')`\n  align-self: center;\n  max-width: 480px;\n  margin-left: 40px;\n\n  @media (max-width: ${p => p.theme.breakpoints[0]}) {\n    margin: 0;\n  }\n`;\n\nconst Strikethrough = styled('span')`\n  text-decoration: line-through;\n`;\n","import * as React from 'react';\nimport {browserHistory} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAdhocEvent, trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = React.ComponentProps<typeof Button> & {\n  api: Client;\n  organization: Organization;\n  project?: Project;\n  source: string;\n};\n\ntype State = {\n  creating: boolean;\n};\n\nconst EVENT_POLL_RETRIES = 15;\nconst EVENT_POLL_INTERVAL = 1000;\n\nasync function latestEventAvailable(\n  api: Client,\n  groupID: string\n): Promise<{eventCreated: boolean; retries: number}> {\n  let retries = 0;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (retries > EVENT_POLL_RETRIES) {\n      return {eventCreated: false, retries: retries - 1};\n    }\n    await new Promise(resolve => setTimeout(resolve, EVENT_POLL_INTERVAL));\n    try {\n      await api.requestPromise(`/issues/${groupID}/events/latest/`);\n      return {eventCreated: true, retries};\n    } catch {\n      ++retries;\n    }\n  }\n}\n\nclass CreateSampleEventButton extends React.Component<Props, State> {\n  state: State = {\n    creating: false,\n  };\n\n  componentDidMount() {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdhocEvent({\n      eventKey: 'sample_event.button_viewed',\n      org_id: organization.id,\n      project_id: project.id,\n      source,\n    });\n  }\n\n  recordAnalytics({eventCreated, retries, duration}) {\n    const {organization, project, source} = this.props;\n\n    if (!project) {\n      return;\n    }\n\n    const eventKey = `sample_event.${eventCreated ? 'created' : 'failed'}`;\n    const eventName = `Sample Event ${eventCreated ? 'Created' : 'Failed'}`;\n\n    trackAnalyticsEvent({\n      eventKey,\n      eventName,\n      organization_id: organization.id,\n      project_id: project.id,\n      platform: project.platform || '',\n      interval: EVENT_POLL_INTERVAL,\n      retries,\n      duration,\n      source,\n    });\n  }\n\n  createSampleGroup = async () => {\n    // TODO(dena): swap out for action creator\n    const {api, organization, project} = this.props;\n    let eventData;\n\n    if (!project) {\n      return;\n    }\n\n    trackAdvancedAnalyticsEvent('growth.onboarding_view_sample_event', {\n      platform: project.platform,\n      organization,\n    });\n\n    addLoadingMessage(t('Processing sample event...'), {\n      duration: EVENT_POLL_RETRIES * EVENT_POLL_INTERVAL,\n    });\n    this.setState({creating: true});\n\n    try {\n      const url = `/projects/${organization.slug}/${project.slug}/create-sample/`;\n      eventData = await api.requestPromise(url, {method: 'POST'});\n    } catch (error) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', error);\n        Sentry.captureException(new Error('Failed to create sample event'));\n      });\n      this.setState({creating: false});\n      clearIndicators();\n      addErrorMessage(t('Failed to create a new sample event'));\n      return;\n    }\n\n    // Wait for the event to be fully processed and available on the group\n    // before redirecting.\n    const t0 = performance.now();\n    const {eventCreated, retries} = await latestEventAvailable(api, eventData.groupID);\n    const t1 = performance.now();\n\n    clearIndicators();\n    this.setState({creating: false});\n\n    const duration = Math.ceil(t1 - t0);\n    this.recordAnalytics({eventCreated, retries, duration});\n\n    if (!eventCreated) {\n      addErrorMessage(t('Failed to load sample event'));\n\n      Sentry.withScope(scope => {\n        scope.setTag('groupID', eventData.groupID);\n        scope.setTag('platform', project.platform || '');\n        scope.setTag('interval', EVENT_POLL_INTERVAL.toString());\n        scope.setTag('retries', retries.toString());\n        scope.setTag('duration', duration.toString());\n\n        scope.setLevel(Sentry.Severity.Warning);\n        Sentry.captureMessage('Failed to load sample event');\n      });\n      return;\n    }\n\n    browserHistory.push(\n      `/organizations/${organization.slug}/issues/${eventData.groupID}/?project=${project.id}`\n    );\n  };\n\n  render() {\n    const {\n      api: _api,\n      organization: _organization,\n      project: _project,\n      source: _source,\n      ...props\n    } = this.props;\n    const {creating} = this.state;\n\n    return (\n      <Button\n        {...props}\n        data-test-id=\"create-sample-event\"\n        disabled={props.disabled || creating}\n        onClick={this.createSampleGroup}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(CreateSampleEventButton));\n"],"names":["DemoSandboxButton","scenario","projectSlug","errorType","clientData","buttonProps","organization","useOrganization","url","URL","searchParams","append","clientOptions","skipEmail","acceptedTracking","JSON","stringify","external","href","toString","onClick","trackAdvancedAnalyticsEvent","ErrorRobot","Component","error","loading","sampleIssueId","this","props","componentDidMount","fetchData","logExperiment","key","org","project","state","defined","slug","setState","data","api","requestPromise","method","limit","length","id","err","responseJSON","detail","render","gradient","sampleLink","experiments","ViewSampleSandboxExperiment","size","priority","cta","title","t","shortTitle","window","location","to","source","disabled","undefined","ErrorRobotWrapper","className","Robot","Eye","MessageContainer","tct","strike","Strikethrough","platform","withApi","p","theme","fontSizeExtraLarge","space","breakpoints","robotBackground","EVENT_POLL_INTERVAL","CreateSampleEventButton","React","creating","async","eventData","addLoadingMessage","duration","EVENT_POLL_RETRIES","Sentry","scope","setExtra","Error","clearIndicators","addErrorMessage","t0","performance","now","eventCreated","retries","groupID","Promise","resolve","setTimeout","latestEventAvailable","t1","Math","ceil","recordAnalytics","setTag","setLevel","browserHistory","trackAdhocEvent","eventKey","org_id","project_id","eventName","trackAnalyticsEvent","organization_id","interval","_api","_organization","_project","_source","createSampleGroup","withOrganization"],"sourceRoot":""}