{"version":3,"file":"chunks/app_components_banner_tsx-app_views_eventsV2_savedQuery_utils_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/discoverSavedQueries.tsx","webpack:///./app/components/banner.tsx","webpack:///./app/views/dashboardsV2/types.tsx","webpack:///./app/views/eventsV2/savedQuery/utils.tsx"],"sourcesContent":["import {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {NewQuery, SavedQuery} from 'sentry/types';\n\nexport function fetchSavedQueries(\n  api: Client,\n  orgId: string,\n  query: string = ''\n): Promise<SavedQuery[]> {\n  const promise: Promise<SavedQuery[]> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/`,\n    {\n      method: 'GET',\n      query: {query: `version:2 ${query}`.trim()},\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to load saved queries'));\n  });\n  return promise;\n}\n\nexport function fetchSavedQuery(\n  api: Client,\n  orgId: string,\n  queryId: string\n): Promise<SavedQuery> {\n  const promise: Promise<SavedQuery> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${queryId}/`,\n    {\n      method: 'GET',\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to load saved query'));\n  });\n  return promise;\n}\n\nexport function createSavedQuery(\n  api: Client,\n  orgId: string,\n  query: NewQuery\n): Promise<SavedQuery> {\n  const promise: Promise<SavedQuery> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/`,\n    {\n      method: 'POST',\n      data: query,\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to create your saved query'));\n  });\n  return promise;\n}\n\nexport function updateSavedQuery(\n  api: Client,\n  orgId: string,\n  query: NewQuery\n): Promise<SavedQuery> {\n  const promise: Promise<SavedQuery> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${query.id}/`,\n    {\n      method: 'PUT',\n      data: query,\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to update your saved query'));\n  });\n  return promise;\n}\n\nexport function updateSavedQueryVisit(\n  orgId: string,\n  queryId: string | string[]\n): Promise<void> {\n  // Create a new client so the request is not cancelled\n  const api = new Client();\n  const promise = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${queryId}/visit/`,\n    {\n      method: 'POST',\n    }\n  );\n\n  return promise;\n}\n\nexport function deleteSavedQuery(\n  api: Client,\n  orgId: string,\n  queryId: string\n): Promise<void> {\n  const promise: Promise<void> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${queryId}/`,\n    {method: 'DELETE'}\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to delete the saved query'));\n  });\n  return promise;\n}\n","import * as React from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nconst makeKey = (prefix: string) => `${prefix}-banner-dismissed`;\n\nfunction dismissBanner(bannerKey: string) {\n  localStorage.setItem(makeKey(bannerKey), 'true');\n}\n\nfunction useDismissable(bannerKey: string) {\n  const key = makeKey(bannerKey);\n  const [value, setValue] = React.useState(localStorage.getItem(key));\n\n  const dismiss = () => {\n    setValue('true');\n    dismissBanner(bannerKey);\n  };\n\n  return [value === 'true', dismiss] as const;\n}\n\ntype BannerWrapperProps = {\n  backgroundImg?: string;\n  backgroundComponent?: React.ReactNode;\n};\n\ntype Props = BannerWrapperProps & {\n  title?: string;\n  subtitle?: string;\n  isDismissable?: boolean;\n  dismissKey?: string;\n  className?: string;\n};\n\ntype BannerType = React.FC<Props> & {\n  /**\n   * Helper function to hide banners outside of their usage\n   */\n  dismiss: typeof dismissBanner;\n};\n\nconst Banner: BannerType = ({\n  title,\n  subtitle,\n  isDismissable = true,\n  dismissKey = 'generic-banner',\n  className,\n  backgroundImg,\n  backgroundComponent,\n  children,\n}) => {\n  const [dismissed, dismiss] = useDismissable(dismissKey);\n\n  if (dismissed) {\n    return null;\n  }\n\n  return (\n    <BannerWrapper backgroundImg={backgroundImg} className={className}>\n      {backgroundComponent}\n      {isDismissable ? <CloseButton onClick={dismiss} aria-label={t('Close')} /> : null}\n      <BannerContent>\n        <BannerTitle>{title}</BannerTitle>\n        <BannerSubtitle>{subtitle}</BannerSubtitle>\n        <StyledButtonBar gap={1}>{children}</StyledButtonBar>\n      </BannerContent>\n    </BannerWrapper>\n  );\n};\n\nBanner.dismiss = dismissBanner;\n\nconst BannerWrapper = styled('div')<BannerWrapperProps>`\n  ${p =>\n    p.backgroundImg\n      ? css`\n          background: url(${p.backgroundImg});\n          background-repeat: no-repeat;\n          background-size: cover;\n          background-position: center center;\n        `\n      : css`\n          background-color: ${p.theme.gray500};\n        `}\n  display: flex;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  margin-bottom: ${space(2)};\n  box-shadow: ${p => p.theme.dropShadowLight};\n  border-radius: ${p => p.theme.borderRadius};\n  height: 180px;\n  color: ${p => p.theme.white};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    height: 220px;\n  }\n`;\n\nconst BannerContent = styled('div')`\n  position: absolute;\n  display: grid;\n  justify-items: center;\n  grid-template-rows: repeat(3, max-content);\n  text-align: center;\n  padding: ${space(4)};\n`;\n\nconst BannerTitle = styled('h1')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    font-size: 40px;\n  }\n`;\n\nconst BannerSubtitle = styled('div')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    font-size: ${p => p.theme.fontSizeExtraLarge};\n  }\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(2)};\n  width: fit-content;\n`;\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  display: block;\n  top: ${space(2)};\n  right: ${space(2)};\n  color: ${p => p.theme.white};\n  cursor: pointer;\n  z-index: 1;\n`;\n\nCloseButton.defaultProps = {\n  icon: <IconClose />,\n  label: t('Close'),\n  priority: 'link',\n  borderless: true,\n  size: 'xsmall',\n};\n\nexport default Banner;\n","import {User} from 'sentry/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  STACKED_AREA = 'stacked_area',\n  TOP_N = 'top_n',\n}\n\nexport enum WidgetType {\n  DISCOVER = 'discover',\n  ISSUE = 'issue',\n}\n\nexport type WidgetQuery = {\n  name: string;\n  fields: string[];\n  conditions: string;\n  orderby: string;\n};\n\nexport type Widget = {\n  id?: string;\n  title: string;\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n  widgetType?: WidgetType;\n  tempId?: string;\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  dateCreated?: string;\n  createdBy?: User;\n  widgetDisplay: DisplayType[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  title: string;\n  widgets: Widget[];\n  id: string;\n  dateCreated: string;\n  createdBy?: User;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n  PREVIEW = 'preview',\n}\n\n// where we launch the dashboard widget from\nexport enum DashboardWidgetSource {\n  DISCOVERV2 = 'discoverv2',\n  DASHBOARDS = 'dashboards',\n  LIBRARY = 'library',\n  ISSUE_DETAILS = 'issueDetail',\n}\n","import {\n  createSavedQuery,\n  deleteSavedQuery,\n  updateSavedQuery,\n} from 'sentry/actionCreators/discoverSavedQueries';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {NewQuery, Organization, SavedQuery} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DisplayModes} from 'sentry/utils/discover/types';\nimport {DisplayType} from 'sentry/views/dashboardsV2/types';\n\nexport function handleCreateQuery(\n  api: Client,\n  organization: Organization,\n  eventView: EventView,\n  yAxis: string[],\n  // True if this is a brand new query being saved\n  // False if this is a modification from a saved query\n  isNewQuery: boolean = true\n): Promise<SavedQuery> {\n  const payload = eventView.toNewQuery();\n  payload.yAxis = yAxis;\n\n  trackAnalyticsEvent({\n    ...getAnalyticsCreateEventKeyName(isNewQuery, 'request'),\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(payload),\n  });\n\n  const promise = createSavedQuery(api, organization.slug, payload);\n\n  promise\n    .then((savedQuery: SavedQuery) => {\n      addSuccessMessage(t('Query saved'));\n\n      trackAnalyticsEvent({\n        ...getAnalyticsCreateEventKeyName(isNewQuery, 'success'),\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n      });\n\n      return savedQuery;\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query not saved'));\n\n      trackAnalyticsEvent({\n        ...getAnalyticsCreateEventKeyName(isNewQuery, 'failed'),\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n        error:\n          (err && err.message) ||\n          `Could not save a ${isNewQuery ? 'new' : 'existing'} query`,\n      });\n    });\n\n  return promise;\n}\n\nconst EVENT_NAME_EXISTING_MAP = {\n  request: 'Discoverv2: Request to save a saved query as a new query',\n  success: 'Discoverv2: Successfully saved a saved query as a new query',\n  failed: 'Discoverv2: Failed to save a saved query as a new query',\n};\nconst EVENT_NAME_NEW_MAP = {\n  request: 'Discoverv2: Request to save a new query',\n  success: 'Discoverv2: Successfully saved a new query',\n  failed: 'Discoverv2: Failed to save a new query',\n};\n\nexport function handleUpdateQuery(\n  api: Client,\n  organization: Organization,\n  eventView: EventView,\n  yAxis: string[]\n): Promise<SavedQuery> {\n  const payload = eventView.toNewQuery();\n  payload.yAxis = yAxis;\n\n  if (!eventView.name) {\n    addErrorMessage(t('Please name your query'));\n    return Promise.reject();\n  }\n\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.update_query_request',\n    eventName: 'Discoverv2: Request to update a saved query',\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(payload),\n  });\n\n  const promise = updateSavedQuery(api, organization.slug, payload);\n\n  promise\n    .then((savedQuery: SavedQuery) => {\n      addSuccessMessage(t('Query updated'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_success',\n        eventName: 'Discoverv2: Successfully updated a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n      });\n      // NOTE: there is no need to convert _saved into an EventView and push it\n      //       to the browser history, since this.props.eventView already\n      //       derives from location.\n\n      return savedQuery;\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query not updated'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_failed',\n        eventName: 'Discoverv2: Failed to update a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n        error: (err && err.message) || 'Failed to update a query',\n      });\n    });\n\n  return promise;\n}\n\n/**\n * Essentially the same as handleUpdateQuery, but specifically for changing the\n * name of the query\n */\nexport function handleUpdateQueryName(\n  api: Client,\n  organization: Organization,\n  eventView: EventView\n) {\n  const payload = eventView.toNewQuery();\n\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.update_query_name_request',\n    eventName: \"Discoverv2: Request to update a saved query's name\",\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(payload),\n  });\n\n  const promise = updateSavedQuery(api, organization.slug, payload);\n\n  promise\n    .then(_saved => {\n      addSuccessMessage(t('Query name saved'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_name_success',\n        eventName: \"Discoverv2: Successfully updated a saved query's name\",\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n      });\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query name not saved'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_failed',\n        eventName: \"Discoverv2: Failed to update a saved query's name\",\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n        error: (err && err.message) || 'Failed to update a query name',\n      });\n    });\n\n  return promise;\n}\n\nexport function handleDeleteQuery(\n  api: Client,\n  organization: Organization,\n  eventView: EventView\n): Promise<void> {\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.delete_query_request',\n    eventName: 'Discoverv2: Request to delete a saved query',\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(eventView.toNewQuery()),\n  });\n\n  const promise = deleteSavedQuery(api, organization.slug, eventView.id!);\n\n  promise\n    .then(() => {\n      addSuccessMessage(t('Query deleted'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.delete_query_success',\n        eventName: 'Discoverv2: Successfully deleted a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(eventView.toNewQuery()),\n      });\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query not deleted'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.delete_query_failed',\n        eventName: 'Discoverv2: Failed to delete a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(eventView.toNewQuery()),\n        error: (err && err.message) || 'Failed to delete query',\n      });\n    });\n\n  return promise;\n}\n\nexport function getAnalyticsCreateEventKeyName(\n  // True if this is a brand new query being saved\n  // False if this is a modification from a saved query\n  isNewQuery: boolean,\n  type: 'request' | 'success' | 'failed'\n) {\n  const eventKey = isNewQuery\n    ? 'discover_v2.save_new_query_' + type\n    : 'discover_v2.save_existing_query_' + type;\n\n  const eventName = isNewQuery ? EVENT_NAME_NEW_MAP[type] : EVENT_NAME_EXISTING_MAP[type];\n\n  return {\n    eventKey,\n    eventName,\n  };\n}\n\n/**\n * Takes in a DiscoverV2 NewQuery object and returns a Partial containing\n * the desired fields to populate into reload analytics\n */\nexport function extractAnalyticsQueryFields(payload: NewQuery): Partial<NewQuery> {\n  const {projects, fields, query} = payload;\n  return {\n    projects,\n    fields,\n    query,\n  };\n}\n\nexport function displayModeToDisplayType(displayMode: DisplayModes): DisplayType {\n  switch (displayMode) {\n    case DisplayModes.BAR:\n      return DisplayType.BAR;\n    case DisplayModes.WORLDMAP:\n      return DisplayType.WORLD_MAP;\n    case DisplayModes.TOP5:\n      return DisplayType.TOP_N;\n    default:\n      return DisplayType.LINE;\n  }\n}\n"],"names":["fetchSavedQuery","api","orgId","queryId","promise","requestPromise","method","catch","addErrorMessage","t","createSavedQuery","query","data","updateSavedQuery","id","updateSavedQueryVisit","Client","deleteSavedQuery","makeKey","prefix","dismissBanner","bannerKey","localStorage","setItem","Banner","title","subtitle","isDismissable","dismissKey","className","backgroundImg","backgroundComponent","children","dismissed","dismiss","key","value","setValue","React","getItem","useDismissable","BannerWrapper","CloseButton","onClick","BannerContent","BannerTitle","BannerSubtitle","StyledButtonBar","gap","p","css","theme","gray500","space","dropShadowLight","borderRadius","white","breakpoints","fontSizeExtraLarge","ButtonBar","Button","defaultProps","icon","label","priority","borderless","size","MAX_WIDGETS","DisplayType","WidgetType","DashboardState","DashboardWidgetSource","handleCreateQuery","organization","eventView","yAxis","isNewQuery","payload","toNewQuery","trackAnalyticsEvent","getAnalyticsCreateEventKeyName","organization_id","parseInt","extractAnalyticsQueryFields","slug","then","savedQuery","addSuccessMessage","err","error","message","EVENT_NAME_EXISTING_MAP","request","success","failed","EVENT_NAME_NEW_MAP","handleUpdateQuery","name","Promise","reject","eventKey","eventName","handleUpdateQueryName","_saved","handleDeleteQuery","type","projects","fields","displayModeToDisplayType","displayMode","DisplayModes"],"sourceRoot":""}