{"version":3,"file":"chunks/app_actions_organizationActions_tsx-app_components_modals_commandPalette_tsx-app_data_forms_a-09c38c.xxxxxxxxxxxxxxxxxxxx.js","mappings":"yRAEA,MAEA,E,MAF4BA,GAAAA,cAAqB,CAAC,QAAS,gBAAiB,Y,uvBCS5E,SAASC,GAAe,KAACC,IACvB,MAAMC,GAAQC,EAAAA,EAAAA,KAId,OAFAC,EAAAA,EAAAA,YAAU,MAAWC,EAAAA,EAAAA,IAAU,kBAAmB,MAAK,KAGrD,QAACJ,EAAD,WACE,QAAC,KAAD,UACG,EAAEK,IAAKC,MACN,QAAC,IAAD,CACEC,WAAW,kBACXC,UAAW,EACXC,WAAY,GACZC,cAAeJ,EAAF,qTAOeL,EAAMU,QAElCC,YAAa,EAAEC,cAAAA,MACb,QAACC,EAAD,WACE,QAACC,EAAD,CACEC,WAAS,KACLH,EAAc,CAChBI,KAAM,OACNC,aAAaC,EAAAA,EAAAA,GAAE,4DA5B1BpB,EAAAA,YAAAA,iBAwCT,UAEaqB,EAAW,CAAH,uDAMfN,GAAe,OAAO,MAAP,sBAAH,YACLO,EAAAA,EAAAA,GAAM,KADD,KAIZN,GAAc,OAAOO,EAAAA,EAAP,sBAAH,uBAEJD,EAAAA,EAAAA,GAAM,GAFF,iI,sGC5DV,MAAME,EAAQ,4BAqBrB,EAnBqC,CACnC,CAEEC,MAAO,uBACPC,OAAQ,CACN,CACEC,KAAM,QACNT,KAAM,SAGNU,MAAO,mBACPT,YAAa,6BACbU,KAAM,kDACNC,kBAAkB,O,kVCuB1B,MAAMC,EAA2E,CAC/EC,UAAW,GACXC,SAAS,EAETC,OACEC,KAAKC,QAELD,KAAKE,SAASC,EAAAA,EAAAA,eAA+BH,KAAKI,WAClDJ,KAAKE,SAASC,EAAAA,EAAAA,WAA2BH,KAAKK,cAC9CL,KAAKE,SAASC,EAAAA,EAAAA,cAA8BH,KAAKM,iBACjDN,KAAKE,SAASC,EAAAA,EAAAA,aAA6BH,KAAKO,iBAChDP,KAAKE,SAASC,EAAAA,EAAAA,iBAAiCH,KAAKQ,oBACpDR,KAAKE,SAASC,EAAAA,EAAAA,kBAAkCH,KAAKS,cACrDT,KAAKE,SAASC,EAAAA,EAAAA,MAAsBH,KAAKC,OACzCD,KAAKE,SAASC,EAAAA,EAAAA,cAA8BH,KAAKU,iBAEjDV,KAAKE,SAASS,EAAAA,EAAAA,kBAA+BX,KAAKY,eAGpDX,QACED,KAAKH,UAAY,GACjBG,KAAKF,SAAU,GAGjBS,gBAAgBM,GACd,MAAMC,EAAUD,EAAME,KAAIC,GAAW,CAACA,EAAQC,GAAID,KAElDhB,KAAKH,UAAYqB,OAAOC,YAAYL,GACpCd,KAAKF,SAAU,EAEfE,KAAKoB,QAAQ,IAAIC,IAAIH,OAAOI,KAAKtB,KAAKH,cAGxCQ,aAAakB,EAAkBC,GAC7B,MAAMC,EAAczB,KAAK0B,UAAUH,GAEnC,IAAKE,EACH,OAGF,MAAME,EAAa,IAAIF,EAAaG,KAAMJ,GAE1CxB,KAAKH,UAAY,IAAIG,KAAKH,UAAW,CAAC8B,EAAWV,IAAKU,GACtD3B,KAAKoB,QAAQ,IAAIC,IAAI,CAACI,EAAYR,OAGpCX,gBAAgBU,GACdhB,KAAKH,UAAY,IAAIG,KAAKH,UAAW,CAACmB,EAAQC,IAAKD,GACnDhB,KAAKoB,QAAQ,IAAIC,IAAI,CAACL,EAAQC,OAGhCP,gBAAgBmB,GACd,MAAMb,EAAUhB,KAAK8B,QAAQD,EAAKZ,IAElC,IAAKD,EACH,OAGF,MAAMW,EAAa,IAAIX,KAAYa,GAEnC7B,KAAKH,UAAY,IAAIG,KAAKH,UAAW,CAACmB,EAAQC,IAAKU,GACnD3B,KAAKoB,QAAQ,IAAIC,IAAI,CAACQ,EAAKZ,OAG7BT,mBAAmBqB,GACjB,MAAME,EAAUb,OAAOa,QAAQF,GAAQ,IAAIG,QACzC,EAAEC,KAAeA,KAAajC,KAAKH,YAIrCkC,EAAQG,SAAQ,EAAED,EAAWE,MAC3BnC,KAAKH,UAAUoC,GAAWE,MAAQA,KAGpC,MAAMC,EAAaL,EAAQhB,KAAI,EAAEkB,KAAeA,IAChDjC,KAAKoB,QAAQ,IAAIC,IAAIe,KAQvBxB,aAAayB,GAEX,MAAMC,EAAWtC,KAAKuC,SAASP,QAAO,EAAEQ,MAAAA,KACtCA,EAAMC,MAAK,EAAEb,KAAAA,KAAUA,IAASS,MAGlCC,EAASJ,SAAQlB,GAAWhB,KAAK0C,sBAAsBL,EAAUrB,KAEjE,MAAM2B,EAAqBL,EAASvB,KAAIC,GAAWA,EAAQC,KAC3DjB,KAAKoB,QAAQ,IAAIC,IAAIsB,KAGvBlC,aAAa4B,EAAkBO,GAC7B,MAAM5B,EAAUhB,KAAK0B,UAAUkB,GAE1B5B,IAILhB,KAAK0C,sBAAsBL,EAAUrB,GACrChB,KAAKoB,QAAQ,IAAIC,IAAI,CAACL,EAAQC,QAGhCb,UAAUyC,EAAYD,GACpB,MAAM5B,EAAUhB,KAAK0B,UAAUkB,GAG/B,IAAK5B,EACH,OAGF,MAAMW,EAAa,IAAIX,EAASwB,MAAO,IAAIxB,EAAQwB,MAAOK,IAE1D7C,KAAKH,UAAY,IAAIG,KAAKH,UAAW,CAACmB,EAAQC,IAAKU,GACnD3B,KAAKoB,QAAQ,IAAIC,IAAI,CAACL,EAAQC,OAIhCyB,sBAAsBL,EAAkBrB,GACtC,MAAM8B,EAAW9B,EAAQwB,MAAMR,QAAO,EAAEJ,KAAAA,KAAUA,IAASS,IACrDV,EAAa,IAAIX,EAASwB,MAAOM,GAEvC9C,KAAKH,UAAY,IAAIG,KAAKH,UAAW,CAACmB,EAAQC,IAAKU,IAGrDoB,YACE,OAAO/C,KAAKF,SAGdyC,SACE,OAAOrB,OAAO8B,OAAOhD,KAAKH,WAAWoD,MAAK,CAACC,EAAGC,IAAMD,EAAEtB,KAAKwB,cAAcD,EAAEvB,SAG7EE,QAAQb,GACN,OAAOjB,KAAKuC,SAASE,MAAKzB,GAAWA,EAAQC,KAAOA,KAGtDS,UAAUE,GACR,OAAO5B,KAAKuC,SAASE,MAAKzB,GAAWA,EAAQY,OAASA,KAGxDyB,WACE,MAAO,CACLf,SAAUtC,KAAKuC,SACfzC,QAASE,KAAKF,WAQpB,EAHsBlC,IAAAA,YAAmBgC,I,mDCjMzC,IAAI0D,EAAc,EAAQ,0CACtBC,EAAY,EAAQ,uCA+BxBC,EAAOC,QATP,SAAsBC,EAAOC,GAE3B,OADsB,MAATD,GAAoBA,EAAME,QAIvCD,OAAkBE,IAAVF,EAAsB,EAAIJ,EAAUI,GACrCL,EAAYI,EAAOC,IAHjB,K,+CC1BX,IAAIG,EAAa,EAAQ,yCACrBC,EAAe,EAAQ,0CAoC3BP,EAAOC,QALP,SAAkBO,GAChB,MAAuB,iBAATA,GACXD,EAAaC,IA9BF,mBA8BYF,EAAWE","sources":["webpack:///./app/actions/organizationActions.tsx","webpack:///./app/components/modals/commandPalette.tsx","webpack:///./app/data/forms/accountEmails.tsx","webpack:///./app/stores/projectsStore.tsx","webpack:///../node_modules/lodash/flattenDepth.js","webpack:///../node_modules/lodash/isNumber.js"],"sourcesContent":["import Reflux from 'reflux';\n\nconst OrganizationActions = Reflux.createActions(['reset', 'fetchOrgError', 'update']);\n\nexport default OrganizationActions;\n","import {useEffect} from 'react';\nimport {ClassNames, css, useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Search from 'sentry/components/search';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {analytics} from 'sentry/utils/analytics';\nimport Input from 'sentry/views/settings/components/forms/controls/input';\n\nfunction CommandPalette({Body}: ModalRenderProps) {\n  const theme = useTheme();\n\n  useEffect(() => void analytics('omnisearch.open', {}), []);\n\n  return (\n    <Body>\n      <ClassNames>\n        {({css: injectedCss}) => (\n          <Search\n            entryPoint=\"command_palette\"\n            minSearch={1}\n            maxResults={10}\n            dropdownStyle={injectedCss`\n                width: 100%;\n                border: transparent;\n                border-top-left-radius: 0;\n                border-top-right-radius: 0;\n                position: initial;\n                box-shadow: none;\n                border-top: 1px solid ${theme.border};\n              `}\n            renderInput={({getInputProps}) => (\n              <InputWrapper>\n                <StyledInput\n                  autoFocus\n                  {...getInputProps({\n                    type: 'text',\n                    placeholder: t('Search for projects, teams, settings, etc...'),\n                  })}\n                />\n              </InputWrapper>\n            )}\n          />\n        )}\n      </ClassNames>\n    </Body>\n  );\n}\n\nexport default CommandPalette;\n\nexport const modalCss = css`\n  [role='document'] {\n    padding: 0;\n  }\n`;\n\nconst InputWrapper = styled('div')`\n  padding: ${space(0.25)};\n`;\n\nconst StyledInput = styled(Input)`\n  width: 100%;\n  padding: ${space(1)};\n  border-radius: 8px;\n\n  outline: none;\n  border: none;\n  box-shadow: none;\n\n  :focus,\n  :active,\n  :hover {\n    outline: none;\n    border: none;\n    box-shadow: none;\n  }\n`;\n","import {JsonFormObject} from 'sentry/views/settings/components/forms/type';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/account/emails/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Add Secondary Emails',\n    fields: [\n      {\n        name: 'email',\n        type: 'string',\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Additional Email',\n        placeholder: 'e.g. secondary@example.com',\n        help: 'Designate an alternative email for this account',\n        showReturnButton: true,\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","import Reflux from 'reflux';\n\nimport ProjectActions from 'sentry/actions/projectActions';\nimport TeamActions from 'sentry/actions/teamActions';\nimport {Project, Team} from 'sentry/types';\n\nimport {CommonStoreInterface} from './types';\n\ntype State = {\n  projects: Project[];\n  loading: boolean;\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype Internals = {\n  removeTeamFromProject(teamSlug: string, project: Project): void;\n  itemsById: Record<string, Project>;\n  loading: boolean;\n};\n\ntype ProjectsStoreInterface = CommonStoreInterface<State> & {\n  init(): void;\n  reset(): void;\n  loadInitialData(projects: Project[]): void;\n  onStatsLoadSuccess(data: StatsData): void;\n  onChangeSlug(prevSlug: string, newSlug: string): void;\n  onCreateSuccess(project: Project): void;\n  onUpdateSuccess(data: Partial<Project>): void;\n  onDeleteTeam(slug: string): void;\n  onRemoveTeam(teamSlug: string, projectSlug: string): void;\n  onAddTeam(team: Team, projectSlug: string): void;\n  isLoading(): boolean;\n  getAll(): Project[];\n  getById(id?: string): Project | undefined;\n  getBySlug(slug?: string): Project | undefined;\n};\n\nconst storeConfig: Reflux.StoreDefinition & Internals & ProjectsStoreInterface = {\n  itemsById: {},\n  loading: true,\n\n  init() {\n    this.reset();\n\n    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);\n    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);\n    this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);\n    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);\n    this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);\n    this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);\n    this.listenTo(ProjectActions.reset, this.reset);\n    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);\n\n    this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    const mapping = items.map(project => [project.id, project] as const);\n\n    this.itemsById = Object.fromEntries(mapping);\n    this.loading = false;\n\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {...prevProject, slug: newSlug};\n\n    this.itemsById = {...this.itemsById, [newProject.id]: newProject};\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {...this.itemsById, [project.id]: project};\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n\n    if (!project) {\n      return;\n    }\n\n    const newProject = {...project, ...data};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const entries = Object.entries(data || {}).filter(\n      ([projectId]) => projectId in this.itemsById\n    );\n\n    // Assign stats into projects\n    entries.forEach(([projectId, stats]) => {\n      this.itemsById[projectId].stats = stats;\n    });\n\n    const touchedIds = entries.map(([projectId]) => projectId);\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projects = this.getAll().filter(({teams}) =>\n      teams.find(({slug}) => slug === teamSlug)\n    );\n\n    projects.forEach(project => this.removeTeamFromProject(teamSlug, project));\n\n    const affectedProjectIds = projects.map(project => project.id);\n    this.trigger(new Set(affectedProjectIds));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    const newProject = {...project, teams: [...project.teams, team]};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n    const newProject = {...project, teams: newTeams};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n  },\n\n  isLoading() {\n    return this.loading;\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a, b) => a.slug.localeCompare(b.slug));\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getState() {\n    return {\n      projects: this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\nconst ProjectsStore = Reflux.createStore(storeConfig) as Reflux.Store &\n  ProjectsStoreInterface;\n\nexport default ProjectsStore;\n","var baseFlatten = require('./_baseFlatten'),\n    toInteger = require('./toInteger');\n\n/**\n * Recursively flatten `array` up to `depth` times.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * var array = [1, [2, [3, [4]], 5]];\n *\n * _.flattenDepth(array, 1);\n * // => [1, 2, [3, [4]], 5]\n *\n * _.flattenDepth(array, 2);\n * // => [1, 2, 3, [4], 5]\n */\nfunction flattenDepth(array, depth) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  depth = depth === undefined ? 1 : toInteger(depth);\n  return baseFlatten(array, depth);\n}\n\nmodule.exports = flattenDepth;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @example\n *\n * _.isNumber(3);\n * // => true\n *\n * _.isNumber(Number.MIN_VALUE);\n * // => true\n *\n * _.isNumber(Infinity);\n * // => true\n *\n * _.isNumber('3');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' ||\n    (isObjectLike(value) && baseGetTag(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n"],"names":["Reflux","CommandPalette","Body","theme","useTheme","useEffect","analytics","css","injectedCss","entryPoint","minSearch","maxResults","dropdownStyle","border","renderInput","getInputProps","InputWrapper","StyledInput","autoFocus","type","placeholder","t","modalCss","space","Input","route","title","fields","name","label","help","showReturnButton","storeConfig","itemsById","loading","init","this","reset","listenTo","ProjectActions","onAddTeam","onChangeSlug","onCreateSuccess","loadInitialData","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","TeamActions","onDeleteTeam","items","mapping","map","project","id","Object","fromEntries","trigger","Set","keys","prevSlug","newSlug","prevProject","getBySlug","newProject","slug","data","getById","entries","filter","projectId","forEach","stats","touchedIds","teamSlug","projects","getAll","teams","find","removeTeamFromProject","affectedProjectIds","projectSlug","team","newTeams","isLoading","values","sort","a","b","localeCompare","getState","baseFlatten","toInteger","module","exports","array","depth","length","undefined","baseGetTag","isObjectLike","value"],"sourceRoot":""}