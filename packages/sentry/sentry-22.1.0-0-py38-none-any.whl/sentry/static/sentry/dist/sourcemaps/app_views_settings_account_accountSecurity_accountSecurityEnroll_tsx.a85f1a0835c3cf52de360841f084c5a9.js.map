{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_accountSecurityEnroll_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/u2f/webAuthnHelper.tsx","webpack:///./app/components/u2f/u2finterface.tsx","webpack:///./app/components/u2f/u2fsign.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/accountSecurityEnroll.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx"],"sourcesContent":["// Copyright (c) 2019 GitHub, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\n// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n// DEALINGS IN THE SOFTWARE.\n\n// below is from https://github.com/github/webauthn-json/tree/66322fc5c12184c5269691ab5abaac79545a3916\n\nexport function base64urlToBuffer(baseurl64String: string): ArrayBuffer {\n  // Base64url to Base64\n  const padding = '=='.slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String = baseurl64String.replace(/-/g, '+').replace(/_/g, '/') + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): string {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = '';\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n  return base64urlString;\n}\n","import * as React from 'react';\nimport * as Sentry from '@sentry/react';\nimport * as cbor from 'cbor-web';\nimport u2f from 'u2f-api';\n\nimport {base64urlToBuffer, bufferToBase64url} from 'sentry/components/u2f/webAuthnHelper';\nimport {t, tct} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ChallengeData, Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype TapParams = {\n  response: string;\n  challenge: string;\n};\n\ntype Props = {\n  organization: Organization;\n  challengeData: ChallengeData;\n  isWebauthnSigninFFEnabled: boolean;\n  flowMode: string;\n  silentIfUnsupported: boolean;\n  onTap: ({response, challenge}: TapParams) => Promise<void>;\n  style?: React.CSSProperties;\n};\n\ntype State = {\n  responseElement: HTMLInputElement | null;\n  formElement: HTMLFormElement | null;\n  challengeElement: HTMLInputElement | null;\n  isSupported: boolean | null;\n  hasBeenTapped: boolean;\n  deviceFailure: string | null;\n  isSafari: boolean;\n  failCount: number;\n};\n\nclass U2fInterface extends React.Component<Props, State> {\n  state: State = {\n    isSupported: null,\n    formElement: null,\n    challengeElement: null,\n    hasBeenTapped: false,\n    deviceFailure: null,\n    responseElement: null,\n    isSafari: false,\n    failCount: 0,\n  };\n\n  async componentDidMount() {\n    const supported = this.props.isWebauthnSigninFFEnabled\n      ? !!window.PublicKeyCredential\n      : await u2f.isSupported();\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({isSupported: supported});\n\n    const isSafari =\n      navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome');\n\n    if (isSafari) {\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        deviceFailure: 'safari: requires interaction',\n        isSafari,\n        hasBeenTapped: false,\n      });\n    }\n\n    if (supported && !isSafari) {\n      this.invokeU2fFlow();\n    }\n  }\n\n  getU2FResponse(data) {\n    if (!data.response) {\n      return JSON.stringify(data);\n    }\n\n    if (this.props.flowMode === 'sign') {\n      const authenticatorData = {\n        keyHandle: data.id,\n        clientData: bufferToBase64url(data.response.clientDataJSON),\n        signatureData: bufferToBase64url(data.response.signature),\n        authenticatorData: bufferToBase64url(data.response.authenticatorData),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n    if (this.props.flowMode === 'enroll') {\n      const authenticatorData = {\n        id: data.id,\n        rawId: bufferToBase64url(data.rawId),\n        response: {\n          attestationObject: bufferToBase64url(data.response.attestationObject),\n          clientDataJSON: bufferToBase64url(data.response.clientDataJSON),\n        },\n        type: bufferToBase64url(data.type),\n      };\n      return JSON.stringify(authenticatorData);\n    }\n\n    throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n  }\n\n  submitU2fResponse(promise) {\n    promise\n      .then(data => {\n        this.setState(\n          {\n            hasBeenTapped: true,\n          },\n          () => {\n            const u2fResponse = this.getU2FResponse(data);\n            const challenge = JSON.stringify(this.props.challengeData);\n\n            if (this.state.responseElement) {\n              // eslint-disable-next-line react/no-direct-mutation-state\n              this.state.responseElement.value = u2fResponse;\n            }\n\n            if (!this.props.onTap) {\n              this.state.formElement?.submit();\n              return;\n            }\n\n            this.props\n              .onTap({\n                response: u2fResponse,\n                challenge,\n              })\n              .catch(() => {\n                // This is kind of gross but I want to limit the amount of changes to this component\n                this.setState({\n                  deviceFailure: 'UNKNOWN_ERROR',\n                  hasBeenTapped: false,\n                });\n              });\n          }\n        );\n      })\n      .catch(err => {\n        let failure = 'DEVICE_ERROR';\n        // in some rare cases there is no metadata on the error which\n        // causes this to blow up badly.\n        if (err.metaData) {\n          if (err.metaData.type === 'DEVICE_INELIGIBLE') {\n            if (this.props.flowMode === 'enroll') {\n              failure = 'DUPLICATE_DEVICE';\n            } else {\n              failure = 'UNKNOWN_DEVICE';\n            }\n          } else if (err.metaData.type === 'BAD_REQUEST') {\n            failure = 'BAD_APPID';\n          }\n        }\n        // we want to know what is happening here.  There are some indicators\n        // that users are getting errors that should not happen through the\n        // regular u2f flow.\n        Sentry.captureException(err);\n        this.setState({\n          deviceFailure: failure,\n          hasBeenTapped: false,\n          failCount: this.state.failCount + 1,\n        });\n      });\n  }\n\n  webAuthnSignIn(publicKeyCredentialRequestOptions) {\n    const promise = navigator.credentials.get({\n      publicKey: publicKeyCredentialRequestOptions,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  webAuthnRegister(publicKey) {\n    const promise = navigator.credentials.create({\n      publicKey,\n    });\n    this.submitU2fResponse(promise);\n  }\n\n  invokeU2fFlow() {\n    let promise: Promise<u2f.SignResponse | u2f.RegisterResponse>;\n    if (this.props.flowMode === 'sign') {\n      if (this.props.isWebauthnSigninFFEnabled) {\n        const challengeArray = base64urlToBuffer(\n          this.props.challengeData.webAuthnAuthenticationData\n        );\n        const challenge = cbor.decodeFirst(challengeArray);\n        challenge\n          .then(data => {\n            this.webAuthnSignIn(data);\n          })\n          .catch(err => {\n            const failure = 'DEVICE_ERROR';\n            Sentry.captureException(err);\n            this.setState({\n              deviceFailure: failure,\n              hasBeenTapped: false,\n            });\n          });\n      } else {\n        promise = u2f.sign(this.props.challengeData.authenticateRequests);\n        this.submitU2fResponse(promise);\n      }\n    } else if (this.props.flowMode === 'enroll') {\n      const {organization} = this.props;\n      if (organization.features.includes('webauthn-register')) {\n        const challengeArray = base64urlToBuffer(\n          this.props.challengeData.webAuthnRegisterData\n        );\n        const challenge = cbor.decodeFirst(challengeArray);\n        // challenge contains a PublicKeyCredentialRequestOptions object for webauthn registration\n        challenge\n          .then(data => {\n            this.webAuthnRegister(data.publicKey);\n          })\n          .catch(err => {\n            const failure = 'DEVICE_ERROR';\n            Sentry.captureException(err);\n            this.setState({\n              deviceFailure: failure,\n              hasBeenTapped: false,\n            });\n          });\n      } else {\n        const {registerRequests, registeredKeys} = this.props.challengeData;\n        promise = u2f.register(registerRequests as any, registeredKeys as any);\n        this.submitU2fResponse(promise);\n      }\n    } else {\n      throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);\n    }\n  }\n\n  onTryAgain = () => {\n    this.setState(\n      {hasBeenTapped: false, deviceFailure: null},\n      () => void this.invokeU2fFlow()\n    );\n  };\n\n  bindChallengeElement: React.RefCallback<HTMLInputElement> = ref => {\n    this.setState({\n      challengeElement: ref,\n      formElement: ref && ref.form,\n    });\n\n    if (ref) {\n      ref.value = JSON.stringify(this.props.challengeData);\n    }\n  };\n\n  bindResponseElement: React.RefCallback<HTMLInputElement> = ref =>\n    this.setState({responseElement: ref});\n\n  renderUnsupported() {\n    return this.props.silentIfUnsupported ? null : (\n      <div className=\"u2f-box\">\n        <div className=\"inner\">\n          <p className=\"error\">\n            {t(\n              `\n             Unfortunately your browser does not support U2F. You need to use\n             a different two-factor method or switch to a browser that supports\n             it (Google Chrome or Microsoft Edge).`\n            )}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  get canTryAgain() {\n    return this.state.deviceFailure !== 'BAD_APPID';\n  }\n\n  renderSafariWebAuthn = () => {\n    return (\n      <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n        {this.props.flowMode === 'enroll'\n          ? t('Enroll with WebAuthn')\n          : t('Sign in with WebAuthn')}\n      </a>\n    );\n  };\n\n  renderFailure = () => {\n    const {deviceFailure} = this.state;\n    const supportMail = ConfigStore.get('supportEmail');\n    const support = supportMail ? (\n      <a href={'mailto:' + supportMail}>{supportMail}</a>\n    ) : (\n      <span>{t('Support')}</span>\n    );\n    if (this.state.isSafari && this.state.failCount === 0) {\n      return this.renderSafariWebAuthn();\n    }\n    return (\n      <div className=\"failure-message\">\n        <div>\n          <strong>{t('Error: ')}</strong>{' '}\n          {\n            {\n              UNKNOWN_ERROR: t('There was an unknown problem, please try again'),\n              DEVICE_ERROR: t('Your U2F device reported an error.'),\n              DUPLICATE_DEVICE: t('This device is already registered with Sentry.'),\n              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),\n              BAD_APPID: tct(\n                '[p1:The Sentry server administrator modified the ' +\n                  'device registrations.]' +\n                  '[p2:You need to remove and re-add the device to continue ' +\n                  'using your U2F device. Use a different sign-in method or ' +\n                  'contact [support] for assistance.]',\n                {\n                  p1: <p />,\n                  p2: <p />,\n                  support,\n                }\n              ),\n            }[deviceFailure || '']\n          }\n        </div>\n        {this.canTryAgain && (\n          <div style={{marginTop: 18}}>\n            <a onClick={this.onTryAgain} className=\"btn btn-primary\">\n              {t('Try Again')}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  renderBody() {\n    return this.state.deviceFailure ? this.renderFailure() : this.props.children;\n  }\n\n  renderPrompt() {\n    const {style} = this.props;\n\n    return (\n      <div\n        style={style}\n        className={\n          'u2f-box' +\n          (this.state.hasBeenTapped ? ' tapped' : '') +\n          (this.state.deviceFailure\n            ? this.state.failCount === 0 && this.state.isSafari\n              ? ' loading-dots'\n              : ' device-failure'\n            : '')\n        }\n      >\n        <div className=\"device-animation-frame\">\n          <div className=\"device-failed\" />\n          <div className=\"device-animation\" />\n          <div className=\"loading-dots\">\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n            <span className=\"dot\" />\n          </div>\n        </div>\n        <input type=\"hidden\" name=\"challenge\" ref={this.bindChallengeElement} />\n        <input type=\"hidden\" name=\"response\" ref={this.bindResponseElement} />\n        <div className=\"inner\">{this.renderBody()}</div>\n      </div>\n    );\n  }\n\n  render() {\n    const {isSupported} = this.state;\n    // if we are still waiting for the browser to tell us if we can do u2f this\n    // will be null.\n    if (isSupported === null) {\n      return null;\n    }\n\n    if (!isSupported) {\n      return this.renderUnsupported();\n    }\n\n    return this.renderPrompt();\n  }\n}\n\nexport default withOrganization(U2fInterface);\n","import {Component} from 'react';\n\nimport {t} from 'sentry/locale';\n\nimport U2fInterface from './u2finterface';\n\nconst MESSAGES = {\n  signin: t(\n    'Insert your U2F device or tap the button on it to confirm the sign-in request.'\n  ),\n  sudo: t('Alternatively you can use your U2F device to confirm the action.'),\n  enroll: t(\n    'To enroll your U2F device insert it now or tap the button on it to activate it.'\n  ),\n};\n\ntype InterfaceProps = React.ComponentProps<typeof U2fInterface>;\n\ntype Props = Omit<InterfaceProps, 'silentIfUnsupported' | 'flowMode'> & {\n  displayMode: 'signin' | 'enroll' | 'sudo';\n};\n\nclass U2fSign extends Component<Props> {\n  static defaultProps = {\n    displayMode: 'signin',\n  };\n\n  render() {\n    const {displayMode, ...props} = this.props;\n    const flowMode = displayMode === 'enroll' ? 'enroll' : 'sign';\n    return (\n      <U2fInterface\n        {...props}\n        silentIfUnsupported={displayMode === 'sudo'}\n        flowMode={flowMode}\n      >\n        <p>{MESSAGES[displayMode] || null}</p>\n      </U2fInterface>\n    );\n  }\n}\n\nexport default U2fSign;\n","import Cookies from 'js-cookie';\nimport * as qs from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return qs.parse(data) as any;\n}\n","import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport QRCode from 'qrcode.react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {openRecoveryOptions} from 'sentry/actionCreators/modal';\nimport {fetchOrganizationByMember} from 'sentry/actionCreators/organizations';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport {PanelItem} from 'sentry/components/panels';\nimport U2fsign from 'sentry/components/u2f/u2fsign';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Authenticator} from 'sentry/types';\nimport getPendingInvite from 'sentry/utils/getPendingInvite';\nimport AsyncView from 'sentry/views/asyncView';\nimport RemoveConfirm from 'sentry/views/settings/account/accountSecurity/components/removeConfirm';\nimport Field from 'sentry/views/settings/components/forms/field';\nimport Form from 'sentry/views/settings/components/forms/form';\nimport JsonForm from 'sentry/views/settings/components/forms/jsonForm';\nimport FormModel from 'sentry/views/settings/components/forms/model';\nimport TextCopyInput from 'sentry/views/settings/components/forms/textCopyInput';\nimport {FieldObject} from 'sentry/views/settings/components/forms/type';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype getFieldsOpts = {\n  authenticator: Authenticator;\n  /**\n   * Flag to track if totp has been sent\n   */\n  hasSentCode: boolean;\n  /**\n   * Flag to track if we are currently sending the otp code\n   */\n  sendingCode: boolean;\n  /**\n   * Callback to reset SMS 2fa enrollment\n   */\n  onSmsReset: () => void;\n  /**\n   * Callback when u2f device is activated\n   */\n  onU2fTap: U2fsign['props']['onTap'];\n};\n\n/**\n * Retrieve additional form fields (or modify ones) based on 2fa method\n */\nconst getFields = ({\n  authenticator,\n  hasSentCode,\n  sendingCode,\n  onSmsReset,\n  onU2fTap,\n}: getFieldsOpts): null | FieldObject[] => {\n  const {form} = authenticator;\n\n  if (!form) {\n    return null;\n  }\n\n  if (authenticator.id === 'totp') {\n    return [\n      () => (\n        <CodeContainer key=\"qrcode\">\n          <StyledQRCode value={authenticator.qrcode} size={228} />\n        </CodeContainer>\n      ),\n      () => (\n        <Field key=\"secret\" label={t('Authenticator secret')}>\n          <TextCopyInput>{authenticator.secret ?? ''}</TextCopyInput>\n        </Field>\n      ),\n      ...form,\n      () => (\n        <Actions key=\"confirm\">\n          <Button priority=\"primary\" type=\"submit\">\n            {t('Confirm')}\n          </Button>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Sms Form needs a start over button + confirm button\n  // Also inputs being disabled vary based on hasSentCode\n  if (authenticator.id === 'sms') {\n    // Ideally we would have greater flexibility when rendering footer\n    return [\n      {...form[0], disabled: sendingCode || hasSentCode},\n      ...(hasSentCode ? [{...form[1], required: true}] : []),\n      () => (\n        <Actions key=\"sms-footer\">\n          <ButtonBar gap={1}>\n            {hasSentCode && <Button onClick={onSmsReset}>{t('Start Over')}</Button>}\n            <Button priority=\"primary\" type=\"submit\">\n              {hasSentCode ? t('Confirm') : t('Send Code')}\n            </Button>\n          </ButtonBar>\n        </Actions>\n      ),\n    ];\n  }\n\n  // Need to render device name field + U2f component\n  if (authenticator.id === 'u2f') {\n    const deviceNameField = form.find(({name}) => name === 'deviceName')!;\n    return [\n      deviceNameField,\n      () => (\n        <U2fsign\n          key=\"u2f-enroll\"\n          style={{marginBottom: 0}}\n          challengeData={authenticator.challenge}\n          displayMode=\"enroll\"\n          onTap={onU2fTap}\n          isWebauthnSigninFFEnabled\n        />\n      ),\n    ];\n  }\n\n  return null;\n};\n\ntype Props = AsyncView['props'] & WithRouterProps<{authId: string}, {}> & {};\n\ntype State = AsyncView['state'] & {\n  authenticator: Authenticator | null;\n  hasSentCode: boolean;\n  sendingCode: boolean;\n};\n\ntype PendingInvite = ReturnType<typeof getPendingInvite>;\n\n/**\n * Renders necessary forms in order to enroll user in 2fa\n */\nclass AccountSecurityEnroll extends AsyncView<Props, State> {\n  formModel = new FormModel();\n\n  getTitle() {\n    return t('Security');\n  }\n\n  getDefaultState() {\n    return {...super.getDefaultState(), hasSentCode: false};\n  }\n\n  get authenticatorEndpoint() {\n    return `/users/me/authenticators/${this.props.params.authId}/`;\n  }\n\n  get enrollEndpoint() {\n    return `${this.authenticatorEndpoint}enroll/`;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const errorHandler = (err: any) => {\n      const alreadyEnrolled =\n        err &&\n        err.status === 400 &&\n        err.responseJSON &&\n        err.responseJSON.details === 'Already enrolled';\n\n      if (alreadyEnrolled) {\n        this.props.router.push('/settings/account/security/');\n        addErrorMessage(t('Already enrolled'));\n      }\n\n      // Allow the endpoint to fail if the user is already enrolled\n      return alreadyEnrolled;\n    };\n\n    return [['authenticator', this.enrollEndpoint, {}, {allowError: errorHandler}]];\n  }\n\n  componentDidMount() {\n    this.pendingInvitation = getPendingInvite();\n  }\n\n  pendingInvitation: PendingInvite = null;\n\n  get authenticatorName() {\n    return this.state.authenticator?.name ?? 'Authenticator';\n  }\n\n  // This resets state so that user can re-enter their phone number again\n  handleSmsReset = () => this.setState({hasSentCode: false}, this.remountComponent);\n\n  // Handles SMS authenticators\n  handleSmsSubmit = async (dataModel: any) => {\n    const {authenticator, hasSentCode} = this.state;\n    const {phone, otp} = dataModel;\n\n    // Don't submit if empty\n    if (!phone || !authenticator) {\n      return;\n    }\n\n    const data = {\n      phone,\n      // Make sure `otp` is undefined if we are submitting OTP verification\n      // Otherwise API will think that we are on verification step (e.g. after submitting phone)\n      otp: hasSentCode ? otp : undefined,\n      secret: authenticator.secret,\n    };\n\n    // Only show loading when submitting OTP\n    this.setState({sendingCode: !hasSentCode});\n\n    if (!hasSentCode) {\n      addLoadingMessage(t('Sending code to %s...', data.phone));\n    } else {\n      addLoadingMessage(t('Verifying OTP...'));\n    }\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (error) {\n      this.formModel.resetForm();\n\n      addErrorMessage(\n        this.state.hasSentCode ? t('Incorrect OTP') : t('Error sending SMS')\n      );\n\n      this.setState({\n        hasSentCode: false,\n        sendingCode: false,\n      });\n\n      // Re-mount because we want to fetch a fresh secret\n      this.remountComponent();\n\n      return;\n    }\n\n    if (!hasSentCode) {\n      // Just successfully finished sending OTP to user\n      this.setState({hasSentCode: true, sendingCode: false});\n      addSuccessMessage(t('Sent code to %s', data.phone));\n    } else {\n      // OTP was accepted and SMS was added as a 2fa method\n      this.handleEnrollSuccess();\n    }\n  };\n\n  // Handle u2f device tap\n  handleU2fTap = async (tapData: any) => {\n    const data = {deviceName: this.formModel.getValue('deviceName'), ...tapData};\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  // Currently only TOTP uses this\n  handleTotpSubmit = async (dataModel: any) => {\n    if (!this.state.authenticator) {\n      return;\n    }\n\n    const data = {\n      ...(dataModel ?? {}),\n      secret: this.state.authenticator.secret,\n    };\n\n    this.setState({loading: true});\n\n    try {\n      await this.api.requestPromise(this.enrollEndpoint, {method: 'POST', data});\n    } catch (err) {\n      this.handleEnrollError();\n      return;\n    }\n\n    this.handleEnrollSuccess();\n  };\n\n  handleSubmit: Form['props']['onSubmit'] = data => {\n    const id = this.state.authenticator?.id;\n\n    if (id === 'totp') {\n      this.handleTotpSubmit(data);\n      return;\n    }\n    if (id === 'sms') {\n      this.handleSmsSubmit(data);\n      return;\n    }\n  };\n\n  // Handler when we successfully add a 2fa device\n  async handleEnrollSuccess() {\n    // If we're pending approval of an invite, the user will have just joined\n    // the organization when completing 2fa enrollment. We should reload the\n    // organization context in that case to assign them to the org.\n    if (this.pendingInvitation) {\n      await fetchOrganizationByMember(this.pendingInvitation.memberId.toString(), {\n        addOrg: true,\n        fetchOrgDetails: true,\n      });\n    }\n\n    this.props.router.push('/settings/account/security/');\n    openRecoveryOptions({authenticatorName: this.authenticatorName});\n  }\n\n  // Handler when we failed to add a 2fa device\n  handleEnrollError() {\n    this.setState({loading: false});\n    addErrorMessage(t('Error adding %s authenticator', this.authenticatorName));\n  }\n\n  // Removes an authenticator\n  handleRemove = async () => {\n    const {authenticator} = this.state;\n\n    if (!authenticator || !authenticator.authId) {\n      return;\n    }\n\n    // `authenticator.authId` is NOT the same as `props.params.authId` This is\n    // for backwards compatibility with API endpoint\n    try {\n      await this.api.requestPromise(this.authenticatorEndpoint, {method: 'DELETE'});\n    } catch (err) {\n      addErrorMessage(t('Error removing authenticator'));\n      return;\n    }\n\n    this.props.router.push('/settings/account/security/');\n    addSuccessMessage(t('Authenticator has been removed'));\n  };\n\n  renderBody() {\n    const {authenticator, hasSentCode, sendingCode} = this.state;\n\n    if (!authenticator) {\n      return null;\n    }\n\n    const fields = getFields({\n      authenticator,\n      hasSentCode,\n      sendingCode,\n      onSmsReset: this.handleSmsReset,\n      onU2fTap: this.handleU2fTap,\n    });\n\n    // Attempt to extract `defaultValue` from server generated form fields\n    const defaultValues = fields\n      ? fields\n          .filter(\n            field =>\n              typeof field !== 'function' && typeof field.defaultValue !== 'undefined'\n          )\n          .map(field => [\n            field.name,\n            typeof field !== 'function' ? field.defaultValue : '',\n          ])\n          .reduce((acc, [name, value]) => {\n            acc[name] = value;\n            return acc;\n          }, {})\n      : {};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={\n            <Fragment>\n              <span>{authenticator.name}</span>\n              <CircleIndicator\n                css={{marginLeft: 6}}\n                enabled={authenticator.isEnrolled || authenticator.status === 'rotation'}\n              />\n            </Fragment>\n          }\n          action={\n            authenticator.isEnrolled &&\n            authenticator.removeButton && (\n              <RemoveConfirm onConfirm={this.handleRemove}>\n                <Button priority=\"danger\">{authenticator.removeButton}</Button>\n              </RemoveConfirm>\n            )\n          }\n        />\n\n        <TextBlock>{authenticator.description}</TextBlock>\n\n        {authenticator.rotationWarning && authenticator.status === 'rotation' && (\n          <Alert type=\"warning\" icon={<IconWarning size=\"md\" />}>\n            {authenticator.rotationWarning}\n          </Alert>\n        )}\n\n        {!!authenticator.form?.length && (\n          <Form\n            model={this.formModel}\n            apiMethod=\"POST\"\n            apiEndpoint={this.authenticatorEndpoint}\n            onSubmit={this.handleSubmit}\n            initialData={{...defaultValues, ...authenticator}}\n            hideFooter\n          >\n            <JsonForm forms={[{title: 'Configuration', fields: fields ?? []}]} />\n          </Form>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nconst CodeContainer = styled(PanelItem)`\n  justify-content: center;\n`;\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nconst StyledQRCode = styled(QRCode)`\n  background: white;\n  padding: ${space(2)};\n`;\n\nexport default withRouter(AccountSecurityEnroll);\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import * as React from 'react';\n\nimport Confirm from 'sentry/components/confirm';\nimport {t} from 'sentry/locale';\nimport ConfirmHeader from 'sentry/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <React.Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </React.Fragment>\n);\n\nconst RemoveConfirm = (props: Props) => <Confirm {...props} message={message} />;\n\nexport default RemoveConfirm;\n"],"names":["base64urlToBuffer","baseurl64String","padding","slice","length","base64String","replace","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","U2fInterface","React","isSupported","formElement","challengeElement","hasBeenTapped","deviceFailure","responseElement","isSafari","failCount","this","setState","invokeU2fFlow","ref","form","value","JSON","stringify","props","challengeData","onClick","onTryAgain","className","flowMode","t","state","supportMail","ConfigStore","support","href","renderSafariWebAuthn","UNKNOWN_ERROR","DEVICE_ERROR","DUPLICATE_DEVICE","UNKNOWN_DEVICE","BAD_APPID","tct","p1","p2","canTryAgain","style","marginTop","supported","isWebauthnSigninFFEnabled","window","PublicKeyCredential","u2f","navigator","userAgent","includes","getU2FResponse","data","response","authenticatorData","keyHandle","id","clientData","clientDataJSON","signatureData","signature","rawId","attestationObject","type","Error","submitU2fResponse","promise","then","u2fResponse","challenge","onTap","catch","submit","err","failure","metaData","Sentry","webAuthnSignIn","publicKeyCredentialRequestOptions","credentials","get","publicKey","webAuthnRegister","create","challengeArray","webAuthnAuthenticationData","cbor","decodeFirst","authenticateRequests","organization","features","webAuthnRegisterData","registerRequests","registeredKeys","renderUnsupported","silentIfUnsupported","renderBody","renderFailure","children","renderPrompt","name","bindChallengeElement","bindResponseElement","render","withOrganization","MESSAGES","signin","sudo","enroll","U2fSign","Component","displayMode","getPendingInvite","Cookies","qs","AsyncView","AsyncComponent","getTitle","title","renderComponent","AccountSecurityEnroll","FormModel","hasSentCode","remountComponent","async","authenticator","phone","otp","dataModel","undefined","secret","sendingCode","addLoadingMessage","api","requestPromise","enrollEndpoint","error","formModel","resetForm","addErrorMessage","handleEnrollSuccess","addSuccessMessage","deviceName","getValue","tapData","loading","handleEnrollError","method","handleSmsSubmit","handleTotpSubmit","authId","authenticatorEndpoint","router","push","getDefaultState","super","params","getEndpoints","allowError","alreadyEnrolled","status","responseJSON","details","componentDidMount","pendingInvitation","fetchOrganizationByMember","memberId","toString","addOrg","fetchOrgDetails","openRecoveryOptions","authenticatorName","fields","onSmsReset","onU2fTap","CodeContainer","StyledQRCode","qrcode","size","label","Actions","priority","disabled","required","gap","find","marginBottom","getFields","handleSmsReset","handleU2fTap","defaultValues","filter","field","defaultValue","map","reduce","acc","Fragment","css","enabled","isEnrolled","action","removeButton","onConfirm","handleRemove","description","rotationWarning","icon","model","apiMethod","apiEndpoint","onSubmit","handleSubmit","initialData","hideFooter","forms","PanelItem","QRCode","space","withRouter","message","RemoveConfirm"],"sourceRoot":""}