{"version":3,"file":"chunks/app_components_modals_createTeamModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/teams.tsx","webpack:///./app/actions/teamActions.tsx","webpack:///./app/components/modals/createTeamModal.tsx","webpack:///./app/components/teams/createTeamForm.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/utils/useApi.tsx"],"sourcesContent":["import {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport TeamActions from 'sentry/actions/teamActions';\nimport {Client} from 'sentry/api';\nimport {tct} from 'sentry/locale';\nimport {Team} from 'sentry/types';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\nimport {uniqueId} from 'sentry/utils/guid';\n\ntype CallbackOptions = {\n  success?: Function;\n  error?: Function;\n};\n\nconst doCallback = (\n  params: CallbackOptions = {},\n  name: keyof CallbackOptions,\n  ...args: any[]\n) => {\n  callIfFunction(params[name], ...args);\n};\n\n/**\n * Note these are both slugs\n */\ntype OrgSlug = {orgId: string};\ntype OrgAndTeamSlug = OrgSlug & {teamId: string};\n\ntype TeamData = {data: Team};\n\n/**\n * This is the actual internal id, not username or email\n */\ntype MemberId = {memberId: string};\n\n// Fetch teams for org\nexport function fetchTeams(api: Client, params: OrgSlug, options: CallbackOptions) {\n  TeamActions.fetchAll(params.orgId);\n  return api.request(`/teams/${params.orgId}/`, {\n    success: data => {\n      TeamActions.fetchAllSuccess(params.orgId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchAllError(params.orgId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\n// Fetch user teams for current org and place them in the team store\nexport async function fetchUserTeams(api: Client, params: OrgSlug) {\n  const teams = await api.requestPromise(`/organizations/${params.orgId}/user-teams/`);\n  TeamActions.loadUserTeams(teams);\n}\n\nexport function fetchTeamDetails(\n  api: Client,\n  params: OrgAndTeamSlug,\n  options?: CallbackOptions\n) {\n  TeamActions.fetchDetails(params.teamId);\n  return api.request(`/teams/${params.orgId}/${params.teamId}/`, {\n    success: data => {\n      TeamActions.fetchDetailsSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.fetchDetailsError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function updateTeamSuccess(teamId: OrgAndTeamSlug['teamId'], data: Team) {\n  TeamActions.updateSuccess(teamId, data);\n}\n\nexport function updateTeam(\n  api: Client,\n  params: OrgAndTeamSlug & TeamData,\n  options: CallbackOptions\n) {\n  const endpoint = `/teams/${params.orgId}/${params.teamId}/`;\n  TeamActions.update(params.teamId, params.data);\n\n  return api.request(endpoint, {\n    method: 'PUT',\n    data: params.data,\n    success: data => {\n      updateTeamSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function joinTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId ?? 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'POST',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function leaveTeam(\n  api: Client,\n  params: OrgAndTeamSlug & Partial<MemberId>,\n  options: CallbackOptions\n) {\n  const endpoint = `/organizations/${params.orgId}/members/${\n    params.memberId || 'me'\n  }/teams/${params.teamId}/`;\n  const id = uniqueId();\n\n  TeamActions.update(id, params.teamId);\n\n  return api.request(endpoint, {\n    method: 'DELETE',\n    success: data => {\n      TeamActions.updateSuccess(params.teamId, data);\n      doCallback(options, 'success', data);\n    },\n    error: error => {\n      TeamActions.updateError(id, params.teamId, error);\n      doCallback(options, 'error', error);\n    },\n  });\n}\n\nexport function createTeam(api: Client, team: Pick<Team, 'slug'>, params: OrgSlug) {\n  TeamActions.createTeam(team);\n\n  return api\n    .requestPromise(`/organizations/${params.orgId}/teams/`, {\n      method: 'POST',\n      data: team,\n    })\n    .then(\n      data => {\n        TeamActions.createTeamSuccess(data);\n        addSuccessMessage(\n          tct('[team] has been added to the [organization] organization', {\n            team: `#${data.slug}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.createTeamError(team.slug, err);\n        addErrorMessage(\n          tct('Unable to create [team] in the [organization] organization', {\n            team: `#${team.slug}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n\nexport function removeTeam(api: Client, params: OrgAndTeamSlug) {\n  TeamActions.removeTeam(params.teamId);\n\n  return api\n    .requestPromise(`/teams/${params.orgId}/${params.teamId}/`, {\n      method: 'DELETE',\n    })\n    .then(\n      data => {\n        TeamActions.removeTeamSuccess(params.teamId, data);\n        addSuccessMessage(\n          tct('[team] has been removed from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        return data;\n      },\n      err => {\n        TeamActions.removeTeamError(params.teamId, err);\n        addErrorMessage(\n          tct('Unable to remove [team] from the [organization] organization', {\n            team: `#${params.teamId}`,\n            organization: params.orgId,\n          })\n        );\n        throw err;\n      }\n    );\n}\n","import Reflux from 'reflux';\n\nconst TeamActions = Reflux.createActions([\n  'createTeam',\n  'createTeamError',\n  'createTeamSuccess',\n  'fetchAll',\n  'fetchAllError',\n  'fetchAllSuccess',\n  'fetchDetails',\n  'fetchDetailsError',\n  'fetchDetailsSuccess',\n  'loadTeams',\n  'loadUserTeams',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default TeamActions;\n","import {Fragment} from 'react';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {createTeam} from 'sentry/actionCreators/teams';\nimport CreateTeamForm from 'sentry/components/teams/createTeamForm';\nimport {t} from 'sentry/locale';\nimport {Organization, Team} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\n\ntype Props = ModalRenderProps & {\n  organization: Organization;\n  onClose?: (team: Team) => void;\n};\n\nfunction CreateTeamModal({Body, Header, ...props}: Props) {\n  const {onClose, closeModal, organization} = props;\n  const api = useApi();\n\n  async function handleSubmit(\n    data: {slug: string},\n    onSuccess: Function,\n    onError: Function\n  ) {\n    try {\n      const team: Team = await createTeam(api, data, {orgId: organization.slug});\n\n      closeModal();\n      onClose?.(team);\n      onSuccess(team);\n    } catch (err) {\n      onError(err);\n    }\n  }\n\n  return (\n    <Fragment>\n      <Header closeButton>{t('Create Team')}</Header>\n      <Body>\n        <CreateTeamForm {...props} onSubmit={handleSubmit} />\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default CreateTeamModal;\n","import {Fragment} from 'react';\n\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\nimport Form from 'sentry/views/settings/components/forms/form';\nimport TextField from 'sentry/views/settings/components/forms/textField';\n\ntype Payload = {\n  slug: string;\n};\n\ntype Props = {\n  organization: Organization;\n  onSubmit?: (data: Payload, onSuccess: Function, onError: Function) => void;\n  onSuccess?: (data: Payload) => void;\n  formProps?: Partial<typeof Form>;\n};\n\nfunction CreateTeamForm({organization, formProps, ...props}: Props) {\n  return (\n    <Fragment>\n      <p>\n        {t(\n          'Members of a team have access to specific areas, such as a new release or a new application feature.'\n        )}\n      </p>\n\n      <Form\n        submitLabel={t('Create Team')}\n        apiEndpoint={`/organizations/${organization.slug}/teams/`}\n        apiMethod=\"POST\"\n        onSubmit={(data, onSuccess, onError) =>\n          props.onSubmit?.(data as Payload, onSuccess, onError)\n        }\n        onSubmitSuccess={data => props.onSuccess?.(data)}\n        requireChanges\n        data-test-id=\"create-team-form\"\n        {...formProps}\n      >\n        <TextField\n          name=\"slug\"\n          label={t('Team Name')}\n          placeholder={t('e.g. operations, web-frontend, desktop')}\n          help={t('May contain lowercase letters, numbers, dashes and underscores.')}\n          required\n          stacked\n          flexibleControlStateSize\n          inline={false}\n          transformInput={slugify}\n        />\n      </Form>\n    </Fragment>\n  );\n}\n\nexport default CreateTeamForm;\n","// XXX: This is NOT an exhaustive slugify function\n// Only forces lowercase and replaces spaces with hyphens\nexport default function slugify(str: any): string {\n  return typeof str === 'string' ? str.toLowerCase().replace(' ', '-') : '';\n}\n","import {useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  function handleCleanup() {\n    !persistInFlight && api.clear();\n  }\n\n  useEffect(() => handleCleanup, []);\n\n  return api;\n}\n\nexport default useApi;\n"],"names":["doCallback","params","name","args","callIfFunction","async","fetchUserTeams","api","teams","requestPromise","orgId","TeamActions","updateTeamSuccess","teamId","data","updateTeam","options","endpoint","request","method","success","error","joinTeam","memberId","id","uniqueId","leaveTeam","createTeam","team","then","addSuccessMessage","tct","slug","organization","err","addErrorMessage","removeTeam","Reflux","CreateTeamModal","Body","Header","props","onClose","closeModal","useApi","Fragment","closeButton","t","onSubmit","onSuccess","onError","CreateTeamForm","formProps","submitLabel","apiEndpoint","apiMethod","onSubmitSuccess","requireChanges","label","placeholder","help","required","stacked","flexibleControlStateSize","inline","transformInput","slugify","str","toLowerCase","replace","persistInFlight","providedApi","localApi","useRef","undefined","current","Client","handleCleanup","clear","useEffect"],"sourceRoot":""}