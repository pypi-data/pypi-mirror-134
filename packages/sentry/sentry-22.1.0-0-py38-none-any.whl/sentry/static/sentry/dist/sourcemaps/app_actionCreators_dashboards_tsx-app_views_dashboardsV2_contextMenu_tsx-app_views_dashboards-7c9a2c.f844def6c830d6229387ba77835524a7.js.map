{"version":3,"file":"chunks/app_actionCreators_dashboards_tsx-app_views_dashboardsV2_contextMenu_tsx-app_views_dashboards-7c9a2c.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/dashboards.tsx","webpack:///./app/views/dashboardsV2/contextMenu.tsx","webpack:///./app/views/dashboardsV2/types.tsx","webpack:///./app/views/dashboardsV2/utils.tsx"],"sourcesContent":["import omit from 'lodash/omit';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {DashboardDetails, Widget} from 'sentry/views/dashboardsV2/types';\n\nexport function createDashboard(\n  api: Client,\n  orgId: string,\n  newDashboard: DashboardDetails,\n  duplicate?: boolean\n): Promise<DashboardDetails> {\n  const {title, widgets} = newDashboard;\n\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/`,\n    {\n      method: 'POST',\n      data: {title, widgets: widgets.map(widget => omit(widget, ['tempId'])), duplicate},\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to create dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function updateDashboardVisit(\n  api: Client,\n  orgId: string,\n  dashboardId: string | string[]\n): Promise<void> {\n  const promise = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboardId}/visit/`,\n    {\n      method: 'POST',\n    }\n  );\n\n  return promise;\n}\n\nexport function fetchDashboard(\n  api: Client,\n  orgId: string,\n  dashboardId: string\n): Promise<DashboardDetails> {\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboardId}/`,\n    {\n      method: 'GET',\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to load dashboard'));\n    }\n  });\n  return promise;\n}\n\nexport function updateDashboard(\n  api: Client,\n  orgId: string,\n  dashboard: DashboardDetails\n): Promise<DashboardDetails> {\n  const data = {\n    title: dashboard.title,\n    widgets: dashboard.widgets.map(widget => omit(widget, ['tempId'])),\n  };\n\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboard.id}/`,\n    {\n      method: 'PUT',\n      data,\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to update dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function deleteDashboard(\n  api: Client,\n  orgId: string,\n  dashboardId: string\n): Promise<undefined> {\n  const promise: Promise<undefined> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboardId}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      addErrorMessage(errorResponse);\n    } else {\n      addErrorMessage(t('Unable to delete dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function validateWidget(\n  api: Client,\n  orgId: string,\n  widget: Widget\n): Promise<undefined> {\n  const promise: Promise<undefined> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/widgets/`,\n    {\n      method: 'POST',\n      data: widget,\n    }\n  );\n  return promise;\n}\n","import styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport DropdownMenu from 'sentry/components/dropdownMenu';\nimport {IconEllipsis} from 'sentry/icons';\n\nconst ContextMenu = ({children}) => (\n  <DropdownMenu>\n    {({isOpen, getRootProps, getActorProps, getMenuProps}) => {\n      const topLevelCx = classNames('dropdown', {\n        'anchor-right': true,\n        open: isOpen,\n      });\n\n      return (\n        <MoreOptions\n          {...getRootProps({\n            className: topLevelCx,\n          })}\n        >\n          <DropdownTarget\n            {...getActorProps<HTMLDivElement>({\n              onClick: (event: React.MouseEvent) => {\n                event.stopPropagation();\n                event.preventDefault();\n              },\n            })}\n          >\n            <IconEllipsis data-test-id=\"context-menu\" size=\"md\" />\n          </DropdownTarget>\n          {isOpen && (\n            <ul {...getMenuProps({})} className={classNames('dropdown-menu')}>\n              {children}\n            </ul>\n          )}\n        </MoreOptions>\n      );\n    }}\n  </DropdownMenu>\n);\n\nconst MoreOptions = styled('span')`\n  display: flex;\n  color: ${p => p.theme.textColor};\n`;\n\nconst DropdownTarget = styled('div')`\n  display: flex;\n  cursor: pointer;\n  padding: 0 5px;\n`;\n\nexport default ContextMenu;\n","import {User} from 'sentry/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  STACKED_AREA = 'stacked_area',\n  TOP_N = 'top_n',\n}\n\nexport enum WidgetType {\n  DISCOVER = 'discover',\n  ISSUE = 'issue',\n}\n\nexport type WidgetQuery = {\n  name: string;\n  fields: string[];\n  conditions: string;\n  orderby: string;\n};\n\nexport type Widget = {\n  id?: string;\n  title: string;\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n  widgetType?: WidgetType;\n  tempId?: string;\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  dateCreated?: string;\n  createdBy?: User;\n  widgetDisplay: DisplayType[];\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  title: string;\n  widgets: Widget[];\n  id: string;\n  dateCreated: string;\n  createdBy?: User;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n  PREVIEW = 'preview',\n}\n\n// where we launch the dashboard widget from\nexport enum DashboardWidgetSource {\n  DISCOVERV2 = 'discoverv2',\n  DASHBOARDS = 'dashboards',\n  LIBRARY = 'library',\n  ISSUE_DETAILS = 'issueDetail',\n}\n","import {Query} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pick from 'lodash/pick';\n\nimport WidgetArea from 'sentry-images/dashboard/widget-area.svg';\nimport WidgetBar from 'sentry-images/dashboard/widget-bar.svg';\nimport WidgetBigNumber from 'sentry-images/dashboard/widget-big-number.svg';\nimport WidgetLine from 'sentry-images/dashboard/widget-line-1.svg';\nimport WidgetTable from 'sentry-images/dashboard/widget-table.svg';\nimport WidgetWorldMap from 'sentry-images/dashboard/widget-world-map.svg';\n\nimport {PageFilters} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  DashboardDetails,\n  DisplayType,\n  Widget,\n  WidgetQuery,\n  WidgetType,\n} from 'sentry/views/dashboardsV2/types';\n\nexport function cloneDashboard(dashboard: DashboardDetails): DashboardDetails {\n  return cloneDeep(dashboard);\n}\n\nexport function eventViewFromWidget(\n  title: string,\n  query: WidgetQuery,\n  selection: PageFilters,\n  widgetDisplayType?: DisplayType\n): EventView {\n  const {start, end, period: statsPeriod} = selection.datetime;\n  const {projects, environments} = selection;\n\n  // World Map requires an additional column (geo.country_code) to display in discover when navigating from the widget\n  const fields =\n    widgetDisplayType === DisplayType.WORLD_MAP\n      ? ['geo.country_code', ...query.fields]\n      : query.fields;\n  const conditions =\n    widgetDisplayType === DisplayType.WORLD_MAP\n      ? `${query.conditions} has:geo.country_code`\n      : query.conditions;\n\n  return EventView.fromSavedQuery({\n    id: undefined,\n    name: title,\n    version: 2,\n    fields,\n    query: conditions,\n    orderby: query.orderby,\n    projects,\n    range: statsPeriod,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n}\n\nfunction coerceStringToArray(value?: string | string[] | null) {\n  return typeof value === 'string' ? [value] : value;\n}\n\nexport function constructWidgetFromQuery(query?: Query): Widget | undefined {\n  if (query) {\n    const queryNames = coerceStringToArray(query.queryNames);\n    const queryConditions = coerceStringToArray(query.queryConditions);\n    const queryFields = coerceStringToArray(query.queryFields);\n    const queries: WidgetQuery[] = [];\n    if (\n      queryConditions &&\n      queryNames &&\n      queryFields &&\n      typeof query.queryOrderby === 'string'\n    ) {\n      queryConditions.forEach((condition, index) => {\n        queries.push({\n          name: queryNames[index],\n          conditions: condition,\n          fields: queryFields,\n          orderby: query.queryOrderby as string,\n        });\n      });\n    }\n    if (query.title && query.displayType && query.interval && queries.length > 0) {\n      const newWidget: Widget = {\n        ...(pick(query, ['title', 'displayType', 'interval']) as {\n          title: string;\n          displayType: DisplayType;\n          interval: string;\n        }),\n        widgetType: WidgetType.DISCOVER,\n        queries,\n      };\n      return newWidget;\n    }\n  }\n  return undefined;\n}\n\nexport function miniWidget(displayType: DisplayType): string {\n  switch (displayType) {\n    case DisplayType.BAR:\n      return WidgetBar;\n    case DisplayType.AREA:\n    case DisplayType.TOP_N:\n      return WidgetArea;\n    case DisplayType.BIG_NUMBER:\n      return WidgetBigNumber;\n    case DisplayType.TABLE:\n      return WidgetTable;\n    case DisplayType.WORLD_MAP:\n      return WidgetWorldMap;\n    case DisplayType.LINE:\n    default:\n      return WidgetLine;\n  }\n}\n"],"names":["createDashboard","api","orgId","newDashboard","duplicate","title","widgets","promise","requestPromise","method","data","map","widget","omit","catch","response","errorResponse","responseJSON","addErrorMessage","t","updateDashboardVisit","dashboardId","fetchDashboard","updateDashboard","dashboard","id","deleteDashboard","validateWidget","ContextMenu","children","isOpen","getRootProps","getActorProps","getMenuProps","topLevelCx","classNames","open","MoreOptions","className","DropdownTarget","onClick","event","stopPropagation","preventDefault","size","p","theme","textColor","MAX_WIDGETS","DisplayType","WidgetType","DashboardState","DashboardWidgetSource","cloneDashboard","cloneDeep","eventViewFromWidget","query","selection","widgetDisplayType","start","end","period","statsPeriod","datetime","projects","environments","fields","conditions","EventView","undefined","name","version","orderby","range","getUtcDateString","environment","coerceStringToArray","value","constructWidgetFromQuery","queryNames","queryConditions","queryFields","queries","queryOrderby","forEach","condition","index","push","displayType","interval","length","pick","widgetType"],"sourceRoot":""}