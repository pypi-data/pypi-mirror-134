{"version":3,"file":"chunks/app_views_settings_project_serviceHookSettingsForm_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"0lBAMA,MAAMA,GAA0B,OAAO,MAAP,sBAAH,sDAKvBC,GAAQ,OAAO,QAAP,sBAAH,gHAQLC,GAAgB,OAAO,OAAP,sBAAH,2CAanB,MAAMC,UAAyBC,EAAAA,UAAuB,uDACzC,CAACC,EAAgCC,KAC1C,MAAM,MAACC,EAAD,SAAQC,GAAYC,KAAKC,MAC/B,IAAIC,EAA0B,GAEN,mBAAbH,IAKTG,EADEL,EAAEM,OAAOC,QACAN,EAAQ,IAAIA,EAAOF,GAAiB,CAACE,GAErCA,EAAMO,QAAOC,GAAKA,IAAMV,IAGrCG,EAASG,EAAUL,OAGrBU,SACE,MAAM,SAACC,EAAD,QAAWC,EAAX,MAAoBX,GAASE,KAAKC,MAExC,OACE,QAACV,EAAD,UACGkB,EAAQC,KAAI,EAAEC,EAAaC,MAC1B,QAACC,EAAD,WACE,QAACrB,EAAD,YACE,iBACEsB,KAAK,WACLhB,MAAOa,EACPZ,SAAUC,KAAKD,SAASgB,KAAKf,KAAMW,GACnCH,SAAUA,EACVJ,SAASY,EAAAA,EAAAA,IAAQlB,KAA0C,IAAhCA,EAAMmB,QAAQN,MAE3C,QAAClB,EAAD,UAAgBmB,QATCD,QAxBzBjB,EAAAA,YAAAA,mBA0CN,UAEMmB,GAAiB,OAAO,MAAP,sBAAH,kCAGGK,GAAKA,EAAEC,MAAMC,YAAY,IAH5B,oCAMGF,GAAKA,EAAEC,MAAMC,YAAY,IAN5B,wCASGF,GAAKA,EAAEC,MAAMC,YAAY,IAT5B,kB,0xBChEpB,MAAMC,EAAyB,CAAC,cAAe,iBAAiBX,KAAIb,GAAK,CAACA,EAAGA,KAS9D,MAAMyB,UAAgCC,EAAAA,UAAiB,8DAClD,KAChB,MAAM,MAACC,EAAD,UAAQC,GAAazB,KAAKC,MAChCyB,EAAAA,eAAAA,KAAA,oBAAiCF,EAAjC,qBAAmDC,EAAnD,eAGFlB,SACE,MAAM,YAACoB,EAAD,MAAcH,EAAd,UAAqBC,EAArB,OAAgCG,GAAU5B,KAAKC,MAE/C4B,EAAWD,EAAM,oBACNJ,EADM,YACGC,EADH,kBACsBG,EADtB,yBAENJ,EAFM,YAEGC,EAFH,WAIvB,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CACEK,UAAWF,EAAS,MAAQ,OAC5BG,YAAaF,EACbF,YAAaA,EACbK,gBAAiBhC,KAAKgC,gBACtBC,YAAa,CACXC,UAAW,EACXC,aAAc,IAEhBC,YAAaR,GAASS,EAAAA,EAAAA,GAAE,iBAAkBA,EAAAA,EAAAA,GAAE,eAT9C,WAWE,QAAC,KAAD,WAAcA,EAAAA,EAAAA,GAAE,yBAChB,QAAC,IAAD,YACE,QAAC,IAAD,CAAcC,KAAK,WAAWC,OAAOF,EAAAA,EAAAA,GAAE,aACvC,QAAC,IAAD,CACEC,KAAK,MACLC,OAAOF,EAAAA,EAAAA,GAAE,OACTG,UAAQ,EACRC,MAAMJ,EAAAA,EAAAA,GAAE,yCAEV,QAAC,IAAD,CACEC,KAAK,SACLC,OAAOF,EAAAA,EAAAA,GAAE,UACTK,QAAQ,EACRD,MAAMJ,EAAAA,EAAAA,GAAE,6CAJV,SAMG,EAAEvC,MAAAA,EAAOC,SAAAA,MACR,QAAC,IAAD,CACEA,SAAUA,EACVD,MAAOA,EACPW,QAASY,eA7CNC,EAAAA,YAAAA","sources":["webpack:///./app/views/settings/components/forms/controls/multipleCheckbox.tsx","webpack:///./app/views/settings/project/serviceHookSettingsForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Choices} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nconst MultipleCheckboxWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst Label = styled('label')`\n  font-weight: normal;\n  white-space: nowrap;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  width: 20%;\n`;\n\nconst CheckboxLabel = styled('span')`\n  margin-left: 3px;\n`;\n\ntype SelectedValue = (string | number)[];\n\ntype Props = {\n  value: (string | number)[];\n  choices: Choices;\n  onChange?: (value: SelectedValue, event: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled?: boolean;\n};\n\nclass MultipleCheckbox extends React.Component<Props> {\n  onChange = (selectedValue: string | number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const {value, onChange} = this.props;\n    let newValue: SelectedValue = [];\n\n    if (typeof onChange !== 'function') {\n      return;\n    }\n\n    if (e.target.checked) {\n      newValue = value ? [...value, selectedValue] : [value];\n    } else {\n      newValue = value.filter(v => v !== selectedValue);\n    }\n\n    onChange(newValue, e);\n  };\n\n  render() {\n    const {disabled, choices, value} = this.props;\n\n    return (\n      <MultipleCheckboxWrapper>\n        {choices.map(([choiceValue, choiceLabel]) => (\n          <LabelContainer key={choiceValue}>\n            <Label>\n              <input\n                type=\"checkbox\"\n                value={choiceValue}\n                onChange={this.onChange.bind(this, choiceValue)}\n                disabled={disabled}\n                checked={defined(value) && value.indexOf(choiceValue) !== -1}\n              />\n              <CheckboxLabel>{choiceLabel}</CheckboxLabel>\n            </Label>\n          </LabelContainer>\n        ))}\n      </MultipleCheckboxWrapper>\n    );\n  }\n}\n\nexport default MultipleCheckbox;\n\nconst LabelContainer = styled('div')`\n  width: 100%;\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    width: 50%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints[1]}) {\n    width: 33.333%;\n  }\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    width: 25%;\n  }\n`;\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\n\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {Choices, ServiceHook} from 'sentry/types';\nimport ApiForm from 'sentry/views/settings/components/forms/apiForm';\nimport BooleanField from 'sentry/views/settings/components/forms/booleanField';\nimport MultipleCheckbox from 'sentry/views/settings/components/forms/controls/multipleCheckbox';\nimport FormField from 'sentry/views/settings/components/forms/formField';\nimport TextField from 'sentry/views/settings/components/forms/textField';\n\nconst EVENT_CHOICES: Choices = ['event.alert', 'event.created'].map(e => [e, e]);\n\ntype Props = {\n  orgId: string;\n  projectId: string;\n  initialData: Partial<ServiceHook> & {isActive: boolean};\n  hookId?: string;\n};\n\nexport default class ServiceHookSettingsForm extends Component<Props> {\n  onSubmitSuccess = () => {\n    const {orgId, projectId} = this.props;\n    browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n  };\n\n  render() {\n    const {initialData, orgId, projectId, hookId} = this.props;\n\n    const endpoint = hookId\n      ? `/projects/${orgId}/${projectId}/hooks/${hookId}/`\n      : `/projects/${orgId}/${projectId}/hooks/`;\n\n    return (\n      <Panel>\n        <ApiForm\n          apiMethod={hookId ? 'PUT' : 'POST'}\n          apiEndpoint={endpoint}\n          initialData={initialData}\n          onSubmitSuccess={this.onSubmitSuccess}\n          footerStyle={{\n            marginTop: 0,\n            paddingRight: 20,\n          }}\n          submitLabel={hookId ? t('Save Changes') : t('Create Hook')}\n        >\n          <PanelHeader>{t('Hook Configuration')}</PanelHeader>\n          <PanelBody>\n            <BooleanField name=\"isActive\" label={t('Active')} />\n            <TextField\n              name=\"url\"\n              label={t('URL')}\n              required\n              help={t('The URL which will receive events.')}\n            />\n            <FormField\n              name=\"events\"\n              label={t('Events')}\n              inline={false}\n              help={t('The event types you wish to subscribe to.')}\n            >\n              {({value, onChange}) => (\n                <MultipleCheckbox\n                  onChange={onChange}\n                  value={value}\n                  choices={EVENT_CHOICES}\n                />\n              )}\n            </FormField>\n          </PanelBody>\n        </ApiForm>\n      </Panel>\n    );\n  }\n}\n"],"names":["MultipleCheckboxWrapper","Label","CheckboxLabel","MultipleCheckbox","React","selectedValue","e","value","onChange","this","props","newValue","target","checked","filter","v","render","disabled","choices","map","choiceValue","choiceLabel","LabelContainer","type","bind","defined","indexOf","p","theme","breakpoints","EVENT_CHOICES","ServiceHookSettingsForm","Component","orgId","projectId","browserHistory","initialData","hookId","endpoint","apiMethod","apiEndpoint","onSubmitSuccess","footerStyle","marginTop","paddingRight","submitLabel","t","name","label","required","help","inline"],"sourceRoot":""}