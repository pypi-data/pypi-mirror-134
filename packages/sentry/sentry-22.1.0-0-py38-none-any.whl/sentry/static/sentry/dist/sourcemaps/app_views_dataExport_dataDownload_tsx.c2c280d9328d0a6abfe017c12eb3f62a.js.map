{"version":3,"file":"chunks/app_views_dataExport_dataDownload_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/dataExport.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/dataExport/dataDownload.tsx"],"sourcesContent":["import * as React from 'react';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\n// NOTE: Coordinate with other ExportQueryType (src/sentry/data_export/base.py)\nexport enum ExportQueryType {\n  IssuesByTag = 'Issues-by-Tag',\n  Discover = 'Discover',\n}\n\ntype DataExportPayload = {\n  queryType: ExportQueryType;\n  queryInfo: any; // TODO(ts): Formalize different possible payloads\n};\n\ntype Props = {\n  api: Client;\n  disabled?: boolean;\n  organization: Organization;\n  payload: DataExportPayload;\n  icon?: React.ReactNode;\n};\n\ntype State = {\n  inProgress: boolean;\n};\n\nclass DataExport extends React.Component<Props, State> {\n  state = this.initialState;\n\n  componentDidUpdate({payload: prevPayload}) {\n    const {payload} = this.props;\n    if (!isEqual(prevPayload, payload)) {\n      this.resetState();\n    }\n  }\n\n  get initialState(): State {\n    return {\n      inProgress: false,\n    };\n  }\n\n  resetState = () => {\n    this.setState(this.initialState);\n  };\n\n  startDataExport = () => {\n    const {\n      api,\n      organization: {slug},\n      payload: {queryType, queryInfo},\n    } = this.props;\n\n    this.setState({inProgress: true});\n\n    api\n      .requestPromise(`/organizations/${slug}/data-export/`, {\n        includeAllArgs: true,\n        method: 'POST',\n        data: {\n          query_type: queryType,\n          query_info: queryInfo,\n        },\n      })\n      .then(([_data, _, response]) => {\n        addSuccessMessage(\n          response?.status === 201\n            ? t(\n                \"Sit tight. We'll shoot you an email when your data is ready for download.\"\n              )\n            : t(\"It looks like we're already working on it. Sit tight, we'll email you.\")\n        );\n      })\n      .catch(err => {\n        const message =\n          err?.responseJSON?.detail ??\n          \"We tried our hardest, but we couldn't export your data. Give it another go.\";\n        addErrorMessage(t(message));\n        this.setState({inProgress: false});\n      });\n  };\n\n  render() {\n    const {inProgress} = this.state;\n    const {children, disabled, icon} = this.props;\n    return (\n      <Feature features={['organizations:discover-query']}>\n        {inProgress ? (\n          <Button\n            size=\"small\"\n            priority=\"default\"\n            title=\"You can get on with your life. We'll email you when your data's ready.\"\n            {...this.props}\n            disabled\n            icon={icon}\n          >\n            {t(\"We're working on it...\")}\n          </Button>\n        ) : (\n          <Button\n            onClick={debounce(this.startDataExport, 500)}\n            disabled={disabled || false}\n            size=\"small\"\n            priority=\"default\"\n            title=\"Put your data to work. Start your export and we'll email you when it's finished.\"\n            icon={icon}\n            {...this.props}\n          >\n            {children ? children : t('Export All to CSV')}\n          </Button>\n        )}\n      </Feature>\n    );\n  }\n}\n\nexport {DataExport};\nexport default withApi(withOrganization(DataExport));\n","import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {ExportQueryType} from 'sentry/components/dataExport';\nimport DateTime from 'sentry/components/dateTime';\nimport {IconDownload} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport AsyncView from 'sentry/views/asyncView';\nimport Layout from 'sentry/views/auth/layout';\n\nexport enum DownloadStatus {\n  Early = 'EARLY',\n  Valid = 'VALID',\n  Expired = 'EXPIRED',\n}\n\ntype RouteParams = {\n  orgId: string;\n  dataExportId: string;\n};\n\ntype Download = {\n  id: number;\n  user: {\n    id: number;\n    email: string;\n    username: string;\n  };\n  dateCreated: string;\n  dateFinished?: string;\n  dateExpired?: string;\n  query: {\n    type: ExportQueryType;\n    info: object;\n  };\n  status: DownloadStatus;\n  checksum: string;\n};\n\ntype Props = {} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  download: Download;\n  errors: {\n    download: {\n      status: number;\n      statusText: string;\n      responseJSON: {\n        detail: string;\n      };\n    };\n  };\n} & AsyncView['state'];\n\nclass DataDownload extends AsyncView<Props, State> {\n  disableErrorReport = false;\n\n  getTitle(): string {\n    return t('Download Center');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, dataExportId} = this.props.params;\n    return [['download', `/organizations/${orgId}/data-export/${dataExportId}/`]];\n  }\n\n  getActionLink(queryType): string {\n    const {orgId} = this.props.params;\n    switch (queryType) {\n      case ExportQueryType.IssuesByTag:\n        return `/organizations/${orgId}/issues/`;\n      case ExportQueryType.Discover:\n        return `/organizations/${orgId}/discover/queries/`;\n      default:\n        return '/';\n    }\n  }\n\n  renderDate(date: string | undefined): React.ReactNode {\n    if (!date) {\n      return null;\n    }\n    const d = new Date(date);\n    return (\n      <strong>\n        <DateTime date={d} />\n      </strong>\n    );\n  }\n\n  renderEarly(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <Header>\n          <h3>\n            {t('What are')}\n            <i>{t(' you ')}</i>\n            {t('doing here?')}\n          </h3>\n        </Header>\n        <Body>\n          <p>\n            {t(\n              \"Not that its any of our business, but were you invited to this page? It's just that we don't exactly remember emailing you about it.\"\n            )}\n          </p>\n          <p>{t(\"Close this window and we'll email you when your download is ready.\")}</p>\n        </Body>\n      </React.Fragment>\n    );\n  }\n\n  renderExpired(): React.ReactNode {\n    const {query} = this.state.download;\n    const actionLink = this.getActionLink(query.type);\n    return (\n      <React.Fragment>\n        <Header>\n          <h3>{t('This is awkward.')}</h3>\n        </Header>\n        <Body>\n          <p>\n            {t(\n              \"That link expired, so your download doesn't live here anymore. Just picked up one day and left town.\"\n            )}\n          </p>\n          <p>\n            {t(\n              'Make a new one with your latest data. Your old download will never see it coming.'\n            )}\n          </p>\n          <DownloadButton href={actionLink} priority=\"primary\">\n            {t('Start a New Download')}\n          </DownloadButton>\n        </Body>\n      </React.Fragment>\n    );\n  }\n\n  openInDiscover() {\n    const {\n      download: {\n        query: {info},\n      },\n    } = this.state;\n    const {orgId} = this.props.params;\n\n    const to = {\n      pathname: `/organizations/${orgId}/discover/results/`,\n      query: info,\n    };\n\n    browserHistory.push(to);\n  }\n\n  renderOpenInDiscover() {\n    const {\n      download: {\n        query = {\n          type: ExportQueryType.IssuesByTag,\n          info: {},\n        },\n      },\n    } = this.state;\n\n    // default to IssuesByTag because we don't want to\n    // display this unless we're sure its a discover query\n    const {type = ExportQueryType.IssuesByTag} = query;\n\n    return type === 'Discover' ? (\n      <React.Fragment>\n        <p>{t('Need to make changes?')}</p>\n        <Button priority=\"primary\" onClick={() => this.openInDiscover()}>\n          {t('Open in Discover')}\n        </Button>\n        <br />\n      </React.Fragment>\n    ) : null;\n  }\n\n  renderValid(): React.ReactNode {\n    const {\n      download: {dateExpired, checksum},\n    } = this.state;\n    const {orgId, dataExportId} = this.props.params;\n\n    return (\n      <React.Fragment>\n        <Header>\n          <h3>{t('All done.')}</h3>\n        </Header>\n        <Body>\n          <p>{t(\"See, that wasn't so bad. Your data is all ready for download.\")}</p>\n          <Button\n            priority=\"primary\"\n            icon={<IconDownload />}\n            href={`/api/0/organizations/${orgId}/data-export/${dataExportId}/?download=true`}\n          >\n            {t('Download CSV')}\n          </Button>\n          <p>\n            {t(\"That link won't last forever — it expires:\")}\n            <br />\n            {this.renderDate(dateExpired)}\n          </p>\n          {this.renderOpenInDiscover()}\n          <p>\n            <small>\n              <strong>SHA1:{checksum}</strong>\n            </small>\n            <br />\n            {tct('Need help verifying? [link].', {\n              link: (\n                <a\n                  href=\"https://docs.sentry.io/product/discover-queries/query-builder/#filter-by-table-columns\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {t('Check out our docs')}\n                </a>\n              ),\n            })}\n          </p>\n        </Body>\n      </React.Fragment>\n    );\n  }\n\n  renderError(): React.ReactNode {\n    const {\n      errors: {download: err},\n    } = this.state;\n    const errDetail = err?.responseJSON?.detail;\n    return (\n      <Layout>\n        <main>\n          <Header>\n            <h3>\n              {err.status} - {err.statusText}\n            </h3>\n          </Header>\n          {errDetail && (\n            <Body>\n              <p>{errDetail}</p>\n            </Body>\n          )}\n        </main>\n      </Layout>\n    );\n  }\n\n  renderContent(): React.ReactNode {\n    const {download} = this.state;\n    switch (download.status) {\n      case DownloadStatus.Early:\n        return this.renderEarly();\n      case DownloadStatus.Expired:\n        return this.renderExpired();\n      default:\n        return this.renderValid();\n    }\n  }\n\n  renderBody() {\n    return (\n      <Layout>\n        <main>{this.renderContent()}</main>\n      </Layout>\n    );\n  }\n}\n\nconst Header = styled('header')`\n  border-bottom: 1px solid ${p => p.theme.border};\n  padding: ${space(3)} 40px 0;\n  h3 {\n    font-size: 24px;\n    margin: 0 0 ${space(3)} 0;\n  }\n`;\n\nconst Body = styled('div')`\n  padding: ${space(2)} 40px;\n  max-width: 500px;\n  p {\n    margin: ${space(1.5)} 0;\n  }\n`;\n\nconst DownloadButton = styled(Button)`\n  margin-bottom: ${space(1.5)};\n`;\n\nexport default DataDownload;\n"],"names":["ExportQueryType","DataExport","React","this","initialState","setState","api","organization","slug","payload","queryType","queryInfo","props","inProgress","requestPromise","includeAllArgs","method","data","query_type","query_info","then","_data","_","response","addSuccessMessage","status","t","catch","err","message","responseJSON","detail","addErrorMessage","componentDidUpdate","prevPayload","isEqual","resetState","render","state","children","disabled","icon","features","size","priority","title","onClick","debounce","startDataExport","withApi","withOrganization","AsyncView","AsyncComponent","getTitle","renderComponent","DownloadStatus","DataDownload","getEndpoints","orgId","dataExportId","params","getActionLink","renderDate","date","d","Date","renderEarly","Header","Body","renderExpired","query","download","actionLink","type","DownloadButton","href","openInDiscover","info","to","pathname","browserHistory","renderOpenInDiscover","renderValid","dateExpired","checksum","tct","link","target","rel","renderError","errors","errDetail","statusText","renderContent","Early","Expired","renderBody","p","theme","border","space","Button"],"sourceRoot":""}