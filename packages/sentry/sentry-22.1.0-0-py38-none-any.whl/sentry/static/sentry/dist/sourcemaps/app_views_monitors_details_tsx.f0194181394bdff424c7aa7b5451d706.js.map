{"version":3,"file":"chunks/app_views_monitors_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/monitors/checkInIcon.tsx","webpack:///./app/views/monitors/monitorCheckIns.tsx","webpack:///./app/views/monitors/monitorHeaderActions.tsx","webpack:///./app/utils/logging.tsx","webpack:///./app/views/monitors/monitorHeader.tsx","webpack:///./app/components/issueList.tsx","webpack:///./app/views/monitors/monitorIssues.tsx","webpack:///./app/views/monitors/monitorStats.tsx","webpack:///./app/views/monitors/details.tsx","webpack:///./app/views/monitors/monitorIcon.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\ntype Props = {\n  size: number | string;\n  status: 'error' | 'ok';\n  color?: string;\n};\n\nexport default styled('div')<Props>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n\n  ${p =>\n    p.color\n      ? `background: ${p.color};`\n      : `background: ${\n          p.status === 'error'\n            ? p.theme.error\n            : p.status === 'ok'\n            ? p.theme.success\n            : p.theme.disabled\n        };`};\n`;\n","import styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Duration from 'sentry/components/duration';\nimport {PanelBody, PanelItem} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport space from 'sentry/styles/space';\nimport {Monitor} from 'sentry/views/monitors/types';\n\nimport CheckInIcon from './checkInIcon';\n\ntype CheckIn = {\n  dateCreated: string;\n  duration: number;\n  id: string;\n  status: 'ok' | 'error';\n};\n\ntype Props = {\n  monitor: Monitor;\n} & AsyncComponent['props'];\n\ntype State = {\n  checkInList: CheckIn[];\n} & AsyncComponent['state'];\n\nexport default class MonitorCheckIns extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {monitor} = this.props;\n    return [\n      ['checkInList', `/monitors/${monitor.id}/checkins/`, {query: {per_page: 10}}],\n    ];\n  }\n\n  renderError() {\n    return <ErrorWrapper>{super.renderError()}</ErrorWrapper>;\n  }\n\n  renderBody() {\n    return (\n      <PanelBody>\n        {this.state.checkInList.map(checkIn => (\n          <PanelItem key={checkIn.id}>\n            <CheckInIconWrapper>\n              <CheckInIcon status={checkIn.status} size={16} />\n            </CheckInIconWrapper>\n            <TimeSinceWrapper>\n              <TimeSince date={checkIn.dateCreated} />\n            </TimeSinceWrapper>\n            <DurationWrapper>\n              {checkIn.duration && <Duration seconds={checkIn.duration / 100} />}\n            </DurationWrapper>\n          </PanelItem>\n        ))}\n      </PanelBody>\n    );\n  }\n}\n\nconst DivMargin = styled('div')`\n  margin-right: ${space(2)};\n`;\n\nconst CheckInIconWrapper = styled(DivMargin)`\n  display: flex;\n  align-items: center;\n`;\n\nconst TimeSinceWrapper = styled(DivMargin)`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst DurationWrapper = styled('div')`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst ErrorWrapper = styled('div')`\n  margin: ${space(3)} ${space(3)} 0;\n`;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Confirm from 'sentry/components/confirm';\nimport {IconDelete, IconEdit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {logException} from 'sentry/utils/logging';\nimport useApi from 'sentry/utils/useApi';\n\nimport {Monitor} from './types';\n\ntype Props = {\n  monitor: Monitor;\n  orgId: string;\n  onUpdate: (data: Monitor) => void;\n};\n\nconst MonitorHeaderActions = ({monitor, orgId, onUpdate}: Props) => {\n  const api = useApi();\n\n  const handleDelete = () => {\n    const redirectPath = `/organizations/${orgId}/monitors/`;\n    addLoadingMessage(t('Deleting Monitor...'));\n\n    api\n      .requestPromise(`/monitors/${monitor.id}/`, {\n        method: 'DELETE',\n      })\n      .then(() => {\n        browserHistory.push(redirectPath);\n      })\n      .catch(() => {\n        addErrorMessage(t('Unable to remove monitor.'));\n      });\n  };\n\n  const updateMonitor = (data: Partial<Monitor>) => {\n    addLoadingMessage();\n    api\n      .requestPromise(`/monitors/${monitor.id}/`, {\n        method: 'PUT',\n        data,\n      })\n      .then(resp => {\n        clearIndicators();\n        onUpdate?.(resp);\n      })\n      .catch(err => {\n        logException(err);\n        addErrorMessage(t('Unable to update monitor.'));\n      });\n  };\n\n  const toggleStatus = () =>\n    updateMonitor({\n      status: monitor.status === 'disabled' ? 'active' : 'disabled',\n    });\n\n  return (\n    <ButtonContainer>\n      <ButtonBar gap={1}>\n        <Button\n          size=\"small\"\n          icon={<IconEdit size=\"xs\" />}\n          to={`/organizations/${orgId}/monitors/${monitor.id}/edit/`}\n        >\n          &nbsp;\n          {t('Edit')}\n        </Button>\n        <Button size=\"small\" onClick={toggleStatus}>\n          {monitor.status !== 'disabled' ? t('Pause') : t('Enable')}\n        </Button>\n        <Confirm\n          onConfirm={handleDelete}\n          message={t(\n            'Deleting this monitor is permanent. Are you sure you wish to continue?'\n          )}\n        >\n          <Button size=\"small\" icon={<IconDelete size=\"xs\" />}>\n            {t('Delete')}\n          </Button>\n        </Confirm>\n      </ButtonBar>\n    </ButtonContainer>\n  );\n};\n\nconst ButtonContainer = styled('div')`\n  margin-bottom: ${space(3)};\n  display: flex;\n  flex-shrink: 1;\n`;\n\nexport default MonitorHeaderActions;\n","import * as Sentry from '@sentry/react';\n\nexport function logException(ex: Error, context?: any): void {\n  Sentry.withScope(scope => {\n    if (context) {\n      scope.setExtra('context', context);\n    }\n\n    Sentry.captureException(ex);\n  });\n  /* eslint no-console:0 */\n  window.console && console.error && console.error(ex);\n}\n","import * as React from 'react';\n\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\n\nimport MonitorHeaderActions from './monitorHeaderActions';\nimport MonitorIcon from './monitorIcon';\n\ntype Props = React.ComponentProps<typeof MonitorHeaderActions>;\n\nconst MonitorHeader = ({monitor, orgId, onUpdate}: Props) => (\n  <div className=\"release-details\">\n    <div className=\"row\">\n      <div className=\"col-sm-6 col-xs-10\">\n        <h3>{monitor.name}</h3>\n        <div className=\"release-meta\">{monitor.id}</div>\n      </div>\n      <div className=\"col-sm-2 hidden-xs\">\n        <h6 className=\"nav-header\">{t('Last Check-in')}</h6>\n        {monitor.lastCheckIn && <TimeSince date={monitor.lastCheckIn} />}\n      </div>\n      <div className=\"col-sm-2 hidden-xs\">\n        <h6 className=\"nav-header\">{t('Next Check-in')}</h6>\n        {monitor.nextCheckIn && <TimeSince date={monitor.nextCheckIn} />}\n      </div>\n      <div className=\"col-sm-2\">\n        <h6 className=\"nav-header\">{t('Status')}</h6>\n        <MonitorIcon status={monitor.status} size={16} />\n      </div>\n    </div>\n    <MonitorHeaderActions orgId={orgId} monitor={monitor} onUpdate={onUpdate} />\n  </div>\n);\n\nexport default MonitorHeader;\n","import * as React from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\n\nimport {Client} from 'sentry/api';\nimport CompactIssue from 'sentry/components/issues/compactIssue';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {IconSearch} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Group} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype Props = WithRouterProps & {\n  api: Client;\n  endpoint: string;\n  emptyText?: string;\n  query?: Record<string, any>;\n  pagination?: boolean;\n  renderEmpty?: () => React.ReactElement;\n  noBorder?: boolean;\n  noMargin?: boolean;\n};\n\ntype State = {\n  issueIds: Array<string>;\n  loading: boolean;\n  error: boolean;\n  pageLinks: string | null;\n  data: Array<Group>;\n};\n\nclass IssueList extends React.Component<Props, State> {\n  state: State = this.getInitialState();\n\n  getInitialState(): State {\n    return {\n      issueIds: [],\n      loading: true,\n      error: false,\n      pageLinks: null,\n      data: [],\n    };\n  }\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const {location} = this.props;\n    const nextLocation = nextProps.location;\n\n    if (!location) {\n      return;\n    }\n\n    if (\n      location.pathname !== nextLocation.pathname ||\n      location.search !== nextLocation.search\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  remountComponent() {\n    this.setState(this.getInitialState(), this.fetchData);\n  }\n\n  fetchData = () => {\n    const {location, api, endpoint, query} = this.props;\n    api.clear();\n    api.request(endpoint, {\n      method: 'GET',\n      query: {\n        cursor: (location && location.query && location.query.cursor) || '',\n        ...query,\n      },\n      success: (data, _, resp) => {\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n          issueIds: data.map(item => item.id),\n          pageLinks: resp?.getResponseHeader('Link') ?? null,\n        });\n      },\n      error: () => {\n        this.setState({loading: false, error: true});\n      },\n    });\n  };\n\n  renderError() {\n    return (\n      <div style={{margin: `${space(2)} ${space(2)} 0`}}>\n        <LoadingError onRetry={this.fetchData} />\n      </div>\n    );\n  }\n\n  renderLoading() {\n    return (\n      <div style={{margin: '18px 18px 0'}}>\n        <LoadingIndicator />\n      </div>\n    );\n  }\n\n  renderEmpty() {\n    const {emptyText} = this.props;\n    const {noBorder, noMargin} = this.props;\n    const panelStyle: React.CSSProperties = noBorder ? {border: 0, borderRadius: 0} : {};\n    if (noMargin) {\n      panelStyle.marginBottom = 0;\n    }\n\n    return (\n      <Panel style={panelStyle}>\n        <EmptyMessage icon={<IconSearch size=\"xl\" />}>\n          {emptyText ? emptyText : t('Nothing to show here, move along.')}\n        </EmptyMessage>\n      </Panel>\n    );\n  }\n\n  renderResults() {\n    const {noBorder, noMargin, renderEmpty} = this.props;\n    const {loading, error, issueIds, data} = this.state;\n\n    if (loading) {\n      return this.renderLoading();\n    }\n\n    if (error) {\n      return this.renderError();\n    }\n\n    if (issueIds.length > 0) {\n      const panelStyle: React.CSSProperties = noBorder\n        ? {border: 0, borderRadius: 0}\n        : {};\n      if (noMargin) {\n        panelStyle.marginBottom = 0;\n      }\n\n      return (\n        <Panel style={panelStyle}>\n          <PanelBody className=\"issue-list\">\n            {data.map(issue => (\n              <CompactIssue key={issue.id} id={issue.id} data={issue} />\n            ))}\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    return renderEmpty?.() || this.renderEmpty();\n  }\n\n  render() {\n    const {pageLinks} = this.state;\n    const {pagination} = this.props;\n\n    return (\n      <React.Fragment>\n        {this.renderResults()}\n        {pagination && pageLinks && <Pagination pageLinks={pageLinks} {...this.props} />}\n      </React.Fragment>\n    );\n  }\n}\n\nexport {IssueList};\n\nexport default withRouter(withApi(IssueList));\n","import IssueList from 'sentry/components/issueList';\nimport {t} from 'sentry/locale';\n\nimport {Monitor} from './types';\n\ntype Props = {\n  orgId: string;\n  monitor: Monitor;\n};\n\nconst MonitorIssues = ({orgId, monitor}: Props) => (\n  <IssueList\n    endpoint={`/organizations/${orgId}/issues/`}\n    query={{\n      query: 'monitor.id:\"' + monitor.id + '\"',\n      project: monitor.project.id,\n      limit: 5,\n    }}\n    pagination={false}\n    emptyText={t('No issues found')}\n    noBorder\n    noMargin\n  />\n);\n\nexport default MonitorIssues;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport theme from 'sentry/utils/theme';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\nimport {Monitor, MonitorStat} from './types';\n\ntype Props = AsyncComponent['props'] & {\n  monitor: Monitor;\n};\n\ntype State = AsyncComponent['state'] & {\n  stats: MonitorStat[] | null;\n};\n\ntype Stat = {name: string; value: number};\n\nexport default class MonitorStats extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {monitor} = this.props;\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    return [\n      [\n        'stats',\n        `/monitors/${monitor.id}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderBody() {\n    let emptyStats = true;\n    const success = {\n      seriesName: t('Successful'),\n      data: [] as Stat[],\n    };\n    const failed = {\n      seriesName: t('Failed'),\n      data: [] as Stat[],\n    };\n    this.state.stats?.forEach(p => {\n      if (p.ok || p.error) {\n        emptyStats = false;\n      }\n      const timestamp = p.ts * 1000;\n      success.data.push({name: timestamp.toString(), value: p.ok});\n      failed.data.push({name: timestamp.toString(), value: p.error});\n    });\n    const colors = [theme.green300, theme.red300];\n\n    return (\n      <Panel>\n        <PanelBody withPadding>\n          {!emptyStats ? (\n            <MiniBarChart\n              isGroupedByDate\n              showTimeInTooltip\n              labelYAxisExtents\n              stacked\n              colors={colors}\n              height={150}\n              series={[success, failed]}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('All check-ins for this monitor.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport MonitorCheckIns from './monitorCheckIns';\nimport MonitorHeader from './monitorHeader';\nimport MonitorIssues from './monitorIssues';\nimport MonitorStats from './monitorStats';\nimport {Monitor} from './types';\n\ntype Props = AsyncView['props'] &\n  RouteComponentProps<{orgId: string; monitorId: string}, {}>;\n\ntype State = AsyncView['state'] & {\n  monitor: Monitor | null;\n};\n\nclass MonitorDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {params, location} = this.props;\n    return [['monitor', `/monitors/${params.monitorId}/`, {query: location.query}]];\n  }\n\n  getTitle() {\n    if (this.state.monitor) {\n      return `${this.state.monitor.name} - Monitors - ${this.props.params.orgId}`;\n    }\n    return `Monitors - ${this.props.params.orgId}`;\n  }\n\n  onUpdate = (data: Monitor) =>\n    this.setState(state => ({monitor: {...state.monitor, ...data}}));\n\n  renderBody() {\n    const {monitor} = this.state;\n\n    if (monitor === null) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <MonitorHeader\n          monitor={monitor}\n          orgId={this.props.params.orgId}\n          onUpdate={this.onUpdate}\n        />\n\n        <MonitorStats monitor={monitor} />\n\n        <Panel style={{paddingBottom: 0}}>\n          <PanelHeader>{t('Related Issues')}</PanelHeader>\n\n          <MonitorIssues monitor={monitor} orgId={this.props.params.orgId} />\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Recent Check-ins')}</PanelHeader>\n\n          <MonitorCheckIns monitor={monitor} />\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default MonitorDetails;\n","import styled from '@emotion/styled';\n\nimport {Status} from './types';\n\nexport default styled('div')<{size: number; status: Status}>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  height: ${p => p.size}px;\n  width: ${p => p.size}px;\n\n  ${p =>\n    p.color\n      ? `background: ${p.color};`\n      : `background: ${\n          p.status === 'error'\n            ? p.theme.error\n            : p.status === 'ok'\n            ? p.theme.success\n            : p.theme.disabled\n        };`};\n`;\n"],"names":["p","size","color","status","theme","error","success","disabled","MonitorCheckIns","AsyncComponent","getEndpoints","monitor","this","props","id","query","per_page","renderError","ErrorWrapper","super","renderBody","state","checkInList","map","checkIn","CheckInIconWrapper","TimeSinceWrapper","date","dateCreated","DurationWrapper","duration","seconds","DivMargin","space","MonitorHeaderActions","orgId","onUpdate","api","useApi","ButtonContainer","gap","icon","to","t","onClick","updateMonitor","data","addLoadingMessage","requestPromise","method","then","resp","clearIndicators","catch","err","ex","Sentry","scope","window","console","addErrorMessage","onConfirm","redirectPath","browserHistory","message","MonitorHeader","className","name","lastCheckIn","nextCheckIn","IssueList","React","getInitialState","location","endpoint","clear","request","cursor","_","setState","loading","issueIds","item","pageLinks","getResponseHeader","componentWillMount","fetchData","componentWillReceiveProps","nextProps","nextLocation","pathname","search","remountComponent","style","margin","onRetry","renderLoading","renderEmpty","emptyText","noBorder","noMargin","panelStyle","border","borderRadius","marginBottom","renderResults","length","issue","render","pagination","withRouter","withApi","MonitorIssues","project","limit","MonitorStats","until","Math","floor","Date","getTime","since","resolution","emptyStats","seriesName","failed","stats","forEach","ok","timestamp","ts","push","toString","value","colors","withPadding","title","description","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","stacked","height","series","MonitorDetails","AsyncView","params","monitorId","getTitle","Fragment","paddingBottom"],"sourceRoot":""}