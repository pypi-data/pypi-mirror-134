{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupTagValues_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/dataExport.tsx","webpack:///./app/components/deviceName.tsx","webpack:///./app/views/organizationGroupDetails/groupTagValues.tsx"],"sourcesContent":["import * as React from 'react';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\n// NOTE: Coordinate with other ExportQueryType (src/sentry/data_export/base.py)\nexport enum ExportQueryType {\n  IssuesByTag = 'Issues-by-Tag',\n  Discover = 'Discover',\n}\n\ntype DataExportPayload = {\n  queryType: ExportQueryType;\n  queryInfo: any; // TODO(ts): Formalize different possible payloads\n};\n\ntype Props = {\n  api: Client;\n  disabled?: boolean;\n  organization: Organization;\n  payload: DataExportPayload;\n  icon?: React.ReactNode;\n};\n\ntype State = {\n  inProgress: boolean;\n};\n\nclass DataExport extends React.Component<Props, State> {\n  state = this.initialState;\n\n  componentDidUpdate({payload: prevPayload}) {\n    const {payload} = this.props;\n    if (!isEqual(prevPayload, payload)) {\n      this.resetState();\n    }\n  }\n\n  get initialState(): State {\n    return {\n      inProgress: false,\n    };\n  }\n\n  resetState = () => {\n    this.setState(this.initialState);\n  };\n\n  startDataExport = () => {\n    const {\n      api,\n      organization: {slug},\n      payload: {queryType, queryInfo},\n    } = this.props;\n\n    this.setState({inProgress: true});\n\n    api\n      .requestPromise(`/organizations/${slug}/data-export/`, {\n        includeAllArgs: true,\n        method: 'POST',\n        data: {\n          query_type: queryType,\n          query_info: queryInfo,\n        },\n      })\n      .then(([_data, _, response]) => {\n        addSuccessMessage(\n          response?.status === 201\n            ? t(\n                \"Sit tight. We'll shoot you an email when your data is ready for download.\"\n              )\n            : t(\"It looks like we're already working on it. Sit tight, we'll email you.\")\n        );\n      })\n      .catch(err => {\n        const message =\n          err?.responseJSON?.detail ??\n          \"We tried our hardest, but we couldn't export your data. Give it another go.\";\n        addErrorMessage(t(message));\n        this.setState({inProgress: false});\n      });\n  };\n\n  render() {\n    const {inProgress} = this.state;\n    const {children, disabled, icon} = this.props;\n    return (\n      <Feature features={['organizations:discover-query']}>\n        {inProgress ? (\n          <Button\n            size=\"small\"\n            priority=\"default\"\n            title=\"You can get on with your life. We'll email you when your data's ready.\"\n            {...this.props}\n            disabled\n            icon={icon}\n          >\n            {t(\"We're working on it...\")}\n          </Button>\n        ) : (\n          <Button\n            onClick={debounce(this.startDataExport, 500)}\n            disabled={disabled || false}\n            size=\"small\"\n            priority=\"default\"\n            title=\"Put your data to work. Start your export and we'll email you when it's finished.\"\n            icon={icon}\n            {...this.props}\n          >\n            {children ? children : t('Export All to CSV')}\n          </Button>\n        )}\n      </Feature>\n    );\n  }\n}\n\nexport {DataExport};\nexport default withApi(withOrganization(DataExport));\n","import * as React from 'react';\n\nimport {IOSDeviceList} from 'sentry/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model.split(' ').splice(1).join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import('ios-device-list');\n}\n\ntype Props = {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted?: boolean;\n\n  render() {\n    const {value, children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // value can be undefined, need to return null or else react throws\n    if (!value) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return value;\n    }\n\n    const deviceName = deviceNameMapper(value, iOSDeviceList);\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {children ? children(deviceName) : deviceName}\n      </span>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport DataExport, {ExportQueryType} from 'sentry/components/dataExport';\nimport DeviceName from 'sentry/components/deviceName';\nimport DropdownLink from 'sentry/components/dropdownLink';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconArrow, IconEllipsis, IconMail, IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Group, Project, SavedQueryVersions, Tag, TagValue} from 'sentry/types';\nimport {isUrl, percent} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\n\ntype RouteParams = {\n  groupId: string;\n  orgId: string;\n  tagKey: string;\n};\n\ntype Props = {\n  baseUrl: string;\n  group: Group;\n  project?: Project;\n  environments?: string[];\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  tag: Tag | null;\n  tagValueList: TagValue[] | null;\n  tagValueListPageLinks: string;\n};\n\nconst DEFAULT_SORT = 'count';\n\nclass GroupTagValues extends AsyncComponent<\n  Props & AsyncComponent['props'],\n  State & AsyncComponent['state']\n> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {environments: environment} = this.props;\n    const {groupId, tagKey} = this.props.params;\n    return [\n      ['tag', `/issues/${groupId}/tags/${tagKey}/`],\n      [\n        'tagValueList',\n        `/issues/${groupId}/tags/${tagKey}/values/`,\n        {query: {environment, sort: this.getSort()}},\n      ],\n    ];\n  }\n\n  getSort(): string {\n    return this.props.location.query.sort || DEFAULT_SORT;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderResults() {\n    const {\n      baseUrl,\n      project,\n      environments: environment,\n      params: {orgId, groupId, tagKey},\n    } = this.props;\n    const {tagValueList, tag} = this.state;\n    const discoverFields = [\n      'title',\n      'release',\n      'environment',\n      'user.display',\n      'timestamp',\n    ];\n\n    return tagValueList?.map((tagValue, tagValueIdx) => {\n      const pct = tag?.totalValues\n        ? `${percent(tagValue.count, tag?.totalValues).toFixed(2)}%`\n        : '--';\n      const key = tagValue.key ?? tagKey;\n      const issuesQuery = tagValue.query || `${key}:\"${tagValue.value}\"`;\n      const discoverView = EventView.fromSavedQuery({\n        id: undefined,\n        name: key,\n        fields: [key, ...discoverFields.filter(field => field !== key)],\n        orderby: '-timestamp',\n        query: `issue.id:${groupId} ${issuesQuery}`,\n        projects: [Number(project?.id)],\n        environment,\n        version: 2 as SavedQueryVersions,\n        range: '90d',\n      });\n      const issuesPath = `/organizations/${orgId}/issues/`;\n\n      return (\n        <Fragment key={tagValueIdx}>\n          <NameColumn>\n            <NameWrapper data-test-id=\"group-tag-value\">\n              <GlobalSelectionLink\n                to={{\n                  pathname: `${baseUrl}events/`,\n                  query: {query: issuesQuery},\n                }}\n              >\n                {key === 'user' ? (\n                  <UserBadge\n                    user={{...tagValue, id: tagValue.identifier ?? ''}}\n                    avatarSize={20}\n                    hideEmail\n                  />\n                ) : (\n                  <DeviceName value={tagValue.name} />\n                )}\n              </GlobalSelectionLink>\n            </NameWrapper>\n\n            {tagValue.email && (\n              <StyledExternalLink\n                href={`mailto:${tagValue.email}`}\n                data-test-id=\"group-tag-mail\"\n              >\n                <IconMail size=\"xs\" color=\"gray300\" />\n              </StyledExternalLink>\n            )}\n            {isUrl(tagValue.value) && (\n              <StyledExternalLink href={tagValue.value} data-test-id=\"group-tag-url\">\n                <IconOpen size=\"xs\" color=\"gray300\" />\n              </StyledExternalLink>\n            )}\n          </NameColumn>\n          <RightAlignColumn>{pct}</RightAlignColumn>\n          <RightAlignColumn>{tagValue.count.toLocaleString()}</RightAlignColumn>\n          <RightAlignColumn>\n            <TimeSince date={tagValue.lastSeen} />\n          </RightAlignColumn>\n          <RightAlignColumn>\n            <DropdownLink\n              anchorRight\n              alwaysRenderMenu={false}\n              caret={false}\n              title={\n                <Button\n                  tooltipProps={{\n                    containerDisplayMode: 'flex',\n                  }}\n                  size=\"small\"\n                  type=\"button\"\n                  aria-label={t('Show more')}\n                  icon={<IconEllipsis size=\"xs\" />}\n                />\n              }\n            >\n              <Feature features={['organizations:discover-basic']}>\n                <li>\n                  <Link to={discoverView.getResultsViewUrlTarget(orgId)}>\n                    {t('Open in Discover')}\n                  </Link>\n                </li>\n              </Feature>\n              <li>\n                <GlobalSelectionLink\n                  to={{pathname: issuesPath, query: {query: issuesQuery}}}\n                >\n                  {t('Search All Issues with Tag Value')}\n                </GlobalSelectionLink>\n              </li>\n            </DropdownLink>\n          </RightAlignColumn>\n        </Fragment>\n      );\n    });\n  }\n\n  renderBody() {\n    const {\n      group,\n      params: {orgId, tagKey},\n      location: {query},\n      environments,\n    } = this.props;\n    const {tagValueList, tag, tagValueListPageLinks, loading} = this.state;\n    const {cursor: _cursor, page: _page, ...currentQuery} = query;\n\n    const title = tagKey === 'user' ? t('Affected Users') : tagKey;\n\n    const sort = this.getSort();\n    const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction=\"down\" />;\n    const lastSeenColumnHeader = (\n      <StyledSortLink\n        to={{\n          pathname: location.pathname,\n          query: {\n            ...currentQuery,\n            sort: 'date',\n          },\n        }}\n      >\n        {t('Last Seen')} {sort === 'date' && sortArrow}\n      </StyledSortLink>\n    );\n    const countColumnHeader = (\n      <StyledSortLink\n        to={{\n          pathname: location.pathname,\n          query: {\n            ...currentQuery,\n            sort: 'count',\n          },\n        }}\n      >\n        {t('Count')} {sort === 'count' && sortArrow}\n      </StyledSortLink>\n    );\n\n    return (\n      <Fragment>\n        <TitleWrapper>\n          <Title>{t('Tag Details')}</Title>\n          <ButtonBar gap={1}>\n            <Button\n              size=\"small\"\n              priority=\"default\"\n              href={`/${orgId}/${group.project.slug}/issues/${group.id}/tags/${tagKey}/export/`}\n            >\n              {t('Export Page to CSV')}\n            </Button>\n            <DataExport\n              payload={{\n                queryType: ExportQueryType.IssuesByTag,\n                queryInfo: {\n                  project: group.project.id,\n                  group: group.id,\n                  key: tagKey,\n                },\n              }}\n            />\n          </ButtonBar>\n        </TitleWrapper>\n        <StyledPanelTable\n          isLoading={loading}\n          isEmpty={tagValueList?.length === 0}\n          headers={[\n            title,\n            <PercentColumnHeader key=\"percent\">{t('Percent')}</PercentColumnHeader>,\n            countColumnHeader,\n            lastSeenColumnHeader,\n            '',\n          ]}\n          emptyMessage={t('Sorry, the tags for this issue could not be found.')}\n          emptyAction={\n            !!environments?.length\n              ? t('No tags were found for the currently selected environments')\n              : null\n          }\n        >\n          {tagValueList && tag && this.renderResults()}\n        </StyledPanelTable>\n        <StyledPagination pageLinks={tagValueListPageLinks} />\n      </Fragment>\n    );\n  }\n}\n\nexport default GroupTagValues;\n\nconst TitleWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n`;\n\nconst Title = styled('h3')`\n  margin: 0;\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  white-space: nowrap;\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  overflow: auto;\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    overflow: initial;\n  }\n\n  & > * {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst PercentColumnHeader = styled('div')`\n  text-align: right;\n`;\n\nconst StyledSortLink = styled(Link)`\n  text-align: right;\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n`;\n\nconst StyledExternalLink = styled(ExternalLink)`\n  margin-left: ${space(0.5)};\n`;\n\nconst Column = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst NameColumn = styled(Column)`\n  ${overflowEllipsis};\n  display: flex;\n  min-width: 320px;\n`;\n\nconst NameWrapper = styled('span')`\n  ${overflowEllipsis};\n  width: auto;\n`;\n\nconst RightAlignColumn = styled(Column)`\n  justify-content: flex-end;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0;\n`;\n"],"names":["ExportQueryType","DataExport","React","this","initialState","setState","api","organization","slug","payload","queryType","queryInfo","props","inProgress","requestPromise","includeAllArgs","method","data","query_type","query_info","then","_data","_","response","addSuccessMessage","status","t","catch","err","message","responseJSON","detail","addErrorMessage","componentDidUpdate","prevPayload","isEqual","resetState","render","state","children","disabled","icon","features","size","priority","title","onClick","debounce","startDataExport","withApi","withOrganization","deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","async","loadDeviceListModule","DeviceName","constructor","super","componentDidMount","_isMounted","componentWillUnmount","value","deviceName","GroupTagValues","AsyncComponent","getEndpoints","environments","environment","groupId","tagKey","params","query","sort","getSort","location","renderLoading","renderBody","renderResults","baseUrl","project","orgId","tagValueList","tag","discoverFields","map","tagValue","tagValueIdx","pct","totalValues","percent","count","toFixed","key","issuesQuery","discoverView","EventView","id","name","fields","filter","field","orderby","projects","Number","version","range","issuesPath","Fragment","NameColumn","NameWrapper","to","pathname","user","identifier","avatarSize","hideEmail","email","StyledExternalLink","href","color","isUrl","RightAlignColumn","toLocaleString","date","lastSeen","anchorRight","alwaysRenderMenu","caret","tooltipProps","containerDisplayMode","type","getResultsViewUrlTarget","group","tagValueListPageLinks","loading","cursor","_cursor","page","_page","currentQuery","sortArrow","direction","lastSeenColumnHeader","StyledSortLink","countColumnHeader","TitleWrapper","Title","gap","StyledPanelTable","isLoading","isEmpty","length","headers","PercentColumnHeader","emptyMessage","emptyAction","StyledPagination","pageLinks","space","PanelTable","p","theme","fontSizeMedium","breakpoints","Link","ExternalLink","Column","overflowEllipsis","Pagination"],"sourceRoot":""}