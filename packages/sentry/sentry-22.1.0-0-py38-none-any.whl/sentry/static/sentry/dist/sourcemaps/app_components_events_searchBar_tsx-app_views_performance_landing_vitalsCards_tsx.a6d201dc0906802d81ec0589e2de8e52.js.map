{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_views_performance_landing_vitalsCards_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/vitals/vitalsCardsDiscoverQuery.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/components/sparklines/index.tsx","webpack:///./app/views/performance/vitalDetail/colorBar.tsx","webpack:///./app/views/performance/vitalDetail/vitalPercents.tsx","webpack:///./app/views/performance/landing/vitalsCards.tsx"],"sourcesContent":["import * as React from 'react';\nimport {ClassNames} from '@emotion/react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport {Client} from 'sentry/api';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport withApi from 'sentry/utils/withApi';\nimport withTags from 'sentry/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\ntype SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  api: Client;\n  organization: Organization;\n  tags: TagCollection;\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n  fields?: Readonly<Field[]>;\n};\n\nclass SearchBar extends React.PureComponent<SearchBarProps> {\n  componentDidMount() {\n    // Clear memoized data on mount to make tests more consistent.\n    this.getEventFieldValues.cache.clear?.();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(this.props.projectIds, prevProps.projectIds)) {\n      // Clear memoized data when projects change.\n      this.getEventFieldValues.cache.clear?.();\n    }\n  }\n\n  /**\n   * Returns array of tag values that substring match `query`; invokes `callback`\n   * with data when ready\n   */\n  getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const {api, organization, projectIds} = this.props;\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  prepareQuery = query => query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n\n  getTagList(\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) {\n    const {fields, organization, tags, omitTags} = this.props;\n\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const semverTags = organization.features.includes('semver')\n      ? Object.assign({}, SEMVER_TAGS, fieldTags)\n      : fieldTags;\n\n    const combined = assign({}, tags, semverTags);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  }\n\n  render() {\n    const {organization} = this.props;\n    return (\n      <Measurements organization={organization}>\n        {({measurements}) => {\n          const tags = this.getTagList(measurements);\n          return (\n            <ClassNames>\n              {({css}) => (\n                <SmartSearchBar\n                  hasRecentSearches\n                  savedSearchType={SavedSearchType.EVENT}\n                  onGetTagValues={this.getEventFieldValues}\n                  supportedTags={tags}\n                  prepareQuery={this.prepareQuery}\n                  excludeEnvironment\n                  dropdownClassName={css`\n                    max-height: 300px;\n                    overflow-y: auto;\n                  `}\n                  {...this.props}\n                />\n              )}\n            </ClassNames>\n          );\n        }}\n      </Measurements>\n    );\n  }\n}\n\nexport default withApi(withTags(SearchBar));\n","import * as React from 'react';\n\nimport {Organization} from 'sentry/types';\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\ntype Measurement = {\n  name: string;\n  key: string;\n};\n\ntype MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  organization: Organization;\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({organization, children}: Props) {\n  const measurements = organization.features.includes('performance-mobile-vitals')\n    ? {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS}\n    : WEB_MEASUREMENTS;\n  return <React.Fragment>{children({measurements})}</React.Fragment>;\n}\n\nexport default Measurements;\n","import * as React from 'react';\nimport pick from 'lodash/pick';\n\nimport {MetaType} from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport GenericDiscoverQuery, {\n  DiscoverQueryPropsWithContext,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\nimport withApi from 'sentry/utils/withApi';\n\nexport type TableDataRow = {\n  id: string;\n  [key: string]: React.ReactText;\n};\n\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\nexport type VitalData = {\n  poor: number;\n  meh: number;\n  good: number;\n  total: number;\n  p75: number | null;\n};\n\nexport type VitalsData = Record<string, VitalData>;\n\ntype VitalsProps = {\n  vitals: WebVital[];\n};\n\ntype RequestProps = DiscoverQueryPropsWithContext & VitalsProps;\n\ntype ChildrenProps = Omit<GenericChildrenProps<VitalsProps>, 'tableData'> & {\n  vitalsData: VitalsData | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getRequestPayload(props: RequestProps) {\n  const {eventView, vitals} = props;\n  const apiPayload = eventView?.getEventsAPIPayload(props.location);\n  return {\n    vital: vitals,\n    ...pick(apiPayload, ['query', ...Object.values(PERFORMANCE_URL_PARAM)]),\n  };\n}\n\nfunction VitalsCardsDiscoverQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<VitalsData, VitalsProps>\n      getRequestPayload={getRequestPayload}\n      route=\"events-vitals\"\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({vitalsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(VitalsCardsDiscoverQuery);\n","import * as React from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends React.Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Sparklines} from 'react-sparklines';\nimport PropTypes from 'prop-types';\n\n/**\n * This is required because:\n *\n * - React.Suspense only works with default exports\n * - typescript complains that the library's `propTypes` does not\n * have `children defined.\n * - typescript also won't let us access `Sparklines.propTypes`\n */\nexport default class SparklinesWithCustomPropTypes extends Sparklines {\n  static propTypes = {\n    children: PropTypes.node,\n    data: PropTypes.array,\n    limit: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    svgWidth: PropTypes.number,\n    svgHeight: PropTypes.number,\n    preserveAspectRatio: PropTypes.string,\n    margin: PropTypes.number,\n    style: PropTypes.object,\n    min: PropTypes.number,\n    max: PropTypes.number,\n    onMouseMove: PropTypes.func,\n  };\n}\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\n\ntype ColorStop = {\n  percent: number;\n  color: Color;\n};\n\ntype Props = {\n  colorStops: ColorStop[];\n  barHeight?: number;\n};\n\nconst ColorBar = (props: Props) => {\n  return (\n    <VitalBar\n      barHeight={props.barHeight}\n      fractions={props.colorStops.map(({percent}) => percent)}\n    >\n      {props.colorStops.map(colorStop => {\n        return <BarStatus color={colorStop.color} key={colorStop.color} />;\n      })}\n    </VitalBar>\n  );\n};\n\ntype VitalBarProps = {\n  fractions: number[];\n  barHeight?: number;\n};\n\nconst VitalBar = styled('div')<VitalBarProps>`\n  height: ${p => (p.barHeight ? `${p.barHeight}px` : '16px')};\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  background: ${p => p.theme.gray100};\n  display: grid;\n  grid-template-columns: ${p => p.fractions.map(f => `${f}fr`).join(' ')};\n  margin-bottom: ${p => (p.barHeight ? '' : space(1))};\n  border-radius: 2px;\n`;\n\ntype ColorProps = {\n  color: Color;\n};\n\nconst BarStatus = styled('div')<ColorProps>`\n  background-color: ${p => p.theme[p.color]};\n`;\n\nexport default ColorBar;\n","import styled from '@emotion/styled';\n\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport {formatPercentage} from 'sentry/utils/formatters';\n\nimport {VitalState, vitalStateIcons, webVitalMeh, webVitalPoor} from './utils';\n\ntype Percent = {\n  vitalState: VitalState;\n  percent: number;\n};\n\ntype Props = {\n  vital: WebVital | WebVital[];\n  percents: Percent[];\n  showVitalPercentNames?: boolean;\n  hideTooltips?: boolean;\n};\n\nfunction getVitalStateText(vital: WebVital | WebVital[], vitalState) {\n  const unit = !Array.isArray(vital) && vital !== WebVital.CLS ? 'ms' : '';\n  switch (vitalState) {\n    case VitalState.POOR:\n      return Array.isArray(vital)\n        ? t('Poor')\n        : tct('Poor: >[threshold][unit]', {threshold: webVitalPoor[vital], unit});\n    case VitalState.MEH:\n      return Array.isArray(vital)\n        ? t('Meh')\n        : tct('Meh: >[threshold][unit]', {threshold: webVitalMeh[vital], unit});\n    case VitalState.GOOD:\n      return Array.isArray(vital)\n        ? t('Good')\n        : tct('Good: <[threshold][unit]', {threshold: webVitalMeh[vital], unit});\n    default:\n      return null;\n  }\n}\n\nexport default function VitalPercents(props: Props) {\n  return (\n    <VitalSet>\n      {props.percents.map(pct => (\n        <Tooltip\n          key={pct.vitalState}\n          title={getVitalStateText(props.vital, pct.vitalState)}\n          disabled={props.hideTooltips}\n        >\n          <VitalStatus data-test-id=\"vital-status\">\n            {vitalStateIcons[pct.vitalState]}\n            <span>\n              {props.showVitalPercentNames && t(`${pct.vitalState}`)}{' '}\n              {formatPercentage(pct.percent, 0)}\n            </span>\n          </VitalStatus>\n        </Tooltip>\n      ))}\n    </VitalSet>\n  );\n}\n\nconst VitalSet = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n`;\n\nconst VitalStatus = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport Card from 'sentry/components/card';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitle} from 'sentry/components/charts/styles';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport Sparklines from 'sentry/components/sparklines';\nimport SparklinesLine from 'sentry/components/sparklines/line';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Column,\n  generateFieldAsString,\n  getAggregateAlias,\n  WebVital,\n} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport VitalsCardsDiscoverQuery, {\n  VitalData,\n  VitalsData,\n} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeList} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport useApi from 'sentry/utils/useApi';\n\nimport ColorBar from '../vitalDetail/colorBar';\nimport {\n  vitalAbbreviations,\n  vitalDetailRouteWithQuery,\n  vitalMap,\n  VitalState,\n  vitalStateColors,\n} from '../vitalDetail/utils';\nimport VitalPercents from '../vitalDetail/vitalPercents';\n\nimport {\n  getDefaultDisplayFieldForPlatform,\n  LandingDisplayField,\n  vitalCardDetails,\n} from './utils';\n\ntype FrontendCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  frontendOnly?: boolean;\n};\n\nexport function FrontendCards(props: FrontendCardsProps) {\n  const {eventView, location, organization, projects, frontendOnly = false} = props;\n\n  if (frontendOnly) {\n    const defaultDisplay = getDefaultDisplayFieldForPlatform(projects, eventView);\n    const isFrontend = defaultDisplay === LandingDisplayField.FRONTEND_PAGELOAD;\n\n    if (!isFrontend) {\n      return null;\n    }\n  }\n\n  const vitals = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n\n  return (\n    <VitalsCardsDiscoverQuery\n      eventView={eventView}\n      location={location}\n      orgSlug={organization.slug}\n      vitals={vitals}\n    >\n      {({isLoading, vitalsData}) => {\n        return (\n          <VitalsContainer>\n            {vitals.map(vital => {\n              const target = vitalDetailRouteWithQuery({\n                orgSlug: organization.slug,\n                query: eventView.generateQueryStringObject(),\n                vitalName: vital,\n                projectID: decodeList(location.query.project),\n              });\n\n              const value = isLoading\n                ? '\\u2014'\n                : getP75(vitalsData?.[vital] ?? null, vital);\n              const chart = (\n                <VitalBarContainer>\n                  <VitalBar isLoading={isLoading} vital={vital} data={vitalsData} />\n                </VitalBarContainer>\n              );\n\n              return (\n                <Link\n                  key={vital}\n                  to={target}\n                  data-test-id={`vitals-linked-card-${vitalAbbreviations[vital]}`}\n                >\n                  <VitalCard\n                    title={vitalMap[vital] ?? ''}\n                    tooltip={WEB_VITAL_DETAILS[vital].description ?? ''}\n                    value={isLoading ? '\\u2014' : value}\n                    chart={chart}\n                    minHeight={150}\n                  />\n                </Link>\n              );\n            })}\n          </VitalsContainer>\n        );\n      }}\n    </VitalsCardsDiscoverQuery>\n  );\n}\n\nconst VitalBarContainer = styled('div')`\n  margin-top: ${space(1.5)};\n`;\n\ntype BaseCardsProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\ntype GenericCardsProps = BaseCardsProps & {\n  functions: Column[];\n};\n\nfunction GenericCards(props: GenericCardsProps) {\n  const api = useApi();\n\n  const {eventView: baseEventView, location, organization, functions} = props;\n  const {query} = location;\n  const eventView = baseEventView.withColumns(functions);\n\n  // construct request parameters for fetching chart data\n  const globalSelection = eventView.getPageFilters();\n  const start = globalSelection.datetime.start\n    ? getUtcToLocalDateObject(globalSelection.datetime.start)\n    : undefined;\n  const end = globalSelection.datetime.end\n    ? getUtcToLocalDateObject(globalSelection.datetime.end)\n    : undefined;\n  const interval =\n    typeof query.sparkInterval === 'string'\n      ? query.sparkInterval\n      : getInterval(\n          {\n            start: start || null,\n            end: end || null,\n            period: globalSelection.datetime.period,\n          },\n          'low'\n        );\n  const apiPayload = eventView.getEventsAPIPayload(location);\n\n  return (\n    <DiscoverQuery\n      location={location}\n      eventView={eventView}\n      orgSlug={organization.slug}\n      limit={1}\n      referrer=\"api.performance.vitals-cards\"\n    >\n      {({isLoading: isSummaryLoading, tableData}) => (\n        <EventsRequest\n          api={api}\n          organization={organization}\n          period={globalSelection.datetime.period}\n          project={globalSelection.projects}\n          environment={globalSelection.environments}\n          team={apiPayload.team}\n          start={start}\n          end={end}\n          interval={interval}\n          query={apiPayload.query}\n          includePrevious={false}\n          yAxis={eventView.getFields()}\n          partial\n        >\n          {({results}) => {\n            const series = results?.reduce((allSeries, oneSeries) => {\n              allSeries[oneSeries.seriesName] = oneSeries.data.map(item => item.value);\n              return allSeries;\n            }, {});\n            const details = vitalCardDetails(organization);\n\n            return (\n              <VitalsContainer>\n                {functions.map(func => {\n                  let fieldName = generateFieldAsString(func);\n\n                  if (fieldName.includes('apdex')) {\n                    // Replace apdex with explicit thresholds with a generic one for lookup\n                    fieldName = 'apdex()';\n                  }\n\n                  const cardDetail = details[fieldName];\n                  if (!cardDetail) {\n                    Sentry.captureMessage(`Missing field '${fieldName}' in vital cards.`);\n                    return null;\n                  }\n\n                  const {title, tooltip, formatter} = cardDetail;\n                  const alias = getAggregateAlias(fieldName);\n                  const rawValue = tableData?.data?.[0]?.[alias];\n\n                  const data = series?.[fieldName];\n                  const value =\n                    isSummaryLoading || !defined(rawValue)\n                      ? '\\u2014'\n                      : formatter(rawValue);\n                  const chart = <SparklineChart data={data} />;\n                  return (\n                    <VitalCard\n                      key={fieldName}\n                      title={title}\n                      tooltip={tooltip}\n                      value={value}\n                      chart={chart}\n                      horizontal\n                      minHeight={96}\n                      isNotInteractive\n                    />\n                  );\n                })}\n              </VitalsContainer>\n            );\n          }}\n        </EventsRequest>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nfunction _BackendCards(props: BaseCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'transaction.duration', undefined, undefined],\n    },\n    {kind: 'function', function: ['tpm', '', undefined, undefined]},\n    {kind: 'function', function: ['failure_rate', '', undefined, undefined]},\n    {\n      kind: 'function',\n      function: ['apdex', '', undefined, undefined],\n    },\n  ];\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const BackendCards = _BackendCards;\n\ntype MobileCardsProps = BaseCardsProps & {\n  showStallPercentage: boolean;\n};\n\nfunction _MobileCards(props: MobileCardsProps) {\n  const functions: Column[] = [\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_cold', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['p75', 'measurements.app_start_warm', undefined, undefined],\n    },\n  ];\n  if (props.showStallPercentage) {\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.stall_percentage', undefined, undefined],\n    });\n  } else {\n    // TODO(tonyx): add these by default once the SDKs are ready\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.frames_slow_rate', undefined, undefined],\n    });\n    functions.push({\n      kind: 'function',\n      function: ['p75', 'measurements.frames_frozen_rate', undefined, undefined],\n    });\n  }\n  return <GenericCards {...props} functions={functions} />;\n}\n\nexport const MobileCards = _MobileCards;\n\ntype SparklineChartProps = {\n  data: number[];\n};\n\nfunction SparklineChart(props: SparklineChartProps) {\n  const {data} = props;\n  const width = 150;\n  const height = 24;\n  const lineColor = theme.charts.getColorPalette(1)[0];\n  return (\n    <SparklineContainer data-test-id=\"sparkline\" width={width} height={height}>\n      <Sparklines data={data} width={width} height={height}>\n        <SparklinesLine style={{stroke: lineColor, fill: 'none', strokeWidth: 3}} />\n      </Sparklines>\n    </SparklineContainer>\n  );\n}\n\ntype SparklineContainerProps = {\n  width: number;\n  height: number;\n};\n\nconst SparklineContainer = styled('div')<SparklineContainerProps>`\n  flex-grow: 4;\n  max-height: ${p => p.height}px;\n  max-width: ${p => p.width}px;\n  margin: ${space(1)} ${space(0)} ${space(0.5)} ${space(3)};\n`;\n\nconst VitalsContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints[2]}) {\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  }\n`;\n\ntype VitalBarProps = {\n  isLoading: boolean;\n  data: VitalsData | null;\n  vital: WebVital | WebVital[];\n  value?: string;\n  showBar?: boolean;\n  showStates?: boolean;\n  showDurationDetail?: boolean;\n  showVitalPercentNames?: boolean;\n  showDetail?: boolean;\n  showTooltip?: boolean;\n  barHeight?: number;\n};\n\nexport function VitalBar(props: VitalBarProps) {\n  const {\n    isLoading,\n    data,\n    vital,\n    value,\n    showBar = true,\n    showStates = false,\n    showDurationDetail = false,\n    showVitalPercentNames = false,\n    showDetail = true,\n    showTooltip = false,\n    barHeight,\n  } = props;\n\n  if (isLoading) {\n    return showStates ? <Placeholder height=\"48px\" /> : null;\n  }\n\n  const emptyState = showStates ? (\n    <EmptyVitalBar small>{t('No vitals found')}</EmptyVitalBar>\n  ) : null;\n\n  if (!data) {\n    return emptyState;\n  }\n\n  const counts: Pick<VitalData, 'poor' | 'meh' | 'good' | 'total'> = {\n    poor: 0,\n    meh: 0,\n    good: 0,\n    total: 0,\n  };\n  const vitals = Array.isArray(vital) ? vital : [vital];\n  vitals.forEach(vitalName => {\n    const c = data?.[vitalName] ?? {};\n    Object.keys(counts).forEach(countKey => (counts[countKey] += c[countKey]));\n  });\n\n  if (!counts.total) {\n    return emptyState;\n  }\n\n  const p75: React.ReactNode = Array.isArray(vital)\n    ? null\n    : value ?? getP75(data?.[vital] ?? null, vital);\n  const percents = getPercentsFromCounts(counts);\n  const colorStops = getColorStopsFromPercents(percents);\n\n  return (\n    <React.Fragment>\n      {showBar && (\n        <StyledTooltip\n          title={\n            <VitalPercents\n              vital={vital}\n              percents={percents}\n              showVitalPercentNames\n              hideTooltips={showTooltip}\n            />\n          }\n          disabled={!showTooltip}\n          position=\"bottom\"\n        >\n          <ColorBar barHeight={barHeight} colorStops={colorStops} />\n        </StyledTooltip>\n      )}\n      {showDetail && (\n        <BarDetail>\n          {showDurationDetail && p75 && (\n            <div>\n              {t('The p75 for all transactions is ')}\n              <strong>{p75}</strong>\n            </div>\n          )}\n\n          <VitalPercents\n            vital={vital}\n            percents={percents}\n            showVitalPercentNames={showVitalPercentNames}\n          />\n        </BarDetail>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst EmptyVitalBar = styled(EmptyStateWarning)`\n  height: 48px;\n  padding: ${space(1.5)} 15%;\n`;\n\ntype VitalCardProps = {\n  title: string;\n  tooltip: string;\n  value: string | number;\n  chart: React.ReactNode;\n  minHeight?: number;\n  horizontal?: boolean;\n  isNotInteractive?: boolean;\n};\n\nfunction VitalCard(props: VitalCardProps) {\n  const {chart, minHeight, horizontal, title, tooltip, value, isNotInteractive} = props;\n  return (\n    <StyledCard interactive={!isNotInteractive} minHeight={minHeight}>\n      <HeaderTitle>\n        <OverflowEllipsis>{t(title)}</OverflowEllipsis>\n        <QuestionTooltip size=\"sm\" position=\"top\" title={tooltip} />\n      </HeaderTitle>\n      <CardContent horizontal={horizontal}>\n        <CardValue>{value}</CardValue>\n        {chart}\n      </CardContent>\n    </StyledCard>\n  );\n}\n\nconst CardContent = styled('div')<{horizontal?: boolean}>`\n  width: 100%;\n  display: flex;\n  flex-direction: ${p => (p.horizontal ? 'row' : 'column')};\n  justify-content: space-between;\n`;\n\nconst StyledCard = styled(Card)<{minHeight?: number}>`\n  color: ${p => p.theme.textColor};\n  padding: ${space(2)} ${space(3)};\n  align-items: flex-start;\n  margin-bottom: ${space(2)};\n  ${p => p.minHeight && `min-height: ${p.minHeight}px`};\n`;\n\nconst StyledTooltip = styled(Tooltip)`\n  width: 100%;\n`;\n\nfunction getP75(data: VitalData | null, vitalName: WebVital): string {\n  const p75 = data?.p75 ?? null;\n  if (p75 === null) {\n    return '\\u2014';\n  }\n  return vitalName === WebVital.CLS ? p75.toFixed(2) : `${p75.toFixed(0)}ms`;\n}\n\ntype Percent = {\n  vitalState: VitalState;\n  percent: number;\n};\n\nfunction getPercentsFromCounts({poor, meh, good, total}) {\n  const poorPercent = poor / total;\n  const mehPercent = meh / total;\n  const goodPercent = good / total;\n\n  const percents: Percent[] = [\n    {\n      vitalState: VitalState.GOOD,\n      percent: goodPercent,\n    },\n    {\n      vitalState: VitalState.MEH,\n      percent: mehPercent,\n    },\n    {\n      vitalState: VitalState.POOR,\n      percent: poorPercent,\n    },\n  ];\n\n  return percents;\n}\n\nfunction getColorStopsFromPercents(percents: Percent[]) {\n  return percents.map(({percent, vitalState}) => ({\n    percent,\n    color: vitalStateColors[vitalState],\n  }));\n}\n\nconst BarDetail = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  @media (min-width: ${p => p.theme.breakpoints[0]}) {\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst CardValue = styled('div')`\n  font-size: 32px;\n  margin-top: ${space(1)};\n`;\n\nconst OverflowEllipsis = styled('div')`\n  ${overflowEllipsis};\n`;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","React","memoize","tag","query","endpointParams","api","organization","projectIds","this","props","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","replace","componentDidMount","getEventFieldValues","cache","clear","componentDidUpdate","prevProps","isEqual","getTagList","measurements","fields","tags","omitTags","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","semverTags","SEMVER_TAGS","combined","has","values","predefined","render","css","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","excludeEnvironment","dropdownClassName","withApi","withTags","measurementsFromDetails","details","entries","value","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","Measurements","children","getRequestPayload","eventView","vitals","apiPayload","getEventsAPIPayload","location","vital","pick","PERFORMANCE_URL_PARAM","VitalsCardsDiscoverQuery","route","tableData","rest","vitalsData","WrappedComponent","WithTags","TagStore","setState","undefined","componentWillUnmount","unsubscribe","state","getDisplayName","SparklinesWithCustomPropTypes","Sparklines","PropTypes","data","limit","width","height","svgWidth","svgHeight","preserveAspectRatio","margin","style","min","max","onMouseMove","ColorBar","VitalBar","barHeight","fractions","colorStops","percent","colorStop","BarStatus","color","p","theme","gray100","f","join","space","getVitalStateText","vitalState","unit","Array","isArray","WebVital","VitalState","t","tct","threshold","webVitalPoor","webVitalMeh","VitalPercents","VitalSet","percents","pct","title","disabled","hideTooltips","VitalStatus","vitalStateIcons","showVitalPercentNames","formatPercentage","fontSizeMedium","FrontendCards","projects","frontendOnly","getDefaultDisplayFieldForPlatform","LandingDisplayField","orgSlug","isLoading","VitalsContainer","target","vitalDetailRouteWithQuery","generateQueryStringObject","vitalName","projectID","decodeList","project","getP75","chart","VitalBarContainer","to","vitalAbbreviations","VitalCard","vitalMap","tooltip","description","minHeight","GenericCards","useApi","baseEventView","functions","withColumns","globalSelection","getPageFilters","start","datetime","getUtcToLocalDateObject","end","interval","sparkInterval","getInterval","period","referrer","isSummaryLoading","environment","environments","team","includePrevious","yAxis","getFields","partial","series","reduce","allSeries","oneSeries","seriesName","vitalCardDetails","func","fieldName","generateFieldAsString","cardDetail","Sentry","formatter","alias","getAggregateAlias","rawValue","SparklineChart","horizontal","isNotInteractive","_BackendCards","kind","function","BackendCards","_MobileCards","showStallPercentage","push","MobileCards","lineColor","SparklineContainer","SparklinesLine","stroke","fill","strokeWidth","breakpoints","showBar","showStates","showDurationDetail","showDetail","showTooltip","emptyState","EmptyVitalBar","small","counts","poor","meh","good","total","forEach","c","countKey","p75","poorPercent","mehPercent","goodPercent","getPercentsFromCounts","vitalStateColors","getColorStopsFromPercents","StyledTooltip","position","BarDetail","EmptyStateWarning","StyledCard","interactive","OverflowEllipsis","size","CardContent","CardValue","Card","textColor","Tooltip","toFixed","overflowEllipsis"],"sourceRoot":""}