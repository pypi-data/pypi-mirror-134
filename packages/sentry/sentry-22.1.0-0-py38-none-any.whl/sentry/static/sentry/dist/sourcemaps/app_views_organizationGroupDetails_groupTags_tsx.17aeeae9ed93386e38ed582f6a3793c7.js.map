{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupTags_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/deviceName.tsx","webpack:///./app/views/organizationGroupDetails/groupTags.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {IOSDeviceList} from 'sentry/types/iOSDeviceList';\n\nexport function deviceNameMapper(model: string, iOSDeviceList): string {\n  const modelIdentifier = model.split(' ')[0];\n  const modelId = model.split(' ').splice(1).join(' ');\n  const modelName = iOSDeviceList.generationByIdentifier(modelIdentifier);\n  return modelName === undefined ? model : modelName + ' ' + modelId;\n}\n\nexport async function loadDeviceListModule() {\n  return import('ios-device-list');\n}\n\ntype Props = {\n  value: string;\n  children?: (name: string) => React.ReactNode;\n};\n\ntype State = {\n  iOSDeviceList: IOSDeviceList | null;\n};\n/**\n * This is used to map iOS Device Names to model name.\n * This asynchronously loads the ios-device-list library because of its size\n */\nexport default class DeviceName extends React.Component<Props, State> {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      iOSDeviceList: null,\n    };\n  }\n\n  componentDidMount() {\n    // This is to handle react's warning on calling setState for unmounted components\n    // Since we can't cancel promises, we need to do this\n    this._isMounted = true;\n\n    // This library is very big, so we are codesplitting it based on size and\n    // the relatively small utility this library provides\n    loadDeviceListModule().then(iOSDeviceList => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      this.setState({iOSDeviceList});\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted?: boolean;\n\n  render() {\n    const {value, children} = this.props;\n    const {iOSDeviceList} = this.state;\n\n    // value can be undefined, need to return null or else react throws\n    if (!value) {\n      return null;\n    }\n\n    // If library has not loaded yet, then just render the raw model string, better than empty\n    if (!iOSDeviceList) {\n      return value;\n    }\n\n    const deviceName = deviceNameMapper(value, iOSDeviceList);\n\n    return (\n      <span data-test-id=\"loaded-device-name\">\n        {children ? children(deviceName) : deviceName}\n      </span>\n    );\n  }\n}\n","import * as React from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport Count from 'sentry/components/count';\nimport DeviceName from 'sentry/components/deviceName';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {extractSelectionParameters} from 'sentry/components/organizations/pageFilters/utils';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport Version from 'sentry/components/version';\nimport {t, tct} from 'sentry/locale';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {Group, TagWithTopValues} from 'sentry/types';\nimport {percent} from 'sentry/utils';\n\ntype Props = AsyncComponent['props'] & {\n  baseUrl: string;\n  group: Group;\n  environments: string[];\n} & RouteComponentProps<{}, {}>;\n\ntype State = AsyncComponent['state'] & {\n  tagList: null | TagWithTopValues[];\n};\n\nclass GroupTags extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      tagList: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {group, environments} = this.props;\n    return [\n      [\n        'tagList',\n        `/issues/${group.id}/tags/`,\n        {\n          query: {environment: environments},\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.environments, this.props.environments)) {\n      this.remountComponent();\n    }\n  }\n\n  renderTags() {\n    const {baseUrl, location} = this.props;\n    const {tagList} = this.state;\n\n    const alphabeticalTags = (tagList ?? []).sort((a, b) => a.key.localeCompare(b.key));\n\n    return (\n      <Container>\n        {alphabeticalTags.map((tag, tagIdx) => (\n          <TagItem key={tagIdx}>\n            <Panel>\n              <StyledPanelHeader hasButtons>\n                <TagHeading>{tag.key}</TagHeading>\n                <Button\n                  size=\"small\"\n                  to={{\n                    pathname: `${baseUrl}tags/${tag.key}/`,\n                    query: extractSelectionParameters(location.query),\n                  }}\n                >\n                  {t('More Details')}\n                </Button>\n              </StyledPanelHeader>\n              <PanelBody withPadding>\n                <UnstyledUnorderedList>\n                  {tag.topValues.map((tagValue, tagValueIdx) => (\n                    <li key={tagValueIdx} data-test-id={tag.key}>\n                      <TagBarGlobalSelectionLink\n                        to={{\n                          pathname: `${baseUrl}events/`,\n                          query: {\n                            query: tagValue.query || `${tag.key}:\"${tagValue.value}\"`,\n                          },\n                        }}\n                      >\n                        <TagBarBackground\n                          widthPercent={percent(tagValue.count, tag.totalValues) + '%'}\n                        />\n                        <TagBarLabel>\n                          {tag.key === 'release' ? (\n                            <Version version={tagValue.name} anchor={false} />\n                          ) : (\n                            <DeviceName value={tagValue.name} />\n                          )}\n                        </TagBarLabel>\n                        <TagBarCount>\n                          <Count value={tagValue.count} />\n                        </TagBarCount>\n                      </TagBarGlobalSelectionLink>\n                    </li>\n                  ))}\n                </UnstyledUnorderedList>\n              </PanelBody>\n            </Panel>\n          </TagItem>\n        ))}\n      </Container>\n    );\n  }\n\n  renderBody() {\n    return (\n      <div>\n        {this.renderTags()}\n        <Alert type=\"info\">\n          {tct(\n            'Tags are automatically indexed for searching and breakdown charts. Learn how to [link: add custom tags to issues]',\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/platform-redirect/?next=/enriching-events/tags\" />\n              ),\n            }\n          )}\n        </Alert>\n      </div>\n    );\n  }\n}\n\nconst Container = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst StyledPanelHeader = styled(PanelHeader)`\n  text-transform: none;\n`;\n\nconst TagHeading = styled('h5')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  margin-bottom: 0;\n`;\n\nconst UnstyledUnorderedList = styled('ul')`\n  list-style: none;\n  padding-left: 0;\n  margin-bottom: 0;\n`;\n\nconst TagItem = styled('div')`\n  padding: 0 ${space(1)};\n  width: 50%;\n`;\n\nconst TagBarBackground = styled('div')<{widthPercent: string}>`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  background: ${p => p.theme.tagBar};\n  border-radius: ${p => p.theme.borderRadius};\n  width: ${p => p.widthPercent};\n`;\n\nconst TagBarGlobalSelectionLink = styled(GlobalSelectionLink)`\n  position: relative;\n  display: flex;\n  line-height: 2.2;\n  color: ${p => p.theme.textColor};\n  margin-bottom: ${space(0.5)};\n  padding: 0 ${space(1)};\n  background: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  overflow: hidden;\n\n  &:hover {\n    color: ${p => p.theme.textColor};\n    text-decoration: underline;\n    ${TagBarBackground} {\n      background: ${p => p.theme.tagBarHover};\n    }\n  }\n`;\n\nconst TagBarLabel = styled('div')`\n  position: relative;\n  flex-grow: 1;\n  ${overflowEllipsis}\n`;\n\nconst TagBarCount = styled('div')`\n  position: relative;\n  padding-left: ${space(2)};\n  font-variant-numeric: tabular-nums;\n`;\n\nexport default GroupTags;\n"],"names":["deviceNameMapper","model","iOSDeviceList","modelIdentifier","split","modelId","splice","join","modelName","generationByIdentifier","undefined","async","loadDeviceListModule","DeviceName","React","constructor","props","super","this","state","componentDidMount","_isMounted","then","setState","componentWillUnmount","render","value","children","deviceName","GroupTags","AsyncComponent","getDefaultState","tagList","getEndpoints","group","environments","id","query","environment","componentDidUpdate","prevProps","isEqual","remountComponent","renderTags","baseUrl","location","alphabeticalTags","sort","a","b","key","localeCompare","Container","map","tag","tagIdx","TagItem","StyledPanelHeader","hasButtons","TagHeading","size","to","pathname","extractSelectionParameters","t","withPadding","UnstyledUnorderedList","topValues","tagValue","tagValueIdx","TagBarGlobalSelectionLink","TagBarBackground","widthPercent","percent","count","totalValues","TagBarLabel","version","name","anchor","TagBarCount","renderBody","type","tct","link","href","PanelHeader","p","theme","fontSizeLarge","space","tagBar","borderRadius","GlobalSelectionLink","textColor","backgroundSecondary","tagBarHover","overflowEllipsis"],"sourceRoot":""}