{"version":3,"file":"chunks/app_views_settings_project_projectServiceHookDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHookDetails.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconFlag} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {ServiceHook} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport AsyncView from 'sentry/views/asyncView';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\nimport Field from 'sentry/views/settings/components/forms/field';\nimport TextCopyInput from 'sentry/views/settings/components/forms/textCopyInput';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport ServiceHookSettingsForm from 'sentry/views/settings/project/serviceHookSettingsForm';\n\ntype Params = {orgId: string; projectId: string; hookId: string};\n\ntype StatsProps = {\n  params: Params;\n};\n\ntype StatsState = {\n  stats: {ts: number; total: number}[] | null;\n} & AsyncComponent['state'];\n\nclass HookStats extends AsyncComponent<StatsProps, StatsState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const until = Math.floor(new Date().getTime() / 1000);\n    const since = until - 3600 * 24 * 30;\n    const {hookId, orgId, projectId} = this.props.params;\n    return [\n      [\n        'stats',\n        `/projects/${orgId}/${projectId}/hooks/${hookId}/stats/`,\n        {\n          query: {\n            since,\n            until,\n            resolution: '1d',\n          },\n        },\n      ],\n    ];\n  }\n\n  renderBody() {\n    const {stats} = this.state;\n    if (stats === null) {\n      return null;\n    }\n    let emptyStats = true;\n\n    const series = {\n      seriesName: t('Events'),\n      data: stats.map(p => {\n        if (p.total) {\n          emptyStats = false;\n        }\n        return {\n          name: p.ts * 1000,\n          value: p.total,\n        };\n      }),\n    };\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Events in the last 30 days (by day)')}</PanelHeader>\n        <PanelBody withPadding>\n          {!emptyStats ? (\n            <MiniBarChart\n              isGroupedByDate\n              showTimeInTooltip\n              labelYAxisExtents\n              series={[series]}\n              height={150}\n            />\n          ) : (\n            <EmptyMessage\n              title={t('Nothing recorded in the last 30 days.')}\n              description={t('Total webhooks fired for this configuration.')}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\ntype Props = RouteComponentProps<Params, {}>;\ntype State = {\n  hook: ServiceHook | null;\n} & AsyncView['state'];\n\nexport default class ProjectServiceHookDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, projectId, hookId} = this.props.params;\n    return [['hook', `/projects/${orgId}/${projectId}/hooks/${hookId}/`]];\n  }\n\n  onDelete = () => {\n    const {orgId, projectId, hookId} = this.props.params;\n    addLoadingMessage(t('Saving changes\\u2026'));\n    this.api.request(`/projects/${orgId}/${projectId}/hooks/${hookId}/`, {\n      method: 'DELETE',\n      success: () => {\n        clearIndicators();\n        browserHistory.push(`/settings/${orgId}/projects/${projectId}/hooks/`);\n      },\n      error: () => {\n        addErrorMessage(t('Unable to remove application. Please try again.'));\n      },\n    });\n  };\n\n  renderBody() {\n    const {orgId, projectId, hookId} = this.props.params;\n    const {hook} = this.state;\n    if (!hook) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        <SettingsPageHeader title={t('Service Hook Details')} />\n\n        <ErrorBoundary>\n          <HookStats params={this.props.params} />\n        </ErrorBoundary>\n\n        <ServiceHookSettingsForm\n          orgId={orgId}\n          projectId={projectId}\n          hookId={hookId}\n          initialData={{\n            ...hook,\n            isActive: hook.status !== 'disabled',\n          }}\n        />\n        <Panel>\n          <PanelHeader>{t('Event Validation')}</PanelHeader>\n          <PanelBody>\n            <PanelAlert type=\"info\" icon={<IconFlag size=\"md\" />}>\n              Sentry will send the <code>X-ServiceHook-Signature</code> header built using{' '}\n              <code>HMAC(SHA256, [secret], [payload])</code>. You should always verify\n              this signature before trusting the information provided in the webhook.\n            </PanelAlert>\n            <Field\n              label={t('Secret')}\n              flexibleControlStateSize\n              inline={false}\n              help={t('The shared secret used for generating event HMAC signatures.')}\n            >\n              <TextCopyInput>\n                {getDynamicText({\n                  value: hook.secret,\n                  fixed: 'a dynamic secret value',\n                })}\n              </TextCopyInput>\n            </Field>\n          </PanelBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>{t('Delete Hook')}</PanelHeader>\n          <PanelBody>\n            <Field\n              label={t('Delete Hook')}\n              help={t('Removing this hook is immediate and permanent.')}\n            >\n              <div>\n                <Button priority=\"danger\" onClick={this.onDelete}>\n                  {t('Delete Hook')}\n                </Button>\n              </div>\n            </Field>\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","HookStats","getEndpoints","until","Math","floor","Date","getTime","since","hookId","orgId","projectId","props","params","query","resolution","renderBody","stats","state","emptyStats","series","seriesName","t","data","map","p","total","name","ts","value","withPadding","description","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","height","ProjectServiceHookDetails","addLoadingMessage","api","request","method","success","clearIndicators","browserHistory","error","addErrorMessage","hook","Fragment","initialData","isActive","status","type","icon","size","label","flexibleControlStateSize","inline","help","getDynamicText","secret","fixed","priority","onClick","onDelete"],"sourceRoot":""}