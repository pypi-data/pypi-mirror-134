{"version":3,"file":"chunks/app_components_scoreCard_tsx-app_views_projectDetail_missingFeatureButtons_missingReleasesBut-93ece0.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/scoreCard.tsx","webpack:///./app/views/projectDetail/missingFeatureButtons/missingReleasesButtons.tsx","webpack:///./app/views/releases/list/releasesPromo.tsx"],"sourcesContent":["import * as React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport overflowEllipsis from 'sentry/styles/overflowEllipsis';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = {\n  title: React.ReactNode;\n  score?: React.ReactNode;\n  help?: React.ReactNode;\n  trend?: React.ReactNode;\n  trendStatus?: 'good' | 'bad';\n  className?: string;\n};\n\nfunction ScoreCard({title, score, help, trend, trendStatus, className}: Props) {\n  return (\n    <ScorePanel className={className}>\n      <HeaderTitle>\n        <Title>{title}</Title>\n        {help && <QuestionTooltip title={help} size=\"sm\" position=\"top\" />}\n      </HeaderTitle>\n\n      <ScoreWrapper>\n        <Score>{score ?? '\\u2014'}</Score>\n        {defined(trend) && (\n          <Trend trendStatus={trendStatus}>\n            <TextOverflow>{trend}</TextOverflow>\n          </Trend>\n        )}\n      </ScoreWrapper>\n    </ScorePanel>\n  );\n}\n\nfunction getTrendColor(p: TrendProps & {theme: Theme}) {\n  switch (p.trendStatus) {\n    case 'good':\n      return p.theme.green300;\n    case 'bad':\n      return p.theme.red300;\n    default:\n      return p.theme.gray300;\n  }\n}\n\nexport const ScorePanel = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: ${space(2)} ${space(3)};\n  min-height: 96px;\n`;\n\nexport const HeaderTitle = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: center;\n  width: fit-content;\n`;\n\nconst Title = styled('div')`\n  ${overflowEllipsis};\n`;\n\nexport const ScoreWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  max-width: 100%;\n`;\n\nexport const Score = styled('span')`\n  flex-shrink: 1;\n  font-size: 32px;\n  line-height: 1;\n  white-space: nowrap;\n`;\n\ntype TrendProps = {trendStatus: Props['trendStatus']};\n\nexport const Trend = styled('div')<TrendProps>`\n  color: ${getTrendColor};\n  margin-left: ${space(1)};\n  line-height: 1;\n  overflow: hidden;\n`;\n\nexport default ScoreCard;\n","import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport FeatureTourModal from 'sentry/components/modals/featureTourModal';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {RELEASES_TOUR_STEPS} from 'sentry/views/releases/list/releasesPromo';\n\nconst DOCS_URL = 'https://docs.sentry.io/product/releases/';\nconst DOCS_HEALTH_URL = 'https://docs.sentry.io/product/releases/health/';\n\ntype Props = {\n  organization: Organization;\n  health?: boolean;\n  projectId?: string;\n};\n\nfunction MissingReleasesButtons({organization, health, projectId}: Props) {\n  function handleTourAdvance(step: number, duration: number) {\n    trackAnalyticsEvent({\n      eventKey: 'project_detail.releases_tour.advance',\n      eventName: 'Project Detail: Releases Tour Advance',\n      organization_id: parseInt(organization.id, 10),\n      project_id: projectId && parseInt(projectId, 10),\n      step,\n      duration,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAnalyticsEvent({\n      eventKey: 'project_detail.releases_tour.close',\n      eventName: 'Project Detail: Releases Tour Close',\n      organization_id: parseInt(organization.id, 10),\n      project_id: projectId && parseInt(projectId, 10),\n      step,\n      duration,\n    });\n  }\n\n  return (\n    <MissingReleaseButtonBar gap={1}>\n      <Button\n        size=\"small\"\n        priority=\"primary\"\n        external\n        href={health ? DOCS_HEALTH_URL : DOCS_URL}\n      >\n        {t('Start Setup')}\n      </Button>\n      {!health && (\n        <FeatureTourModal\n          steps={RELEASES_TOUR_STEPS}\n          onAdvance={handleTourAdvance}\n          onCloseModal={handleClose}\n          doneText={t('Start Setup')}\n          doneUrl={health ? DOCS_HEALTH_URL : DOCS_URL}\n        >\n          {({showModal}) => (\n            <Button size=\"small\" onClick={showModal}>\n              {t('Get a tour')}\n            </Button>\n          )}\n        </FeatureTourModal>\n      )}\n    </MissingReleaseButtonBar>\n  );\n}\n\nexport const MissingReleaseButtonBar = styled(ButtonBar)`\n  grid-template-columns: minmax(auto, max-content) minmax(auto, max-content);\n`;\n\nexport default MissingReleasesButtons;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport emptyStateImg from 'sentry-images/spot/releases-empty-state.svg';\nimport commitImage from 'sentry-images/spot/releases-tour-commits.svg';\nimport emailImage from 'sentry-images/spot/releases-tour-email.svg';\nimport resolutionImage from 'sentry-images/spot/releases-tour-resolution.svg';\nimport statsImage from 'sentry-images/spot/releases-tour-stats.svg';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport FeatureTourModal, {\n  TourImage,\n  TourStep,\n  TourText,\n} from 'sentry/components/modals/featureTourModal';\nimport OnboardingPanel from 'sentry/components/onboardingPanel';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\n\nconst releasesSetupUrl = 'https://docs.sentry.io/product/releases/';\n\nconst docsLink = (\n  <Button external href={releasesSetupUrl}>\n    {t('Setup')}\n  </Button>\n);\n\nexport const RELEASES_TOUR_STEPS: TourStep[] = [\n  {\n    title: t('Suspect Commits'),\n    image: <TourImage src={commitImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Sentry suggests which commit caused an issue and who is likely responsible so you can triage.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Release Stats'),\n    image: <TourImage src={statsImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Get an overview of the commits in each release, and which issues were introduced or fixed.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Easily Resolve'),\n    image: <TourImage src={resolutionImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Automatically resolve issues by including the issue number in your commit message.'\n        )}\n      </TourText>\n    ),\n    actions: docsLink,\n  },\n  {\n    title: t('Deploy Emails'),\n    image: <TourImage src={emailImage} />,\n    body: (\n      <TourText>\n        {t(\n          'Receive email notifications about when your code gets deployed. This can be customized in settings.'\n        )}\n      </TourText>\n    ),\n  },\n];\n\ntype Props = {\n  organization: Organization;\n  projectId?: number;\n};\n\nclass ReleasesPromo extends Component<Props> {\n  componentDidMount() {\n    const {organization, projectId} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'releases.landing_card_viewed',\n      eventName: 'Releases: Landing Card Viewed',\n      organization_id: parseInt(organization.id, 10),\n      project_id: projectId,\n    });\n  }\n\n  handleTourAdvance = (step: number, duration: number) => {\n    const {organization, projectId} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'releases.tour.advance',\n      eventName: 'Releases: Tour Advance',\n      organization_id: parseInt(organization.id, 10),\n      project_id: projectId,\n      step,\n      duration,\n    });\n  };\n\n  handleClose = (step: number, duration: number) => {\n    const {organization, projectId} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'releases.tour.close',\n      eventName: 'Releases: Tour Close',\n      organization_id: parseInt(organization.id, 10),\n      project_id: projectId,\n      step,\n      duration,\n    });\n  };\n\n  render() {\n    return (\n      <OnboardingPanel image={<img src={emptyStateImg} />}>\n        <h3>{t('Demystify Releases')}</h3>\n        <p>\n          {t(\n            'Did you know how many errors your latest release triggered? We do. And more, too.'\n          )}\n        </p>\n        <ButtonList gap={1}>\n          <Button priority=\"primary\" href={releasesSetupUrl} external>\n            {t('Start Setup')}\n          </Button>\n          <FeatureTourModal\n            steps={RELEASES_TOUR_STEPS}\n            onAdvance={this.handleTourAdvance}\n            onCloseModal={this.handleClose}\n            doneText={t('Start Setup')}\n            doneUrl={releasesSetupUrl}\n          >\n            {({showModal}) => (\n              <Button priority=\"default\" onClick={showModal}>\n                {t('Take a Tour')}\n              </Button>\n            )}\n          </FeatureTourModal>\n        </ButtonList>\n      </OnboardingPanel>\n    );\n  }\n}\n\nconst ButtonList = styled(ButtonBar)`\n  grid-template-columns: repeat(auto-fit, minmax(130px, max-content));\n`;\n\nexport default ReleasesPromo;\n"],"names":["ScoreCard","title","score","help","trend","trendStatus","className","ScorePanel","HeaderTitle","Title","size","position","ScoreWrapper","Score","defined","Trend","getTrendColor","p","theme","green300","red300","gray300","Panel","space","overflowEllipsis","DOCS_URL","DOCS_HEALTH_URL","MissingReleasesButtons","organization","health","projectId","MissingReleaseButtonBar","gap","priority","external","href","t","steps","RELEASES_TOUR_STEPS","onAdvance","step","duration","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","project_id","onCloseModal","doneText","doneUrl","showModal","onClick","ButtonBar","releasesSetupUrl","docsLink","image","src","commitImage","body","actions","statsImage","resolutionImage","emailImage","ReleasesPromo","Component","this","props","componentDidMount","render","emptyStateImg","ButtonList","handleTourAdvance","handleClose"],"sourceRoot":""}