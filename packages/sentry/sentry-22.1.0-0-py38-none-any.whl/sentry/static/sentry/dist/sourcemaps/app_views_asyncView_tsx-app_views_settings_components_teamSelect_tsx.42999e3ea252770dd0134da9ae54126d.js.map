{"version":3,"file":"chunks/app_views_asyncView_tsx-app_views_settings_components_teamSelect_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/components/idBadge/teamBadge/index.tsx","webpack:///./app/views/settings/components/teamSelect.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import * as React from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport TeamStore from 'sentry/stores/teamStore';\nimport {Team} from 'sentry/types';\n\nimport Badge from './badge';\n\ntype Props = React.ComponentProps<typeof Badge>;\n\ntype State = {\n  team: Team;\n};\n\nclass TeamBadgeContainer extends React.Component<Props, State> {\n  state: State = {team: this.props.team};\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.state.team === nextProps.team) {\n      return;\n    }\n\n    if (isEqual(this.state.team, nextProps.team)) {\n      return;\n    }\n\n    this.setState({team: nextProps.team});\n  }\n\n  componentWillUnmount() {\n    this.unlistener?.();\n  }\n\n  unlistener = TeamStore.listen(\n    (team: Set<string>) => this.onTeamStoreUpdate(team),\n    undefined\n  );\n\n  onTeamStoreUpdate(updatedTeam: Set<string>) {\n    if (!updatedTeam.has(this.state.team.id)) {\n      return;\n    }\n\n    const team = TeamStore.getById(this.state.team.id);\n    if (!team || isEqual(team.avatar, this.state.team.avatar)) {\n      return;\n    }\n\n    this.setState({team});\n  }\n\n  render() {\n    return <Badge {...this.props} team={this.state.team} />;\n  }\n}\n\nexport default TeamBadgeContainer;\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport TeamBadge from 'sentry/components/idBadge/teamBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport useTeams from 'sentry/utils/useTeams';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype Props = {\n  organization: Organization;\n  /**\n   * Should button be disabled\n   */\n  disabled: boolean;\n  /**\n   * Teams that are already selected.\n   */\n  selectedTeams: Team[];\n  /**\n   * callback when teams are added\n   */\n  onAddTeam: (team: Team) => void;\n  /**\n   * Callback when teams are removed\n   */\n  onRemoveTeam: (teamSlug: string) => void;\n  /**\n   * Optional menu header.\n   */\n  menuHeader?: React.ReactElement;\n  /**\n   * Message to display when the last team is removed\n   * if empty no confirm will be displayed.\n   */\n  confirmLastTeamRemoveMessage?: string;\n  /**\n   * Used to determine whether we should show a loading state while waiting for teams\n   */\n  loadingTeams?: boolean;\n};\n\nfunction TeamSelect({\n  disabled,\n  selectedTeams,\n  menuHeader,\n  organization,\n  onAddTeam,\n  onRemoveTeam,\n  confirmLastTeamRemoveMessage,\n  loadingTeams,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams();\n\n  const handleAddTeam = (option: Item) => {\n    const team = teams.find(tm => tm.slug === option.value);\n    if (team) {\n      onAddTeam(team);\n    }\n  };\n\n  const renderBody = () => {\n    if (selectedTeams.length === 0) {\n      return <EmptyMessage>{t('No Teams assigned')}</EmptyMessage>;\n    }\n    const confirmMessage =\n      selectedTeams.length === 1 && confirmLastTeamRemoveMessage\n        ? confirmLastTeamRemoveMessage\n        : null;\n\n    return selectedTeams.map(team => (\n      <TeamRow\n        key={team.slug}\n        orgId={organization.slug}\n        team={team}\n        onRemove={slug => onRemoveTeam(slug)}\n        disabled={disabled}\n        confirmMessage={confirmMessage}\n      />\n    ));\n  };\n\n  // Only show options that aren't selected in the dropdown\n  const options = teams\n    .filter(team => !selectedTeams.some(selectedTeam => selectedTeam.slug === team.slug))\n    .map((team, index) => ({\n      index,\n      value: team.slug,\n      searchKey: team.slug,\n      label: <DropdownTeamBadge avatarSize={18} team={team} />,\n    }));\n\n  return (\n    <Panel>\n      <PanelHeader hasButtons>\n        {t('Team')}\n        <DropdownAutoComplete\n          items={options}\n          busyItemsStillVisible={fetching}\n          onChange={debounce<(e: React.ChangeEvent<HTMLInputElement>) => void>(\n            e => onSearch(e.target.value),\n            DEFAULT_DEBOUNCE_DURATION\n          )}\n          onSelect={handleAddTeam}\n          emptyMessage={t('No teams')}\n          menuHeader={menuHeader}\n          disabled={disabled}\n          alignMenu=\"right\"\n        >\n          {({isOpen}) => (\n            <DropdownButton\n              aria-label={t('Add Team')}\n              isOpen={isOpen}\n              size=\"xsmall\"\n              disabled={disabled}\n            >\n              {t('Add Team')}\n            </DropdownButton>\n          )}\n        </DropdownAutoComplete>\n      </PanelHeader>\n\n      <PanelBody>{loadingTeams ? <LoadingIndicator /> : renderBody()}</PanelBody>\n    </Panel>\n  );\n}\n\ntype TeamRowProps = {\n  orgId: string;\n  team: Team;\n  onRemove: Props['onRemoveTeam'];\n  disabled: boolean;\n  confirmMessage: string | null;\n};\n\nconst TeamRow = ({orgId, team, onRemove, disabled, confirmMessage}: TeamRowProps) => (\n  <TeamPanelItem>\n    <StyledLink to={`/settings/${orgId}/teams/${team.slug}/`}>\n      <TeamBadge team={team} />\n    </StyledLink>\n    <Confirm\n      message={confirmMessage}\n      bypass={!confirmMessage}\n      onConfirm={() => onRemove(team.slug)}\n      disabled={disabled}\n    >\n      <Button\n        size=\"xsmall\"\n        icon={<IconSubtract isCircled size=\"xs\" />}\n        disabled={disabled}\n      >\n        {t('Remove')}\n      </Button>\n    </Confirm>\n  </TeamPanelItem>\n);\n\nconst DropdownTeamBadge = styled(TeamBadge)`\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-transform: none;\n`;\n\nconst TeamPanelItem = styled(PanelItem)`\n  padding: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledLink = styled(Link)`\n  flex: 1;\n  margin-right: ${space(1)};\n`;\n\nexport default TeamSelect;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","TeamBadgeContainer","React","team","props","TeamStore","onTeamStoreUpdate","undefined","UNSAFE_componentWillReceiveProps","nextProps","state","isEqual","setState","componentWillUnmount","unlistener","updatedTeam","has","id","avatar","TeamSelect","disabled","selectedTeams","menuHeader","organization","onAddTeam","onRemoveTeam","confirmLastTeamRemoveMessage","loadingTeams","teams","onSearch","fetching","useTeams","options","filter","some","selectedTeam","slug","map","index","value","searchKey","label","DropdownTeamBadge","avatarSize","hasButtons","t","items","busyItemsStillVisible","onChange","debounce","e","target","DEFAULT_DEBOUNCE_DURATION","onSelect","option","find","tm","emptyMessage","alignMenu","isOpen","size","length","confirmMessage","TeamRow","orgId","onRemove","renderBody","TeamPanelItem","StyledLink","to","message","bypass","onConfirm","icon","isCircled","TeamBadge","p","theme","fontSizeMedium","PanelItem","space","Link"],"sourceRoot":""}