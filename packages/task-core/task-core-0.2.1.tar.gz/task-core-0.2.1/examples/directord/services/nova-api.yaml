id: nova_api
type: service
version: 1.0.0
tasks:
  - id: init
    action: init
    driver: directord
    provides:
      - openstack-nova.init
    requires:
      - config.init
      - memcached.init
      - network.init
    jobs:
      - ARG: nova_region RegionOne
      - ARG: nova_db_username nova
      - ARG: nova_db_password secrete
      - ARG: nova_db_host "{{ ctlplane_vip }}"
      - ARG: nova_db_name nova
      - ARG: nova_api_db_name nova_api
      - ARG: nova_admin_pass nova
      - QUERY: memcache_host_ip
      - RUN: >-
          --stdout-arg nova_api_memcached_servers
          {% set hosts = [] %}
          {% for h in   query.values() | map(attribute='memcache_host_ip') | select('defined') | reject('==', None) | list %}
          {% set _ = hosts.append(h ~ ":11211") %}
          {% endfor %}
          echo -n "{{ hosts | join(',') }}";


  - id: setup
    action: setup
    driver: directord
    provides:
      - openstack-nova.setup
    requires:
      - config.init
      - httpd.init
      - openstack-cinder.init
      - openstack-nova.init
      - openstack-placement.init
      - rabbitmq.config
      - repos.init
    jobs:
      - QUERY: rabbitmq_transport_url
      - DNF: openstack-nova-api openstack-nova-conductor openstack-nova-novncproxy openstack-nova-scheduler
      - RUN: >-
          crudini --set /etc/nova/nova.conf database connection
          "mysql+pymysql://{{ nova_db_username }}:{{ nova_db_password }}@{{ nova_db_host }}/{{ nova_db_name }}?read_default_file=/etc/my.cnf.d/tripleo.cnf&read_default_group=tripleo"
      - RUN: >-
          crudini --set /etc/nova/nova.conf api_database connection
          "mysql+pymysql://{{ nova_db_username }}:{{ nova_db_password }}@{{ nova_db_host }}/{{ nova_api_db_name }}?read_default_file=/etc/my.cnf.d/tripleo.cnf&read_default_group=tripleo"
      - RUN: >-
          crudini --set /etc/nova/nova.conf DEFAULT transport_url "{{ query.values() | map(attribute='rabbitmq_transport_url') | select('defined') | reject('==', None) | list | first }}"
      - RUN: >-
          crudini --set /etc/nova/nova.conf api auth_strategy keystone
      - RUN: >-
          crudini --set /etc/nova/nova.conf keystone_authtoken auth_url "http://{{ ctlplane_vip }}:5000"
      # TODO(mwhahaha) memcached hosts
      - RUN: >-
          crudini --set /etc/nova/nova.conf keystone_authtoken memcached_servers "{{ nova_api_memcached_servers }}"
      - RUN: >-
          crudini --set /etc/nova/nova.conf keystone_authtoken auth_type password
      - RUN: >-
          crudini --set /etc/nova/nova.conf keystone_authtoken project_domain_name Default
      - RUN: >-
          crudini --set /etc/nova/nova.conf keystone_authtoken user_domain_name Default
      - RUN: >-
          crudini --set /etc/nova/nova.conf keystone_authtoken project_name service
      - RUN: >-
          crudini --set /etc/nova/nova.conf keystone_authtoken username nova
      - RUN: >-
          crudini --set /etc/nova/nova.conf keystone_authtoken password "{{ nova_admin_pass }}"
      - RUN: >-
          crudini --set /etc/nova/nova.conf DEFAULT my_ip "{{ tripleo_network_ips[deployment_host] }}"
      - RUN: >-
          crudini --set /etc/nova/nova.conf DEFAULT enabled_apis "osapi_compute,metadata"
      - RUN: >-
          crudini --set /etc/nova/nova.conf vnc enabled true
      - RUN: >-
          crudini --set /etc/nova/nova.conf vnc novncproxy_host "{{ tripleo_network_ips[deployment_host] }}"
      - RUN: >-
          crudini --set /etc/nova/nova.conf vnc novncproxy_port 6080
      - RUN: >-
          crudini --set /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp
      # placement
      - RUN: >-
          crudini --set /etc/nova/nova.conf placement region_name RegionOne
      - RUN: >-
          crudini --set /etc/nova/nova.conf placement auth_type password
      - RUN: >-
          crudini --set /etc/nova/nova.conf placement project_domain_name Default
      - RUN: >-
          crudini --set /etc/nova/nova.conf placement user_domain_name Default
      - RUN: >-
          crudini --set /etc/nova/nova.conf placement project_name service
      - RUN: >-
          crudini --set /etc/nova/nova.conf placement auth_url "http://{{ ctlplane_vip }}:5000"
      - RUN: >-
          crudini --set /etc/nova/nova.conf placement username placement
      - RUN: >-
          crudini --set /etc/nova/nova.conf placement password "{{ placement_admin_pass }}"
      # cinder
      - RUN: >-
          crudini --set /etc/nova/nova.conf cinder catalog_info volumev3:cinderv3:internalUR
      - RUN: >-
          crudini --set /etc/nova/nova.conf cinder region_name RegionOne
      - RUN: >-
          crudini --set /etc/nova/nova.conf cinder auth_type v3password
      - RUN: >-
          crudini --set /etc/nova/nova.conf cinder project_domain_name Default
      - RUN: >-
          crudini --set /etc/nova/nova.conf cinder user_domain_name Default
      - RUN: >-
          crudini --set /etc/nova/nova.conf cinder project_name service
      - RUN: >-
          crudini --set /etc/nova/nova.conf cinder auth_url "http://{{ ctlplane_vip }}:5000"
      - RUN: >-
          crudini --set /etc/nova/nova.conf cinder username cinder
      - RUN: >-
          crudini --set /etc/nova/nova.conf cinder password "{{ cinder_admin_pass }}"
      - RUN: >-
          crudini --set /etc/nova/nova.conf scheduler discover_hosts_in_cells_interval 300
      # glance
      #- RUN: >-
      #    crudini --set /etc/nova/nova.conf glance api_servers "http://{{ ctlplane_vip }}:9292"
      - WORKDIR: --chown nova /var/www/cgi-bin/nova
      - RUN: cp /usr/bin/nova-api-wsgi /var/www/cgi-bin/nova/nova-api
      - ADD: >
          --blueprint files/nova/wsgi-nova.conf.j2
          /etc/httpd/conf.d/wsgi-nova.conf
      - RUN: cp /usr/bin/nova-metadata-wsgi /var/www/cgi-bin/nova/nova-metadata-wsgi
      - ADD: >
          --blueprint files/nova/wsgi-nova-metadata.conf.j2
          /etc/httpd/conf.d/wsgi-nova-metadata.conf


  - id: keystone
    action: keystone
    driver: directord
    provides:
      - openstack-nova.keystone
    requires:
      - openstack-keystone.cloud-config
      - openstack-nova.init
    jobs:
      - RUN: >
          --run-once
          openstack --os-cloud overcloud user create --or-show nova
          --domain default --password "{{ nova_admin_pass }}"
      - RUN: >
          --run-once
          openstack --os-cloud overcloud role add --project service --user nova admin
      - RUN: >
          --run-once
          openstack --os-cloud overcloud service show nova ||
          openstack --os-cloud overcloud service create --name nova
          --description "Placement API" compute
      - RUN: >
          --run-once
          openstack --os-cloud overcloud endpoint list --interface public --service nova | grep -q nova ||
          openstack --os-cloud overcloud endpoint create --region RegionOne
          nova public "http://{{ ctlplane_vip }}:8774/v2.1"
      - RUN: >
          --run-once
          openstack --os-cloud overcloud endpoint list --interface internal --service nova | grep -q nova ||
          openstack --os-cloud overcloud endpoint create --region RegionOne
          nova internal "http://{{ ctlplane_vip }}:8774/v2.1"
      - RUN: >
          --run-once
          openstack --os-cloud overcloud endpoint list --interface admin --service nova | grep -q nova ||
          openstack --os-cloud overcloud endpoint create --region RegionOne
          nova admin "http://{{ ctlplane_vip }}:8774/v2.1"


  - id: database
    action: database
    driver: directord
    provides:
      - openstack-nova.database
    requires:
      - openstack-nova.setup
      - mariadb.start
    jobs:
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "CREATE DATABASE IF NOT EXISTS {{ nova_db_name }};"
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "CREATE DATABASE IF NOT EXISTS {{ nova_api_db_name }};"
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "CREATE DATABASE IF NOT EXISTS nova_cell0;"
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "GRANT ALL PRIVILEGES ON {{ nova_db_name }}.* TO 'nova'@'%' IDENTIFIED BY '{{ nova_db_password }}';"
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "GRANT ALL PRIVILEGES ON {{ nova_db_name }}.* TO 'nova'@'localhost' IDENTIFIED BY '{{ nova_db_password }}';"
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "GRANT ALL PRIVILEGES ON {{ nova_api_db_name }}.* TO 'nova'@'%' IDENTIFIED BY '{{ nova_db_password }}';"
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "GRANT ALL PRIVILEGES ON {{ nova_api_db_name }}.* TO 'nova'@'localhost' IDENTIFIED BY '{{ nova_db_password }}';"
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' IDENTIFIED BY '{{ nova_db_password }}';"
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' IDENTIFIED BY '{{ nova_db_password }}';"
      - RUN: --run-once mysql -u root -p{{ mysql_root_password }} -e "FLUSH PRIVILEGES;"
      - RUN: --run-once nova-manage api_db sync
      - RUN: --run-once nova-manage cell_v2 map_cell0
      - RUN: --run-once nova-manage cell_v2 list_cells | grep -q cell1 || nova-manage cell_v2 create_cell --name=cell1 --verbose
      - RUN: --run-once nova-manage db sync

  - id: service
    action: service
    driver: directord
    provides:
      - openstack-nova.service
    requires:
      - openstack-nova.database
      - openstack-nova.keystone
      # NOTE(mwhahaha): needed because scheduler pukes if no placement endpoint
      - openstack-placement.keystone
      - rabbitmq.service
    jobs:
      - SERVICE: --restarted httpd.service
      - SERVICE: --restarted --enable openstack-nova-scheduler
      - SERVICE: --restarted --enable openstack-nova-conductor
      - SERVICE: --restarted --enable openstack-nova-novncproxy
