#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field as _field
from ...config import custom_scalars, datetime
from gql_client.runtime.variables import encode_variables
from gql import gql, Client
from gql.transport.exceptions import TransportQueryError
from functools import partial
from numbers import Number
from typing import Any, AsyncGenerator, Dict, List, Generator, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin, config

from ..input.add_alarm_filter_input import AddAlarmFilterInput


# fmt: off
QUERY: List[str] = ["""
mutation addAlarmFilter($input: AddAlarmFilterInput!) {
  addAlarmFilter(input: $input) {
    id
    name
    networkResource
    enable
    beginTime
    endTime
    reason
    user
    creationTime
    alarmStatus{id}
  }
}

"""
]


class addAlarmFilter:
    @dataclass(frozen=True)
    class addAlarmFilterData(DataClassJsonMixin):
        @dataclass(frozen=True)
        class AlarmFilter(DataClassJsonMixin):
            @dataclass(frozen=True)
            class AlarmStatus(DataClassJsonMixin):
                id: str

            id: str
            name: str
            networkResource: str
            enable: bool
            beginTime: datetime = _field(metadata=config(encoder=custom_scalars["Time"].encoder, decoder=custom_scalars["Time"].decoder, mm_field=custom_scalars["Time"].mm_field))
            endTime: datetime = _field(metadata=config(encoder=custom_scalars["Time"].encoder, decoder=custom_scalars["Time"].decoder, mm_field=custom_scalars["Time"].mm_field))
            reason: str
            user: str
            creationTime: datetime = _field(metadata=config(encoder=custom_scalars["Time"].encoder, decoder=custom_scalars["Time"].decoder, mm_field=custom_scalars["Time"].mm_field))
            alarmStatus: Optional[AlarmStatus]

        addAlarmFilter: AlarmFilter

    # fmt: off
    @classmethod
    def execute(cls, client: Client, input: AddAlarmFilterInput) -> addAlarmFilterData.AlarmFilter:
        variables: Dict[str, Any] = {"input": input}
        new_variables = encode_variables(variables, custom_scalars)
        response_text = client.execute(
            gql("".join(set(QUERY))), variable_values=new_variables
        )
        res = cls.addAlarmFilterData.from_dict(response_text)
        return res.addAlarmFilter

    # fmt: off
    @classmethod
    async def execute_async(cls, client: Client, input: AddAlarmFilterInput) -> addAlarmFilterData.AlarmFilter:
        variables: Dict[str, Any] = {"input": input}
        new_variables = encode_variables(variables, custom_scalars)
        response_text = await client.execute_async(
            gql("".join(set(QUERY))), variable_values=new_variables
        )
        res = cls.addAlarmFilterData.from_dict(response_text)
        return res.addAlarmFilter
