Metadata-Version: 2.1
Name: cdk-lambda-powertools-python-layer
Version: 0.0.0
Summary: A lambda layer for AWS Powertools for python
Home-page: https://github.com/amelnyk/cdk-lambda-powertools-python-layer.git
Author: Alexander Melnyk<amelnyk@amazon.de>
License: Apache-2.0
Project-URL: Source, https://github.com/amelnyk/cdk-lambda-powertools-python-layer.git
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: JavaScript
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Typing :: Typed
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aws-cdk-lib (<3.0.0,>=2.2.0)
Requires-Dist: constructs (<11.0.0,>=10.0.5)
Requires-Dist: jsii (<2.0.0,>=1.52.0)
Requires-Dist: publication (>=0.0.3)

# Lambda powertools python layer

## Why this project exists

This is a custom construct that will create AWS Lambda Layer with AWS Powertools for Python library.
There are different ways how to create a layer and when working with CDK you need to install the library, create a zip file and wire it correctly.
With this construct you don't have to care about packaging and dependency management, just create a construct and add it to your function.
The construct is an extension of the existing [`LayerVersion`](https://docs.aws.amazon.com/cdk/api/v1/docs/@aws-cdk_aws-lambda.LayerVersion.html) construct from the CDK library, so you have access to all fields and methods.

```python
import { LambdaPowertoolsLayer } from 'cdk-lambda-powertools-python-layer';

const powertoolsLayer = new LambdaPowertoolsLayer(this, 'TestLayer');
```

## Install

TypeSript/JavaScript:

```shell
npm i cdk-lambda-powertools-python-layer
```

Python:

```shell
pip install cdk-lambda-powertools-python-layer
```

## Usage

A single line will create a layer with powertools for python:

```python
import { LambdaPowertoolsLayer } from 'cdk-lambda-powertools-python-layer';

const powertoolsLayer = new LambdaPowertoolsLayer(this, 'TestLayer', {
  version: '1.22.0',
});
```

You can then add the layer to your funciton:

```python
new Function(this, 'LambdaFunction', {
  code: Code.fromAsset(path.join('./function')),
  handler: 'app.handler',
  runtime: Runtime.PYTHON_3_9,
  layers: [powertoolsLayer],
});
```

You can specify the powertools version by passing the optional `version` paramter, otherwise the construct will take the latest
version from pypi repository.

```python
new LambdaPowertoolsLayer(this, 'PowertoolsLayer', {
  version: '1.21.0'
});
```

Additionally, powertools have extras depenedncies such as Pydantic, [documented here](https://awslabs.github.io/aws-lambda-powertools-python/latest/#lambda-layer).
This is not included by default, and you have to set this option in the construct definition if you need it:

```python
new LambdaPowertoolsLayer(this, 'PowertoolsLayer', {
  includeExtras: true
});
```

Full example:

```python
import { Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { LambdaPowertoolsLayer } from 'cdk-lambda-powertools-python-layer';
import { Code, Function, Runtime } from 'aws-cdk-lib/aws-lambda';
import * as path from 'path';

export class CdkPowertoolsExampleStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    const powertoolsLayer = new LambdaPowertoolsLayer(this, 'TestLayer', {
      version: '1.22.0',
      includeExtras: true
    });

    new Function(this, 'LambdaFunction', {
      code: Code.fromAsset(path.join('./function')),
      handler: 'app.handler',
      runtime: Runtime.PYTHON_3_9,
      layers: [powertoolsLayer],
    });
  }
}
```


