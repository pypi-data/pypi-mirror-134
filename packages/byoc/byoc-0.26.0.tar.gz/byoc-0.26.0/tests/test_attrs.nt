test_attr:
  -
    id: keys
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1, 'y': 2, 'z': 3})
      >
      > f = lambda d: (d['x'], d['y'])
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr()
      >     x1 = byoc.attr('x')
      >     x2 = byoc.attr(Key(DummyConfig, 'x'))
      >     y = byoc.attr(Key(DummyConfig))
      >     z = byoc.attr(DummyConfig)
      >     f1 = byoc.attr(f)
      >     f2 = byoc.attr(Key(DummyConfig, f))
    expected:
      x: 1
      x1: 1
      x2: 1
      y: 2
      z: 3
      f1: 1, 2
      f2: 1, 2
  -
    id: keys-order
    obj:
      > class DummyConfigA(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class DummyConfigB(Config):
      >     def load(self):
      >         yield DictLayer({'y': 2})
      >
      > class DummyObj:
      >     __config__ = [DummyConfigA, DummyConfigB]
      >     x = byoc.attr()
      >     y = byoc.attr()
      >
      >     x1 = byoc.attr('x', 'z')
      >     y1 = byoc.attr('z', 'y')
      >
      >     x2 = byoc.attr(
      >             Key(DummyConfigA, 'x'),
      >             Key(DummyConfigB, 'y'),
      >     )
      >     y2 = byoc.attr(
      >             Key(DummyConfigB, 'y'),
      >             Key(DummyConfigA, 'x'),
      >     )
    expected:
      x: 1
      y: 2
      x1: 1
      y1: 2
      x2: 1
      y2: 2
  -
    id: keys-order-degenerate
    # Test that the configs are queried in the order they appear in the 
    # `__config__` variable, when the order specified by the keys is not 
    # determinative (e.g. if one key refers to multiple configs).
    obj:
      > class DummyMixin:
      >     pass
      >
      > class DummyConfigA(Config, DummyMixin):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class DummyConfigB(Config, DummyMixin):
      >     def load(self):
      >         yield DictLayer({'x': 2})
      >
      > class DummyObj:
      >     __config__ = [DummyConfigA, DummyConfigB]
      >     x = byoc.attr()
      >
      >     x1 = byoc.attr(
      >             Key(DummyMixin, 'x'),
      >     )
      >     x2 = byoc.attr(
      >             Key(DummyConfigA, 'x'),
      >             Key(DummyConfigB, 'x'),
      >     )
      >     x3 = byoc.attr(
      >             Key(DummyConfigB, 'x'),
      >             Key(DummyConfigA, 'x'),
      >     )
    expected:
      x: 1
      x1: 1
      x2: 1
      x3: 2
  -
    id: keys-multi
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(
      >             Key(DummyConfig, 'x', cast=lambda x: x+1),
      >             Key(DummyConfig, 'y', cast=lambda x: x-1),
      >     )
    expected:
      x: 2
  -
    id: keys-multi
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'y': 1})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(
      >             Key(DummyConfig, 'x', cast=lambda x: x+1),
      >             Key(DummyConfig, 'y', cast=lambda y: y-1),
      >     )
    expected:
      x: 0

  -
    id: method-two-instances
    obj:
      > class DummyObj:
      >     __config__ = []
      >
      >     x = byoc.attr(
      >         byoc.Method(lambda self: self.y),
      >     )
      >
      > obj = DummyObj()
      > decoy = DummyObj()
      >
      > obj.y = 1
      > obj.x
      >
      > decoy.y = 2
      > decoy.x
    expected:
      x: 1

  -
    id: pick
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >         yield DictLayer({'x': 2})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x1 = byoc.attr('x')
      >     x2 = byoc.attr('x', pick=list)
      >     x3 = byoc.attr('x', pick=list, default=0)
    expected:
      x1: 1
      x2: [1,2]
      x3: [1,2,0]

  -
    id: default-truthy
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(default=1)
    expected:
      x: 1
  -
    id: default-falsey
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(default='')
    expected:
      x: ''
  -
    id: default-falsey
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(default=None)
    expected:
      x: None
  -
    id: default-layers
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'y': 0})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(default=1)
      >     y = byoc.attr(default=1)
    expected:
      x: 1
      y: 0
  -
    id: default-factory
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(default_factory=list)
      >
      > obj, decoy = DummyObj(), DummyObj()
      >
      > obj.x.append(1)
      > decoy.x.append(2)
      > obj.x.append(3)
      > decoy.x.append(4)
    expected:
      x: [1, 3]

  -
    id: ignore
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(default=1, ignore=None)
      >
      > obj = DummyObj()
      > obj.x = None
    expected:
      x: 1
  -
    id: ignore
    obj:
      > # Not directly testing 'ignore', just making sure that assignments to 
      > # None work normally.
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(default=1)
      >
      > obj = DummyObj()
      > obj.x = None
    expected:
      x: None
  -
    id: ignore
    obj:
      > class NotComparable:
      >   def __eq__(self, other):
      >     raise AssertionError
      >
      > nc = NotComparable()
      >
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(default=1, ignore=nc)
      >
      > obj = DummyObj()
      > obj.x = nc
    expected:
      x: 1

  -
    id: cast
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(cast=lambda x: x+1)
    expected:
      x: 2
  -
    id: cast
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(
      >             Key(DummyConfig, 'x', cast=lambda x: x+1),
      >             cast=lambda x: x*3,
      >     )
    expected:
      x: 6
  -
    id: cast
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(
      >             Key(DummyConfig, 'x'),
      >             cast=lambda x: x+1,
      >     )
    expected:
      x: 2
  -
    id: cast-default
    obj:
      # The cast function is not applied to the default.
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(default='not-casted', cast=int)
    expected:
      x: 'not-casted'

  -
    id: get
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1, 'y': 2})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(get=lambda self, x: x + self.y)
      >     y = byoc.attr()
      >
      > obj = DummyObj()
    expected:
      x: 3
  -
    id: get
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'y': 2})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(get=lambda self, x: x + self.y, default=1)
      >     y = byoc.attr()
      >
      > obj = DummyObj()
    expected:
      x: 3
  -
    id: get
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'y': 2})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(get=lambda self, x: x + self.y)
      >     y = byoc.attr()
      >
      > obj = DummyObj()
      > obj.x = 1
    expected:
      x: 3
  -
    id: get
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1, 'y': 2})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     y = byoc.attr()
      >
      >     @byoc.attr()
      >     def x(self, x):
      >         return x + self.y
      >
      > obj = DummyObj()
    expected:
      x: 3

  -
    id: set
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr()
      >
      > obj = DummyObj()
      > obj.x = 2
    expected:
      x: 2
  -
    id: set
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr()
      >
      > obj = DummyObj()
      > obj.x = 2
    expected:
      x: 2
  -
    id: set-del
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr()
      >
      > obj = DummyObj()
      > obj.x = 2
      > del obj.x
    expected:
      x: 1
  -
    id: set-decoy
    obj:
      > # Setting an attribute for one instance shouldn't affect other 
      > # instances.
      >
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr()
      >
      > decoy = DummyObj()
      > decoy.x = 2
      >
      > obj = DummyObj()
    expected:
      x: 1
  -
    id: set-decoy
    obj:
      > # The value of an attribute should be kept even if the object is 
      > # shallow-copied.
      >
      > from copy import copy
      >
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr()
      >
      > obj = DummyObj()
      > obj.x = 2
      >
      > obj = copy(obj)
    expected:
      x: 2
  -
    id: set-non-hashable
    obj:
      > # The code used to have a bug that prevented non-hashable objects from 
      > # being assigned to attribute.  This test is to prevent regressions.
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr()
      >
      > obj = DummyObj()
      > obj.x = [1]
    expected:
      x: [1]

  -
    id: dynamic-key
    obj:
      > d = {'x': 1}
      >
      > class DummyConfig(Config):
      >     dynamic = False
      >     def load(self):
      >         yield DictLayer(d)
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr()
      >
      > obj = DummyObj()
      > obj.x
      >
      > d['x'] = 2
    expected:
      x: 1
  -
    id: dynamic-key
    obj:
      > d = {'x': 1}
      >
      > class DummyConfig(Config):
      >     dynamic = True
      >     def load(self):
      >         yield DictLayer(d)
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr()
      >
      > obj = DummyObj()
      > obj.x
      >
      > d['x'] = 2
    expected:
      x: 2
  -
    id: dynamic-key
    obj:
      > d = {'x': 1}
      >
      > class DummyConfig(Config):
      >     dynamic = False
      >     def load(self):
      >         yield DictLayer(d)
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr(dynamic=True)
      >
      > obj = DummyObj()
      > obj.x
      >
      > d['x'] = 2
    expected:
      x: 2
  -
    id: dynamic-method
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = 1
      >     y = byoc.attr(Method(lambda self: self.x))
      >
      > obj = DummyObj()
      > obj.y
      >
      > DummyObj.x = 2
    expected:
      y: 2
  -
    id: dynamic-method
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = 1
      >     y = byoc.attr(Method(lambda self: self.x, dynamic=False))
      >
      > obj = DummyObj()
      > obj.y
      >
      > obj.x = 2
    expected:
      y: 1
  -
    id: dynamic-func
    obj:
      > d = {'x': 1}
      > def f():
      >     return d['x']
      >
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(Func(f))
      >
      > obj = DummyObj()
      > obj.x
      >
      > d['x'] = 2
    expected:
      x: 1
  -
    id: dynamic-func
    obj:
      > d = {'x': 1}
      > def f():
      >     return d['x']
      >
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(Func(f, dynamic=True))
      >
      > obj = DummyObj()
      > obj.x
      >
      > d['x'] = 2
    expected:
      x: 2
  -
    id: dynamic-func
    obj:
      > d = {'x': 1}
      > def f():
      >     return d['x']
      >
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.attr(Func(f), dynamic=True)
      >
      > obj = DummyObj()
      > obj.x
      >
      > d['x'] = 2
    expected:
      x: 2

  -
    id: inheritance
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class ParentObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr()
      >
      > class ChildObj(ParentObj):
      >     pass
      >
      > obj = ChildObj()
    expected:
      x: 1
  -
    id: inheritance
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class ParentObj:
      >     x = byoc.attr()
      >
      > class ChildObj(ParentObj):
      >     __config__ = [DummyConfig]
      >
      > obj = ChildObj()
    expected:
      x: 1
  -
    id: inheritance
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class ParentObj:
      >     __config__ = [DummyConfig]
      >
      > class ChildObj(ParentObj):
      >     x = byoc.attr()
      >
      > obj = ChildObj()
    expected:
      x: 1

  -
    id: autoload
    obj:
      > class PendingConfig(Config):
      >     autoload = False
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class ActiveConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 2})
      >
      > class DummyObj:
      >     __config__ = [PendingConfig, ActiveConfig]
      >     x = byoc.attr()
    expected:
      x: 2
  -
    id: autoload
    obj:
      > class PendingConfig(Config):
      >     autoload = False
      >     def load(self):
      >         yield DictLayer({'x': 1})
      >
      > class ActiveConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 2})
      >
      > class DummyObj:
      >     __config__ = [PendingConfig, ActiveConfig]
      >     x = byoc.attr()
      >
      > obj = DummyObj()
      > byoc.load(obj)
    expected:
      x: 1

  -
    id: inherited-attr-key
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 1, 'y': 2})
      >
      > class ParentObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr()
      >
      > class DummyObj(ParentObj):
      >     x = byoc.inherited_attr('y')
    expected:
      x: 2
  -
    id: inherited-attr-cast
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 0, 'y': 1})
      >
      > class ParentObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr('y')
      >
      > class DummyObj(ParentObj):
      >     x = byoc.inherited_attr(cast=lambda x: x+1)
    expected:
      x: 2
  -
    id: inherited-attr-pick
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 0, 'y': 1})
      >         yield DictLayer({'x': 0, 'y': 2})
      >
      > class ParentObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr('y')
      >
      > class DummyObj(ParentObj):
      >     x = byoc.inherited_attr(pick=list)
    expected:
      x: [1, 2]
  -
    id: inherited-attr-default
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 0})
      >
      > class ParentObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr('y', default=1)
      >
      > class DummyObj(ParentObj):
      >     x = byoc.inherited_attr(default=2)
    expected:
      x: 2
  -
    id: inherited-attr-ignore
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 0, 'y': 1})
      >
      > class ParentObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr('y')
      >
      > class DummyObj(ParentObj):
      >     x = byoc.inherited_attr(ignore=None)
      >
      > obj = DummyObj()
      > obj.x = None
    expected:
      x: 1
  -
    id: inherited-attr-get
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': 0, 'y': 1})
      >
      > class ParentObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.attr('y')
      >
      > class DummyObj(ParentObj):
      >     x = byoc.inherited_attr(get=lambda self, x: x+1)
    expected:
      x: 2

  -
    id: toggle-key
    obj:
      > class DummyConfig(Config):
      >     def load(self):
      >         yield DictLayer({'x': True})
      >
      > class DummyObj:
      >     __config__ = [DummyConfig]
      >     x = byoc.toggle_attr(
      >             Key(DummyConfig, toggle=True),
      >             default=True,
      >     )
    expected:
      x: False
  -
    id: toggle-value
    obj:
      > class DummyObj:
      >     __config__ = []
      >     x = byoc.toggle_attr(
      >             byoc.Value(True, toggle=True),
      >             default=True,
      >     )
    expected:
      x: False

