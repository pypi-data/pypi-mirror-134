{"version":3,"file":"244ffea9.js","mappings":";;AA+FA;AACA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;;;;AAIA;;AAIA;;;;;AAMA;;AAGA;;AAGA;AACA;;;;;AAOA;;AAGA;AAGA;;AAIA;AAOA;;;AAQA;;;;;AAMA;;;AAGA;;;;AAIA;;;AAGA;;;AAKA;AAEA;;AAEA;;AAIA;;;;;AAMA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;;;;AAIA;AACA;;AAEA;;;AAKA;AACA;;AAEA;;;AAKA;AACA;;AAEA;;;AAKA;AACA;;AAEA;;;;;;;AASA;;AAGA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;AAKA;AAGA;;AAEA;AACA;;;;;;AAyBA;;;AAmBA;;AAQA;;;;AAKA;;AAEA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlTA","sources":["webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave_js/zwave_js-config-dashboard.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport {\n  mdiAlertCircle,\n  mdiCheckCircle,\n  mdiCircle,\n  mdiPlus,\n  mdiRefresh,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-icon-button\";\nimport \"../../../../../components/ha-fab\";\nimport \"../../../../../components/ha-icon-next\";\nimport \"../../../../../components/ha-svg-icon\";\nimport { getSignedPath } from \"../../../../../data/auth\";\nimport {\n  fetchZwaveDataCollectionStatus,\n  fetchZwaveNetworkStatus,\n  fetchZwaveNodeStatus,\n  fetchZwaveProvisioningEntries,\n  NodeStatus,\n  setZwaveDataCollectionPreference,\n  ZWaveJSNetwork,\n  ZWaveJSNodeStatus,\n  ZwaveJSProvisioningEntry,\n} from \"../../../../../data/zwave_js\";\nimport {\n  ConfigEntry,\n  getConfigEntries,\n  ERROR_STATES,\n} from \"../../../../../data/config_entries\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../../../types\";\nimport { fileDownload } from \"../../../../../util/file_download\";\nimport \"../../../ha-config-section\";\nimport { showZWaveJSAddNodeDialog } from \"./show-dialog-zwave_js-add-node\";\nimport { showZWaveJSHealNetworkDialog } from \"./show-dialog-zwave_js-heal-network\";\nimport { showZWaveJSRemoveNodeDialog } from \"./show-dialog-zwave_js-remove-node\";\nimport { configTabs } from \"./zwave_js-config-router\";\nimport { showOptionsFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-options-flow\";\nimport { computeRTL } from \"../../../../../common/util/compute_rtl\";\n\n@customElement(\"zwave_js-config-dashboard\")\nclass ZWaveJSConfigDashboard extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property() public configEntryId?: string;\n\n  @state() private _configEntry?: ConfigEntry;\n\n  @state() private _network?: ZWaveJSNetwork;\n\n  @state() private _nodes?: ZWaveJSNodeStatus[];\n\n  @state() private _provisioningEntries?: ZwaveJSProvisioningEntry[];\n\n  @state() private _status = \"unknown\";\n\n  @state() private _icon = mdiCircle;\n\n  @state() private _dataCollectionOptIn?: boolean;\n\n  protected firstUpdated() {\n    if (this.hass) {\n      this._fetchData();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._configEntry) {\n      return html``;\n    }\n\n    if (ERROR_STATES.includes(this._configEntry.state)) {\n      return this._renderErrorScreen();\n    }\n\n    const notReadyDevices =\n      this._nodes?.filter((node) => !node.ready).length ?? 0;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .tabs=${configTabs}\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          @click=${this._fetchData}\n          .path=${mdiRefresh}\n          .label=${this.hass!.localize(\"ui.common.refresh\")}\n        ></ha-icon-button>\n        <ha-config-section .narrow=${this.narrow} .isWide=${this.isWide}>\n          <div slot=\"header\">\n            ${this.hass.localize(\"ui.panel.config.zwave_js.dashboard.header\")}\n          </div>\n\n          <div slot=\"introduction\">\n            ${this.hass.localize(\n              \"ui.panel.config.zwave_js.dashboard.introduction\"\n            )}\n          </div>\n          ${this._network\n            ? html`\n                <ha-card class=\"content network-status\">\n                  <div class=\"card-content\">\n                    <div class=\"heading\">\n                      <div class=\"icon\">\n                        ${this._status === \"connecting\"\n                          ? html`<ha-circular-progress\n                              active\n                            ></ha-circular-progress>`\n                          : html`\n                              <ha-svg-icon\n                                .path=${this._icon}\n                                class=\"network-status-icon ${classMap({\n                                  [this._status]: true,\n                                })}\"\n                                slot=\"item-icon\"\n                              ></ha-svg-icon>\n                            `}\n                      </div>\n                      ${this._status !== \"connecting\"\n                        ? html`\n                            <div class=\"details\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.zwave_js.common.network\"\n                              )}\n                              ${this.hass.localize(\n                                `ui.panel.config.zwave_js.network_status.${this._status}`\n                              )}<br />\n                              <small>\n                                ${this.hass.localize(\n                                  `ui.panel.config.zwave_js.dashboard.devices`,\n                                  {\n                                    count:\n                                      this._network.controller.nodes.length,\n                                  }\n                                )}\n                                ${notReadyDevices > 0\n                                  ? html`(${this.hass.localize(\n                                      `ui.panel.config.zwave_js.dashboard.not_ready`,\n                                      { count: notReadyDevices }\n                                    )})`\n                                  : \"\"}\n                              </small>\n                            </div>\n                          `\n                        : ``}\n                    </div>\n                  </div>\n                  <div class=\"card-actions\">\n                    <a\n                      href=${`/config/devices/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                    >\n                      <mwc-button>\n                        ${this.hass.localize(\"ui.panel.config.devices.caption\")}\n                      </mwc-button>\n                    </a>\n                    <a\n                      href=${`/config/entities/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                    >\n                      <mwc-button>\n                        ${this.hass.localize(\n                          \"ui.panel.config.entities.caption\"\n                        )}\n                      </mwc-button>\n                    </a>\n                    ${this._provisioningEntries?.length\n                      ? html`<a\n                          href=${`provisioned?config_entry=${this.configEntryId}`}\n                          ><mwc-button>\n                            ${this.hass.localize(\n                              \"ui.panel.config.zwave_js.dashboard.provisioned_devices\"\n                            )}\n                          </mwc-button></a\n                        >`\n                      : \"\"}\n                  </div>\n                </ha-card>\n                <ha-card header=\"Diagnostics\">\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.dashboard.driver_version\"\n                    )}:\n                    ${this._network.client.driver_version}<br />\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.dashboard.server_version\"\n                    )}:\n                    ${this._network.client.server_version}<br />\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.dashboard.home_id\"\n                    )}:\n                    ${this._network.controller.home_id}<br />\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.dashboard.server_url\"\n                    )}:\n                    ${this._network.client.ws_server_url}<br />\n                  </div>\n                  <div class=\"card-actions\">\n                    <mwc-button\n                      @click=${this._dumpDebugClicked}\n                      .disabled=${this._status === \"connecting\"}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.dashboard.dump_debug\"\n                      )}\n                    </mwc-button>\n                    <mwc-button\n                      @click=${this._removeNodeClicked}\n                      .disabled=${this._status === \"connecting\"}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.common.remove_node\"\n                      )}\n                    </mwc-button>\n                    <mwc-button\n                      @click=${this._healNetworkClicked}\n                      .disabled=${this._status === \"connecting\"}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.common.heal_network\"\n                      )}\n                    </mwc-button>\n                    <mwc-button\n                      @click=${this._openOptionFlow}\n                      .disabled=${this._status === \"connecting\"}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.common.reconfigure_server\"\n                      )}\n                    </mwc-button>\n                  </div>\n                </ha-card>\n                <ha-card>\n                  <div class=\"card-header\">\n                    <h1>Third-Party Data Reporting</h1>\n                    ${this._dataCollectionOptIn !== undefined\n                      ? html`\n                          <ha-switch\n                            .checked=${this._dataCollectionOptIn === true}\n                            @change=${this._dataCollectionToggled}\n                          ></ha-switch>\n                        `\n                      : html`\n                          <ha-circular-progress\n                            size=\"small\"\n                            active\n                          ></ha-circular-progress>\n                        `}\n                  </div>\n                  <div class=\"card-content\">\n                    <p>\n                      Enable the reporting of anonymized telemetry and\n                      statistics to the <em>Z-Wave JS organization</em>. This\n                      data will be used to focus development efforts and improve\n                      the user experience. Information about the data that is\n                      collected and how it is used, including an example of the\n                      data collected, can be found in the\n                      <a\n                        target=\"_blank\"\n                        href=\"https://zwave-js.github.io/node-zwave-js/#/data-collection/data-collection?id=usage-statistics\"\n                        >Z-Wave JS data collection documentation</a\n                      >.\n                    </p>\n                  </div>\n                </ha-card>\n              `\n            : ``}\n        </ha-config-section>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.zwave_js.common.add_node\"\n          )}\n          .disabled=${this._status === \"connecting\"}\n          extended\n          ?rtl=${computeRTL(this.hass)}\n          @click=${this._addNodeClicked}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _renderErrorScreen() {\n    const item = this._configEntry!;\n    let stateText: [string, ...unknown[]] | undefined;\n    let stateTextExtra: TemplateResult | string | undefined;\n\n    if (item.disabled_by) {\n      stateText = [\n        \"ui.panel.config.integrations.config_entry.disable.disabled_cause\",\n        {\n          cause:\n            this.hass.localize(\n              `ui.panel.config.integrations.config_entry.disable.disabled_by.${item.disabled_by}`\n            ) || item.disabled_by,\n        },\n      ];\n      if (item.state === \"failed_unload\") {\n        stateTextExtra = html`.\n        ${this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.disable_restart_confirm\"\n        )}.`;\n      }\n    } else if (item.state === \"not_loaded\") {\n      stateText = [\"ui.panel.config.integrations.config_entry.not_loaded\"];\n    } else if (ERROR_STATES.includes(item.state)) {\n      stateText = [\n        `ui.panel.config.integrations.config_entry.state.${item.state}`,\n      ];\n      if (item.reason) {\n        this.hass.loadBackendTranslation(\"config\", item.domain);\n        stateTextExtra = html` ${this.hass.localize(\n          `component.${item.domain}.config.error.${item.reason}`\n        ) || item.reason}`;\n      } else {\n        stateTextExtra = html`\n          <br />\n          <a href=\"/config/logs\"\n            >${this.hass.localize(\n              \"ui.panel.config.integrations.config_entry.check_the_logs\"\n            )}</a\n          >\n        `;\n      }\n    }\n\n    return html` ${stateText\n      ? html`\n          <div class=\"error-message\">\n            <ha-svg-icon .path=${mdiAlertCircle}></ha-svg-icon>\n            <h3>\n              ${this._configEntry!.title}: ${this.hass.localize(...stateText)}\n            </h3>\n            <p>${stateTextExtra}</p>\n            <mwc-button @click=${this._handleBack}>\n              ${this.hass?.localize(\"ui.panel.error.go_back\") || \"go back\"}\n            </mwc-button>\n          </div>\n        `\n      : \"\"}`;\n  }\n\n  private _handleBack(): void {\n    history.back();\n  }\n\n  private async _fetchData() {\n    if (!this.configEntryId) {\n      return;\n    }\n    const configEntries = await getConfigEntries(this.hass);\n    this._configEntry = configEntries.find(\n      (entry) => entry.entry_id === this.configEntryId!\n    );\n\n    if (ERROR_STATES.includes(this._configEntry!.state)) {\n      return;\n    }\n\n    const [network, dataCollectionStatus, provisioningEntries] =\n      await Promise.all([\n        fetchZwaveNetworkStatus(this.hass!, this.configEntryId),\n        fetchZwaveDataCollectionStatus(this.hass!, this.configEntryId),\n        fetchZwaveProvisioningEntries(this.hass!, this.configEntryId),\n      ]);\n\n    this._provisioningEntries = provisioningEntries;\n\n    this._network = network;\n\n    this._status = this._network.client.state;\n    if (this._status === \"connected\") {\n      this._icon = mdiCheckCircle;\n    }\n\n    this._dataCollectionOptIn =\n      dataCollectionStatus.opted_in === true ||\n      dataCollectionStatus.enabled === true;\n\n    this._fetchNodeStatus();\n  }\n\n  private async _fetchNodeStatus() {\n    if (!this._network) {\n      return;\n    }\n    const nodeStatePromisses = this._network.controller.nodes.map((nodeId) =>\n      fetchZwaveNodeStatus(this.hass, this.configEntryId!, nodeId)\n    );\n    this._nodes = await Promise.all(nodeStatePromisses);\n  }\n\n  private async _addNodeClicked() {\n    showZWaveJSAddNodeDialog(this, {\n      entry_id: this.configEntryId!,\n      addedCallback: () => this._fetchData(),\n    });\n  }\n\n  private async _removeNodeClicked() {\n    showZWaveJSRemoveNodeDialog(this, {\n      entry_id: this.configEntryId!,\n    });\n  }\n\n  private async _healNetworkClicked() {\n    showZWaveJSHealNetworkDialog(this, {\n      entry_id: this.configEntryId!,\n    });\n  }\n\n  private _dataCollectionToggled(ev) {\n    setZwaveDataCollectionPreference(\n      this.hass!,\n      this.configEntryId!,\n      ev.target.checked\n    );\n  }\n\n  private async _openOptionFlow() {\n    if (!this.configEntryId) {\n      return;\n    }\n    const configEntries = await getConfigEntries(this.hass);\n    const configEntry = configEntries.find(\n      (entry) => entry.entry_id === this.configEntryId\n    );\n    showOptionsFlowDialog(this, configEntry!);\n  }\n\n  private async _dumpDebugClicked() {\n    await this._fetchNodeStatus();\n\n    const notReadyNodes = this._nodes?.filter((node) => !node.ready);\n    const deadNodes = this._nodes?.filter(\n      (node) => node.status === NodeStatus.Dead\n    );\n\n    if (deadNodes?.length) {\n      await showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.zwave_js.dashboard.dump_dead_nodes_title\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.config.zwave_js.dashboard.dump_dead_nodes_text\"\n        ),\n      });\n    }\n\n    if (\n      notReadyNodes?.length &&\n      notReadyNodes.length !== deadNodes?.length &&\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.zwave_js.dashboard.dump_not_ready_title\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.config.zwave_js.dashboard.dump_not_ready_text\"\n        ),\n        confirmText: this.hass.localize(\n          \"ui.panel.config.zwave_js.dashboard.dump_not_ready_confirm\"\n        ),\n      }))\n    ) {\n      return;\n    }\n\n    let signedPath: { path: string };\n    try {\n      signedPath = await getSignedPath(\n        this.hass,\n        `/api/zwave_js/dump/${this.configEntryId}`\n      );\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Error\",\n        text: err.error || err.body || err,\n      });\n      return;\n    }\n\n    fileDownload(this, signedPath.path, `zwave_js_dump.jsonl`);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n        .connected {\n          color: green;\n        }\n        .starting {\n          color: orange;\n        }\n        .offline {\n          color: red;\n        }\n\n        .error-message {\n          display: flex;\n          color: var(--primary-text-color);\n          height: calc(100% - var(--header-height));\n          padding: 16px;\n          align-items: center;\n          justify-content: center;\n          flex-direction: column;\n        }\n\n        .error-message h3 {\n          text-align: center;\n          font-weight: bold;\n        }\n\n        .error-message ha-svg-icon {\n          color: var(--error-color);\n          width: 64px;\n          height: 64px;\n        }\n\n        .content {\n          margin-top: 24px;\n        }\n\n        .sectionHeader {\n          position: relative;\n          padding-right: 40px;\n        }\n\n        .network-status div.heading {\n          display: flex;\n          align-items: center;\n        }\n\n        .network-status div.heading .icon {\n          width: 48px;\n          height: 48px;\n          margin-right: 16px;\n        }\n        .network-status div.heading ha-svg-icon {\n          width: 48px;\n          height: 48px;\n        }\n        .network-status div.heading .details {\n          font-size: 1.5rem;\n        }\n\n        .network-status small {\n          font-size: 1rem;\n        }\n\n        .card-header {\n          display: flex;\n        }\n        .card-header h1 {\n          flex: 1;\n        }\n        .card-header ha-switch {\n          width: 48px;\n          margin-top: 16px;\n        }\n\n        ha-card {\n          margin: 0px auto 24px;\n          max-width: 600px;\n        }\n\n        button.dump {\n          width: 100%;\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n\n        [hidden] {\n          display: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zwave_js-config-dashboard\": ZWaveJSConfigDashboard;\n  }\n}\n"],"names":[],"sourceRoot":""}