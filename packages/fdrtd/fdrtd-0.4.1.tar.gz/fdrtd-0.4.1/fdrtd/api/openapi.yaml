openapi: 3.0.0

info:

  title: fdrtd API
  version: 0.3.0
  description: https://github.com/fdrtd

  contact:
    name: fdrtd support
    email: support@fdrtd.com
    url: https://www.fdrtd.com

  license:
    # identifier: MIT
    # SPDX identifiers are introduced in OpenAPI spec 3.1.0
    name: MIT License
    url: https://github.com/fdrtd/api/blob/main/LICENSE.txt

externalDocs:
  description: developer documentation
  url: https://fdrtd.github.io/fdrtd/

paths:

  # implementation of the 'representation' API
  # see https://github.com/bytesforlife/representation

  /representations:

    get:
      summary: list available server-side objects
      description: returns a list of server-side objects that are available to be represented client-side.
                   typical choices are classes, static functions, and other singletons.
                   instances, their attributes, and other variables may also be referenced.
      operationId: list_representations
      responses:
        '200':
          $ref: '#/components/responses/ResponseOk'
        'default':
          $ref: '#/components/responses/ResponseError'

    post:
      summary: create a representation
      description: create a representation, a client-side reference to a server-side object.
                   the representation will be wrapped client-side,
                   so that it may be interacted with as if it were a local object.
      operationId: create_representation
      requestBody:
        $ref: '#/components/requestBodies/ArgsKwargs'
      responses:
        '200':
          $ref: '#/components/responses/ResponseOk'
        'default':
          $ref: '#/components/responses/ResponseError'

    put:
      summary: upload an object, and return its representation
      description: upload an object to the server, and return a reference for future interaction.
      operationId: upload_representation
      requestBody:
        $ref: '#/components/requestBodies/ArgsKwargs'
      responses:
        '200':
          $ref: '#/components/responses/ResponseOk'
        'default':
          $ref: '#/components/responses/ResponseError'


  /representation/{representation_uuid}:

    patch:
      summary: call a server-side object
      description: call a server-side object such as a static function, a member function, or in case of a class, its constructor
      operationId: call_representation
      parameters:
        - in: path
          name: representation_uuid
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/ArgsKwargs'
      responses:
        '200':
          $ref: '#/components/responses/ResponseOk'
        'default':
          $ref: '#/components/responses/ResponseError'

    get:
      summary: download a serialized version of a server-side object
      description: download a serialized version of a server-side object itself (instead of its representation).
                   think of this as a de-referencing operation, downloading the object to the client.
      operationId: download_representation
      parameters:
        - in: path
          name: representation_uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/ResponseOk'
        'default':
          $ref: '#/components/responses/ResponseError'

    delete:
      summary: release a representation
      description: release the representation of a server-side object
      operationId: release_representation
      parameters:
        - in: path
          name: representation_uuid
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/ResponseOk'
        'default':
          $ref: '#/components/responses/ResponseError'


  /representation/{representation_uuid}/{attribute_name}:

    get:
      summary: create a representation of an attribute of a representation
      description: create a representation of an attribute of a representation
      operationId: create_attribute
      parameters:
        - in: path
          name: representation_uuid
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: attribute_name
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/ResponseOk'
        'default':
          $ref: '#/components/responses/ResponseError'



components:


  requestBodies:

    ArgsKwargs:
      description: an ordered list of unnamed arguments, followed by a key-value dictionary of named arguments
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArgsKwargs'


  responses:

    ResponseOk:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
            additionalProperties: true

    ResponseError:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              stacktrace:
                type: string
            required:
              - code
              - message

  schemas:

    ArgsKwargs:
      type: object
      additionalProperties: true  # temporary fix, because the following does not work:
      #required:
      #  - args
      #  - kwargs
      #properties:
      #  args:
      #    type: array
      #    items: {}
      #  kwargs:
      #    type: object
      #    additionalProperties: true
      #additionalProperties: false
